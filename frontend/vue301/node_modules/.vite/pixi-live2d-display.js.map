{
  "version": 3,
  "sources": ["../pixi-live2d-display/dist/index.es.js"],
  "sourcesContent": ["var __pow = Math.pow;\r\nvar __async = (__this, __arguments, generator) => {\r\n  return new Promise((resolve, reject) => {\r\n    var fulfilled = (value) => {\r\n      try {\r\n        step(generator.next(value));\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n    var rejected = (value) => {\r\n      try {\r\n        step(generator.throw(value));\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    };\r\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\r\n    step((generator = generator.apply(__this, __arguments)).next());\r\n  });\r\n};\r\nimport { EventEmitter, url } from \"@pixi/utils\";\r\nimport { Matrix, Transform, Point, ObservablePoint } from \"@pixi/math\";\r\nimport { Texture } from \"@pixi/core\";\r\nimport { Container } from \"@pixi/display\";\r\nconst LOGICAL_WIDTH = 2;\r\nconst LOGICAL_HEIGHT = 2;\r\nvar CubismConfig;\r\n((CubismConfig2) => {\r\n  CubismConfig2.supportMoreMaskDivisions = true;\r\n  CubismConfig2.setOpacityFromMotion = false;\r\n})(CubismConfig || (CubismConfig = {}));\r\nvar config;\r\n((config2) => {\r\n  config2.LOG_LEVEL_VERBOSE = 0;\r\n  config2.LOG_LEVEL_WARNING = 1;\r\n  config2.LOG_LEVEL_ERROR = 2;\r\n  config2.LOG_LEVEL_NONE = 999;\r\n  config2.logLevel = config2.LOG_LEVEL_WARNING;\r\n  config2.sound = true;\r\n  config2.motionSync = true;\r\n  config2.motionFadingDuration = 500;\r\n  config2.idleMotionFadingDuration = 2e3;\r\n  config2.expressionFadingDuration = 500;\r\n  config2.preserveExpressionOnMotion = true;\r\n  config2.cubism4 = CubismConfig;\r\n})(config || (config = {}));\r\nconst VERSION = \"0.4.0\";\r\nconst logger = {\r\n  log(tag, ...messages) {\r\n    if (config.logLevel <= config.LOG_LEVEL_VERBOSE) {\r\n      console.log(`[${tag}]`, ...messages);\r\n    }\r\n  },\r\n  warn(tag, ...messages) {\r\n    if (config.logLevel <= config.LOG_LEVEL_WARNING) {\r\n      console.warn(`[${tag}]`, ...messages);\r\n    }\r\n  },\r\n  error(tag, ...messages) {\r\n    if (config.logLevel <= config.LOG_LEVEL_ERROR) {\r\n      console.error(`[${tag}]`, ...messages);\r\n    }\r\n  }\r\n};\r\nfunction clamp(num, lower, upper) {\r\n  return num < lower ? lower : num > upper ? upper : num;\r\n}\r\nfunction rand(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nfunction copyProperty(type, from, to, fromKey, toKey) {\r\n  const value = from[fromKey];\r\n  if (value !== null && typeof value === type) {\r\n    to[toKey] = value;\r\n  }\r\n}\r\nfunction copyArray(type, from, to, fromKey, toKey) {\r\n  const array = from[fromKey];\r\n  if (Array.isArray(array)) {\r\n    to[toKey] = array.filter((item) => item !== null && typeof item === type);\r\n  }\r\n}\r\nfunction applyMixins(derivedCtor, baseCtors) {\r\n  baseCtors.forEach((baseCtor) => {\r\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\r\n      if (name !== \"constructor\") {\r\n        Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\r\n      }\r\n    });\r\n  });\r\n}\r\nfunction folderName(url2) {\r\n  let lastSlashIndex = url2.lastIndexOf(\"/\");\r\n  if (lastSlashIndex != -1) {\r\n    url2 = url2.slice(0, lastSlashIndex);\r\n  }\r\n  lastSlashIndex = url2.lastIndexOf(\"/\");\r\n  if (lastSlashIndex !== -1) {\r\n    url2 = url2.slice(lastSlashIndex + 1);\r\n  }\r\n  return url2;\r\n}\r\nfunction remove(array, item) {\r\n  const index = array.indexOf(item);\r\n  if (index !== -1) {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\nclass ExpressionManager extends EventEmitter {\r\n  constructor(settings, options) {\r\n    super();\r\n    this.expressions = [];\r\n    this.reserveExpressionIndex = -1;\r\n    this.destroyed = false;\r\n    this.settings = settings;\r\n    this.tag = `ExpressionManager(${settings.name})`;\r\n  }\r\n  init() {\r\n    this.defaultExpression = this.createExpression({}, void 0);\r\n    this.currentExpression = this.defaultExpression;\r\n    this.stopAllExpressions();\r\n  }\r\n  loadExpression(index) {\r\n    return __async(this, null, function* () {\r\n      if (!this.definitions[index]) {\r\n        logger.warn(this.tag, `Undefined expression at [${index}]`);\r\n        return void 0;\r\n      }\r\n      if (this.expressions[index] === null) {\r\n        logger.warn(this.tag, `Cannot set expression at [${index}] because it's already failed in loading.`);\r\n        return void 0;\r\n      }\r\n      if (this.expressions[index]) {\r\n        return this.expressions[index];\r\n      }\r\n      const expression = yield this._loadExpression(index);\r\n      this.expressions[index] = expression;\r\n      return expression;\r\n    });\r\n  }\r\n  _loadExpression(index) {\r\n    throw new Error(\"Not implemented.\");\r\n  }\r\n  setRandomExpression() {\r\n    return __async(this, null, function* () {\r\n      if (this.definitions.length) {\r\n        const availableIndices = [];\r\n        for (let i = 0; i < this.definitions.length; i++) {\r\n          if (this.expressions[i] !== null && this.expressions[i] !== this.currentExpression && i !== this.reserveExpressionIndex) {\r\n            availableIndices.push(i);\r\n          }\r\n        }\r\n        if (availableIndices.length) {\r\n          const index = Math.floor(Math.random() * availableIndices.length);\r\n          return this.setExpression(index);\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n  resetExpression() {\r\n    this._setExpression(this.defaultExpression);\r\n  }\r\n  restoreExpression() {\r\n    this._setExpression(this.currentExpression);\r\n  }\r\n  setExpression(index) {\r\n    return __async(this, null, function* () {\r\n      if (typeof index !== \"number\") {\r\n        index = this.getExpressionIndex(index);\r\n      }\r\n      if (!(index > -1 && index < this.definitions.length)) {\r\n        return false;\r\n      }\r\n      if (index === this.expressions.indexOf(this.currentExpression)) {\r\n        return false;\r\n      }\r\n      this.reserveExpressionIndex = index;\r\n      const expression = yield this.loadExpression(index);\r\n      if (!expression || this.reserveExpressionIndex !== index) {\r\n        return false;\r\n      }\r\n      this.reserveExpressionIndex = -1;\r\n      this.currentExpression = expression;\r\n      this._setExpression(expression);\r\n      return true;\r\n    });\r\n  }\r\n  update(model, now) {\r\n    if (!this.isFinished()) {\r\n      return this.updateParameters(model, now);\r\n    }\r\n    return false;\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    this.emit(\"destroy\");\r\n    const self = this;\r\n    self.definitions = void 0;\r\n    self.expressions = void 0;\r\n  }\r\n}\r\nconst EPSILON = 0.01;\r\nconst MAX_SPEED = 40 / 7.5;\r\nconst ACCELERATION_TIME = 1 / (0.15 * 1e3);\r\nclass FocusController {\r\n  constructor() {\r\n    this.targetX = 0;\r\n    this.targetY = 0;\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.vx = 0;\r\n    this.vy = 0;\r\n  }\r\n  focus(x, y, instant = false) {\r\n    this.targetX = clamp(x, -1, 1);\r\n    this.targetY = clamp(y, -1, 1);\r\n    if (instant) {\r\n      this.x = this.targetX;\r\n      this.y = this.targetY;\r\n    }\r\n  }\r\n  update(dt) {\r\n    const dx = this.targetX - this.x;\r\n    const dy = this.targetY - this.y;\r\n    if (Math.abs(dx) < EPSILON && Math.abs(dy) < EPSILON)\r\n      return;\r\n    const d = Math.sqrt(__pow(dx, 2) + __pow(dy, 2));\r\n    const maxSpeed = MAX_SPEED / (1e3 / dt);\r\n    let ax = maxSpeed * (dx / d) - this.vx;\r\n    let ay = maxSpeed * (dy / d) - this.vy;\r\n    const a = Math.sqrt(__pow(ax, 2) + __pow(ay, 2));\r\n    const maxA = maxSpeed * ACCELERATION_TIME * dt;\r\n    if (a > maxA) {\r\n      ax *= maxA / a;\r\n      ay *= maxA / a;\r\n    }\r\n    this.vx += ax;\r\n    this.vy += ay;\r\n    const v = Math.sqrt(__pow(this.vx, 2) + __pow(this.vy, 2));\r\n    const maxV = 0.5 * (Math.sqrt(__pow(maxA, 2) + 8 * maxA * d) - maxA);\r\n    if (v > maxV) {\r\n      this.vx *= maxV / v;\r\n      this.vy *= maxV / v;\r\n    }\r\n    this.x += this.vx;\r\n    this.y += this.vy;\r\n  }\r\n}\r\nclass ModelSettings {\r\n  constructor(json) {\r\n    this.json = json;\r\n    let url2 = json.url;\r\n    if (typeof url2 !== \"string\") {\r\n      throw new TypeError(\"The `url` field in settings JSON must be defined as a string.\");\r\n    }\r\n    this.url = url2;\r\n    this.name = folderName(this.url);\r\n  }\r\n  resolveURL(path) {\r\n    return url.resolve(this.url, path);\r\n  }\r\n  replaceFiles(replacer) {\r\n    this.moc = replacer(this.moc, \"moc\");\r\n    if (this.pose !== void 0) {\r\n      this.pose = replacer(this.pose, \"pose\");\r\n    }\r\n    if (this.physics !== void 0) {\r\n      this.physics = replacer(this.physics, \"physics\");\r\n    }\r\n    for (let i = 0; i < this.textures.length; i++) {\r\n      this.textures[i] = replacer(this.textures[i], `textures[${i}]`);\r\n    }\r\n  }\r\n  getDefinedFiles() {\r\n    const files = [];\r\n    this.replaceFiles((file) => {\r\n      files.push(file);\r\n      return file;\r\n    });\r\n    return files;\r\n  }\r\n  validateFiles(files) {\r\n    const assertFileExists = (expectedFile, shouldThrow) => {\r\n      const actualPath = this.resolveURL(expectedFile);\r\n      if (!files.includes(actualPath)) {\r\n        if (shouldThrow) {\r\n          throw new Error(`File \"${expectedFile}\" is defined in settings, but doesn't exist in given files`);\r\n        }\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n    const essentialFiles = [this.moc, ...this.textures];\r\n    essentialFiles.forEach((texture) => assertFileExists(texture, true));\r\n    const definedFiles = this.getDefinedFiles();\r\n    return definedFiles.filter((file) => assertFileExists(file, false));\r\n  }\r\n}\r\nvar MotionPriority = /* @__PURE__ */ ((MotionPriority2) => {\r\n  MotionPriority2[MotionPriority2[\"NONE\"] = 0] = \"NONE\";\r\n  MotionPriority2[MotionPriority2[\"IDLE\"] = 1] = \"IDLE\";\r\n  MotionPriority2[MotionPriority2[\"NORMAL\"] = 2] = \"NORMAL\";\r\n  MotionPriority2[MotionPriority2[\"FORCE\"] = 3] = \"FORCE\";\r\n  return MotionPriority2;\r\n})(MotionPriority || {});\r\nclass MotionState {\r\n  constructor() {\r\n    this.debug = false;\r\n    this.currentPriority = 0;\r\n    this.reservePriority = 0;\r\n  }\r\n  reserve(group, index, priority) {\r\n    if (priority <= 0) {\r\n      logger.log(this.tag, `Cannot start a motion with MotionPriority.NONE.`);\r\n      return false;\r\n    }\r\n    if (group === this.currentGroup && index === this.currentIndex) {\r\n      logger.log(this.tag, `Motion is already playing.`, this.dump(group, index));\r\n      return false;\r\n    }\r\n    if (group === this.reservedGroup && index === this.reservedIndex || group === this.reservedIdleGroup && index === this.reservedIdleIndex) {\r\n      logger.log(this.tag, `Motion is already reserved.`, this.dump(group, index));\r\n      return false;\r\n    }\r\n    if (priority === 1) {\r\n      if (this.currentPriority !== 0) {\r\n        logger.log(this.tag, `Cannot start idle motion because another motion is playing.`, this.dump(group, index));\r\n        return false;\r\n      }\r\n      if (this.reservedIdleGroup !== void 0) {\r\n        logger.log(this.tag, `Cannot start idle motion because another idle motion has reserved.`, this.dump(group, index));\r\n        return false;\r\n      }\r\n      this.setReservedIdle(group, index);\r\n    } else {\r\n      if (priority < 3) {\r\n        if (priority <= this.currentPriority) {\r\n          logger.log(this.tag, \"Cannot start motion because another motion is playing as an equivalent or higher priority.\", this.dump(group, index));\r\n          return false;\r\n        }\r\n        if (priority <= this.reservePriority) {\r\n          logger.log(this.tag, \"Cannot start motion because another motion has reserved as an equivalent or higher priority.\", this.dump(group, index));\r\n          return false;\r\n        }\r\n      }\r\n      this.setReserved(group, index, priority);\r\n    }\r\n    return true;\r\n  }\r\n  start(motion, group, index, priority) {\r\n    if (priority === 1) {\r\n      this.setReservedIdle(void 0, void 0);\r\n      if (this.currentPriority !== 0) {\r\n        logger.log(this.tag, \"Cannot start idle motion because another motion is playing.\", this.dump(group, index));\r\n        return false;\r\n      }\r\n    } else {\r\n      if (group !== this.reservedGroup || index !== this.reservedIndex) {\r\n        logger.log(this.tag, \"Cannot start motion because another motion has taken the place.\", this.dump(group, index));\r\n        return false;\r\n      }\r\n      this.setReserved(void 0, void 0, 0);\r\n    }\r\n    if (!motion) {\r\n      return false;\r\n    }\r\n    this.setCurrent(group, index, priority);\r\n    return true;\r\n  }\r\n  complete() {\r\n    this.setCurrent(void 0, void 0, 0);\r\n  }\r\n  setCurrent(group, index, priority) {\r\n    this.currentPriority = priority;\r\n    this.currentGroup = group;\r\n    this.currentIndex = index;\r\n  }\r\n  setReserved(group, index, priority) {\r\n    this.reservePriority = priority;\r\n    this.reservedGroup = group;\r\n    this.reservedIndex = index;\r\n  }\r\n  setReservedIdle(group, index) {\r\n    this.reservedIdleGroup = group;\r\n    this.reservedIdleIndex = index;\r\n  }\r\n  isActive(group, index) {\r\n    return group === this.currentGroup && index === this.currentIndex || group === this.reservedGroup && index === this.reservedIndex || group === this.reservedIdleGroup && index === this.reservedIdleIndex;\r\n  }\r\n  reset() {\r\n    this.setCurrent(void 0, void 0, 0);\r\n    this.setReserved(void 0, void 0, 0);\r\n    this.setReservedIdle(void 0, void 0);\r\n  }\r\n  shouldRequestIdleMotion() {\r\n    return this.currentGroup === void 0 && this.reservedIdleGroup === void 0;\r\n  }\r\n  shouldOverrideExpression() {\r\n    return !config.preserveExpressionOnMotion && this.currentPriority > 1;\r\n  }\r\n  dump(requestedGroup, requestedIndex) {\r\n    if (this.debug) {\r\n      const keys = [\r\n        \"currentPriority\",\r\n        \"reservePriority\",\r\n        \"currentGroup\",\r\n        \"currentIndex\",\r\n        \"reservedGroup\",\r\n        \"reservedIndex\",\r\n        \"reservedIdleGroup\",\r\n        \"reservedIdleIndex\"\r\n      ];\r\n      return `\r\n<Requested> group = \"${requestedGroup}\", index = ${requestedIndex}\r\n` + keys.map((key) => \"[\" + key + \"] \" + this[key]).join(\"\\n\");\r\n    }\r\n    return \"\";\r\n  }\r\n}\r\nconst TAG$2 = \"SoundManager\";\r\nconst VOLUME = 0.5;\r\nclass SoundManager {\r\n  static get volume() {\r\n    return this._volume;\r\n  }\r\n  static set volume(value) {\r\n    this._volume = (value > 1 ? 1 : value < 0 ? 0 : value) || 0;\r\n    this.audios.forEach((audio) => audio.volume = this._volume);\r\n  }\r\n  static add(file, onFinish, onError) {\r\n    const audio = new Audio(file);\r\n    audio.volume = this._volume;\r\n    audio.preload = \"auto\";\r\n    audio.addEventListener(\"ended\", () => {\r\n      this.dispose(audio);\r\n      onFinish == null ? void 0 : onFinish();\r\n    });\r\n    audio.addEventListener(\"error\", (e) => {\r\n      this.dispose(audio);\r\n      logger.warn(TAG$2, `Error occurred on \"${file}\"`, e.error);\r\n      onError == null ? void 0 : onError(e.error);\r\n    });\r\n    this.audios.push(audio);\r\n    return audio;\r\n  }\r\n  static play(audio) {\r\n    return new Promise((resolve, reject) => {\r\n      var _a;\r\n      (_a = audio.play()) == null ? void 0 : _a.catch((e) => {\r\n        audio.dispatchEvent(new ErrorEvent(\"error\", { error: e }));\r\n        reject(e);\r\n      });\r\n      if (audio.readyState === audio.HAVE_ENOUGH_DATA) {\r\n        resolve();\r\n      } else {\r\n        audio.addEventListener(\"canplaythrough\", resolve);\r\n      }\r\n    });\r\n  }\r\n  static dispose(audio) {\r\n    audio.pause();\r\n    audio.removeAttribute(\"src\");\r\n    remove(this.audios, audio);\r\n  }\r\n  static destroy() {\r\n    for (let i = this.audios.length - 1; i >= 0; i--) {\r\n      this.dispose(this.audios[i]);\r\n    }\r\n  }\r\n}\r\nSoundManager.audios = [];\r\nSoundManager._volume = VOLUME;\r\nvar MotionPreloadStrategy = /* @__PURE__ */ ((MotionPreloadStrategy2) => {\r\n  MotionPreloadStrategy2[\"ALL\"] = \"ALL\";\r\n  MotionPreloadStrategy2[\"IDLE\"] = \"IDLE\";\r\n  MotionPreloadStrategy2[\"NONE\"] = \"NONE\";\r\n  return MotionPreloadStrategy2;\r\n})(MotionPreloadStrategy || {});\r\nclass MotionManager extends EventEmitter {\r\n  constructor(settings, options) {\r\n    super();\r\n    this.motionGroups = {};\r\n    this.state = new MotionState();\r\n    this.playing = false;\r\n    this.destroyed = false;\r\n    this.settings = settings;\r\n    this.tag = `MotionManager(${settings.name})`;\r\n    this.state.tag = this.tag;\r\n  }\r\n  init(options) {\r\n    if (options == null ? void 0 : options.idleMotionGroup) {\r\n      this.groups.idle = options.idleMotionGroup;\r\n    }\r\n    this.setupMotions(options);\r\n    this.stopAllMotions();\r\n  }\r\n  setupMotions(options) {\r\n    for (const group of Object.keys(this.definitions)) {\r\n      this.motionGroups[group] = [];\r\n    }\r\n    let groups;\r\n    switch (options == null ? void 0 : options.motionPreload) {\r\n      case \"NONE\":\r\n        return;\r\n      case \"ALL\":\r\n        groups = Object.keys(this.definitions);\r\n        break;\r\n      case \"IDLE\":\r\n      default:\r\n        groups = [this.groups.idle];\r\n        break;\r\n    }\r\n    for (const group of groups) {\r\n      if (this.definitions[group]) {\r\n        for (let i = 0; i < this.definitions[group].length; i++) {\r\n          this.loadMotion(group, i).then();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  loadMotion(group, index) {\r\n    return __async(this, null, function* () {\r\n      var _a;\r\n      if (!((_a = this.definitions[group]) == null ? void 0 : _a[index])) {\r\n        logger.warn(this.tag, `Undefined motion at \"${group}\"[${index}]`);\r\n        return void 0;\r\n      }\r\n      if (this.motionGroups[group][index] === null) {\r\n        logger.warn(this.tag, `Cannot start motion at \"${group}\"[${index}] because it's already failed in loading.`);\r\n        return void 0;\r\n      }\r\n      if (this.motionGroups[group][index]) {\r\n        return this.motionGroups[group][index];\r\n      }\r\n      const motion = yield this._loadMotion(group, index);\r\n      if (this.destroyed) {\r\n        return;\r\n      }\r\n      this.motionGroups[group][index] = motion != null ? motion : null;\r\n      return motion;\r\n    });\r\n  }\r\n  _loadMotion(group, index) {\r\n    throw new Error(\"Not implemented.\");\r\n  }\r\n  startMotion(_0, _1) {\r\n    return __async(this, arguments, function* (group, index, priority = MotionPriority.NORMAL) {\r\n      var _a;\r\n      if (!this.state.reserve(group, index, priority)) {\r\n        return false;\r\n      }\r\n      const definition = (_a = this.definitions[group]) == null ? void 0 : _a[index];\r\n      if (!definition) {\r\n        return false;\r\n      }\r\n      if (this.currentAudio) {\r\n        SoundManager.dispose(this.currentAudio);\r\n      }\r\n      let audio;\r\n      if (config.sound) {\r\n        const soundURL = this.getSoundFile(definition);\r\n        if (soundURL) {\r\n          try {\r\n            audio = SoundManager.add(this.settings.resolveURL(soundURL), () => this.currentAudio = void 0, () => this.currentAudio = void 0);\r\n            this.currentAudio = audio;\r\n          } catch (e) {\r\n            logger.warn(this.tag, \"Failed to create audio\", soundURL, e);\r\n          }\r\n        }\r\n      }\r\n      const motion = yield this.loadMotion(group, index);\r\n      if (audio) {\r\n        const readyToPlay = SoundManager.play(audio).catch((e) => logger.warn(this.tag, \"Failed to play audio\", audio.src, e));\r\n        if (config.motionSync) {\r\n          yield readyToPlay;\r\n        }\r\n      }\r\n      if (!this.state.start(motion, group, index, priority)) {\r\n        if (audio) {\r\n          SoundManager.dispose(audio);\r\n          this.currentAudio = void 0;\r\n        }\r\n        return false;\r\n      }\r\n      logger.log(this.tag, \"Start motion:\", this.getMotionName(definition));\r\n      this.emit(\"motionStart\", group, index, audio);\r\n      if (this.state.shouldOverrideExpression()) {\r\n        this.expressionManager && this.expressionManager.resetExpression();\r\n      }\r\n      this.playing = true;\r\n      this._startMotion(motion);\r\n      return true;\r\n    });\r\n  }\r\n  startRandomMotion(group, priority) {\r\n    return __async(this, null, function* () {\r\n      const groupDefs = this.definitions[group];\r\n      if (groupDefs == null ? void 0 : groupDefs.length) {\r\n        const availableIndices = [];\r\n        for (let i = 0; i < groupDefs.length; i++) {\r\n          if (this.motionGroups[group][i] !== null && !this.state.isActive(group, i)) {\r\n            availableIndices.push(i);\r\n          }\r\n        }\r\n        if (availableIndices.length) {\r\n          const index = Math.floor(Math.random() * availableIndices.length);\r\n          return this.startMotion(group, availableIndices[index], priority);\r\n        }\r\n      }\r\n      return false;\r\n    });\r\n  }\r\n  stopAllMotions() {\r\n    this._stopAllMotions();\r\n    this.state.reset();\r\n    if (this.currentAudio) {\r\n      SoundManager.dispose(this.currentAudio);\r\n      this.currentAudio = void 0;\r\n    }\r\n  }\r\n  update(model, now) {\r\n    var _a;\r\n    if (this.isFinished()) {\r\n      if (this.playing) {\r\n        this.playing = false;\r\n        this.emit(\"motionFinish\");\r\n      }\r\n      if (this.state.shouldOverrideExpression()) {\r\n        (_a = this.expressionManager) == null ? void 0 : _a.restoreExpression();\r\n      }\r\n      this.state.complete();\r\n      if (this.state.shouldRequestIdleMotion()) {\r\n        this.startRandomMotion(this.groups.idle, MotionPriority.IDLE);\r\n      }\r\n    }\r\n    return this.updateParameters(model, now);\r\n  }\r\n  destroy() {\r\n    var _a;\r\n    this.destroyed = true;\r\n    this.emit(\"destroy\");\r\n    this.stopAllMotions();\r\n    (_a = this.expressionManager) == null ? void 0 : _a.destroy();\r\n    const self = this;\r\n    self.definitions = void 0;\r\n    self.motionGroups = void 0;\r\n  }\r\n}\r\nconst tempBounds = { x: 0, y: 0, width: 0, height: 0 };\r\nclass InternalModel extends EventEmitter {\r\n  constructor() {\r\n    super(...arguments);\r\n    this.focusController = new FocusController();\r\n    this.originalWidth = 0;\r\n    this.originalHeight = 0;\r\n    this.width = 0;\r\n    this.height = 0;\r\n    this.localTransform = new Matrix();\r\n    this.drawingMatrix = new Matrix();\r\n    this.hitAreas = {};\r\n    this.textureFlipY = false;\r\n    this.viewport = [0, 0, 0, 0];\r\n    this.destroyed = false;\r\n  }\r\n  init() {\r\n    this.setupLayout();\r\n    this.setupHitAreas();\r\n  }\r\n  setupLayout() {\r\n    const self = this;\r\n    const size = this.getSize();\r\n    self.originalWidth = size[0];\r\n    self.originalHeight = size[1];\r\n    const layout = Object.assign({\r\n      width: LOGICAL_WIDTH,\r\n      height: LOGICAL_HEIGHT\r\n    }, this.getLayout());\r\n    this.localTransform.scale(layout.width / LOGICAL_WIDTH, layout.height / LOGICAL_HEIGHT);\r\n    self.width = this.originalWidth * this.localTransform.a;\r\n    self.height = this.originalHeight * this.localTransform.d;\r\n    const offsetX = layout.x !== void 0 && layout.x - layout.width / 2 || layout.centerX !== void 0 && layout.centerX || layout.left !== void 0 && layout.left - layout.width / 2 || layout.right !== void 0 && layout.right + layout.width / 2 || 0;\r\n    const offsetY = layout.y !== void 0 && layout.y - layout.height / 2 || layout.centerY !== void 0 && layout.centerY || layout.top !== void 0 && layout.top - layout.height / 2 || layout.bottom !== void 0 && layout.bottom + layout.height / 2 || 0;\r\n    this.localTransform.translate(this.width * offsetX, -this.height * offsetY);\r\n  }\r\n  setupHitAreas() {\r\n    const definitions = this.getHitAreaDefs().filter((hitArea) => hitArea.index >= 0);\r\n    for (const def of definitions) {\r\n      this.hitAreas[def.name] = def;\r\n    }\r\n  }\r\n  hitTest(x, y) {\r\n    return Object.keys(this.hitAreas).filter((hitAreaName) => this.isHit(hitAreaName, x, y));\r\n  }\r\n  isHit(hitAreaName, x, y) {\r\n    if (!this.hitAreas[hitAreaName]) {\r\n      return false;\r\n    }\r\n    const drawIndex = this.hitAreas[hitAreaName].index;\r\n    const bounds = this.getDrawableBounds(drawIndex, tempBounds);\r\n    return bounds.x <= x && x <= bounds.x + bounds.width && bounds.y <= y && y <= bounds.y + bounds.height;\r\n  }\r\n  getDrawableBounds(index, bounds) {\r\n    const vertices = this.getDrawableVertices(index);\r\n    let left = vertices[0];\r\n    let right = vertices[0];\r\n    let top = vertices[1];\r\n    let bottom = vertices[1];\r\n    for (let i = 0; i < vertices.length; i += 2) {\r\n      const vx = vertices[i];\r\n      const vy = vertices[i + 1];\r\n      left = Math.min(vx, left);\r\n      right = Math.max(vx, right);\r\n      top = Math.min(vy, top);\r\n      bottom = Math.max(vy, bottom);\r\n    }\r\n    bounds != null ? bounds : bounds = {};\r\n    bounds.x = left;\r\n    bounds.y = top;\r\n    bounds.width = right - left;\r\n    bounds.height = bottom - top;\r\n    return bounds;\r\n  }\r\n  updateTransform(transform) {\r\n    this.drawingMatrix.copyFrom(transform).append(this.localTransform);\r\n  }\r\n  update(dt, now) {\r\n    this.focusController.update(dt);\r\n  }\r\n  destroy() {\r\n    this.destroyed = true;\r\n    this.emit(\"destroy\");\r\n    this.motionManager.destroy();\r\n    this.motionManager = void 0;\r\n  }\r\n}\r\nconst TAG$1 = \"XHRLoader\";\r\nclass NetworkError extends Error {\r\n  constructor(message, url2, status, aborted = false) {\r\n    super(message);\r\n    this.url = url2;\r\n    this.status = status;\r\n    this.aborted = aborted;\r\n  }\r\n}\r\nconst _XHRLoader = class {\r\n  static createXHR(target, url2, type, onload, onerror) {\r\n    const xhr = new XMLHttpRequest();\r\n    _XHRLoader.allXhrSet.add(xhr);\r\n    if (target) {\r\n      let xhrSet = _XHRLoader.xhrMap.get(target);\r\n      if (!xhrSet) {\r\n        xhrSet = /* @__PURE__ */ new Set([xhr]);\r\n        _XHRLoader.xhrMap.set(target, xhrSet);\r\n      } else {\r\n        xhrSet.add(xhr);\r\n      }\r\n      if (!target.listeners(\"destroy\").includes(_XHRLoader.cancelXHRs)) {\r\n        target.once(\"destroy\", _XHRLoader.cancelXHRs);\r\n      }\r\n    }\r\n    xhr.open(\"GET\", url2);\r\n    xhr.responseType = type;\r\n    xhr.onload = () => {\r\n      if ((xhr.status === 200 || xhr.status === 0) && xhr.response) {\r\n        onload(xhr.response);\r\n      } else {\r\n        xhr.onerror();\r\n      }\r\n    };\r\n    xhr.onerror = () => {\r\n      logger.warn(TAG$1, `Failed to load resource as ${xhr.responseType} (Status ${xhr.status}): ${url2}`);\r\n      onerror(new NetworkError(\"Network error.\", url2, xhr.status));\r\n    };\r\n    xhr.onabort = () => onerror(new NetworkError(\"Aborted.\", url2, xhr.status, true));\r\n    xhr.onloadend = () => {\r\n      var _a;\r\n      _XHRLoader.allXhrSet.delete(xhr);\r\n      if (target) {\r\n        (_a = _XHRLoader.xhrMap.get(target)) == null ? void 0 : _a.delete(xhr);\r\n      }\r\n    };\r\n    return xhr;\r\n  }\r\n  static cancelXHRs() {\r\n    var _a;\r\n    (_a = _XHRLoader.xhrMap.get(this)) == null ? void 0 : _a.forEach((xhr) => {\r\n      xhr.abort();\r\n      _XHRLoader.allXhrSet.delete(xhr);\r\n    });\r\n    _XHRLoader.xhrMap.delete(this);\r\n  }\r\n  static release() {\r\n    _XHRLoader.allXhrSet.forEach((xhr) => xhr.abort());\r\n    _XHRLoader.allXhrSet.clear();\r\n    _XHRLoader.xhrMap = /* @__PURE__ */ new WeakMap();\r\n  }\r\n};\r\nlet XHRLoader = _XHRLoader;\r\nXHRLoader.xhrMap = /* @__PURE__ */ new WeakMap();\r\nXHRLoader.allXhrSet = /* @__PURE__ */ new Set();\r\nXHRLoader.loader = (context, next) => {\r\n  return new Promise((resolve, reject) => {\r\n    const xhr = _XHRLoader.createXHR(context.target, context.settings ? context.settings.resolveURL(context.url) : context.url, context.type, (data) => {\r\n      context.result = data;\r\n      resolve();\r\n    }, reject);\r\n    xhr.send();\r\n  });\r\n};\r\nfunction runMiddlewares(middleware, context) {\r\n  let index = -1;\r\n  return dispatch(0);\r\n  function dispatch(i, err) {\r\n    if (err)\r\n      return Promise.reject(err);\r\n    if (i <= index)\r\n      return Promise.reject(new Error(\"next() called multiple times\"));\r\n    index = i;\r\n    const fn = middleware[i];\r\n    if (!fn)\r\n      return Promise.resolve();\r\n    try {\r\n      return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\r\n    } catch (err2) {\r\n      return Promise.reject(err2);\r\n    }\r\n  }\r\n}\r\nclass Live2DLoader {\r\n  static load(context) {\r\n    return runMiddlewares(this.middlewares, context).then(() => context.result);\r\n  }\r\n}\r\nLive2DLoader.middlewares = [XHRLoader.loader];\r\nfunction createTexture(url2, options = {}) {\r\n  var _a;\r\n  const textureOptions = { resourceOptions: { crossorigin: options.crossOrigin } };\r\n  if (Texture.fromURL) {\r\n    return Texture.fromURL(url2, textureOptions).catch((e) => {\r\n      if (e instanceof Error) {\r\n        throw e;\r\n      }\r\n      const err = new Error(\"Texture loading error\");\r\n      err.event = e;\r\n      throw err;\r\n    });\r\n  }\r\n  textureOptions.resourceOptions.autoLoad = false;\r\n  const texture = Texture.from(url2, textureOptions);\r\n  if (texture.baseTexture.valid) {\r\n    return Promise.resolve(texture);\r\n  }\r\n  const resource = texture.baseTexture.resource;\r\n  (_a = resource._live2d_load) != null ? _a : resource._live2d_load = new Promise((resolve, reject) => {\r\n    const errorHandler = (event) => {\r\n      resource.source.removeEventListener(\"error\", errorHandler);\r\n      const err = new Error(\"Texture loading error\");\r\n      err.event = event;\r\n      reject(err);\r\n    };\r\n    resource.source.addEventListener(\"error\", errorHandler);\r\n    resource.load().then(() => resolve(texture)).catch(errorHandler);\r\n  });\r\n  return resource._live2d_load;\r\n}\r\nconst TAG = \"Live2DFactory\";\r\nconst urlToJSON = (context, next) => __async(void 0, null, function* () {\r\n  if (typeof context.source === \"string\") {\r\n    const data = yield Live2DLoader.load({\r\n      url: context.source,\r\n      type: \"json\",\r\n      target: context.live2dModel\r\n    });\r\n    data.url = context.source;\r\n    context.source = data;\r\n    context.live2dModel.emit(\"settingsJSONLoaded\", data);\r\n  }\r\n  return next();\r\n});\r\nconst jsonToSettings = (context, next) => __async(void 0, null, function* () {\r\n  if (context.source instanceof ModelSettings) {\r\n    context.settings = context.source;\r\n    return next();\r\n  } else if (typeof context.source === \"object\") {\r\n    const runtime = Live2DFactory.findRuntime(context.source);\r\n    if (runtime) {\r\n      const settings = runtime.createModelSettings(context.source);\r\n      context.settings = settings;\r\n      context.live2dModel.emit(\"settingsLoaded\", settings);\r\n      return next();\r\n    }\r\n  }\r\n  throw new TypeError(\"Unknown settings format.\");\r\n});\r\nconst waitUntilReady = (context, next) => {\r\n  if (context.settings) {\r\n    const runtime = Live2DFactory.findRuntime(context.settings);\r\n    if (runtime) {\r\n      return runtime.ready().then(next);\r\n    }\r\n  }\r\n  return next();\r\n};\r\nconst setupOptionals = (context, next) => __async(void 0, null, function* () {\r\n  yield next();\r\n  const internalModel = context.internalModel;\r\n  if (internalModel) {\r\n    const settings = context.settings;\r\n    const runtime = Live2DFactory.findRuntime(settings);\r\n    if (runtime) {\r\n      const tasks = [];\r\n      if (settings.pose) {\r\n        tasks.push(Live2DLoader.load({\r\n          settings,\r\n          url: settings.pose,\r\n          type: \"json\",\r\n          target: internalModel\r\n        }).then((data) => {\r\n          internalModel.pose = runtime.createPose(internalModel.coreModel, data);\r\n          context.live2dModel.emit(\"poseLoaded\", internalModel.pose);\r\n        }).catch((e) => {\r\n          context.live2dModel.emit(\"poseLoadError\", e);\r\n          logger.warn(TAG, \"Failed to load pose.\", e);\r\n        }));\r\n      }\r\n      if (settings.physics) {\r\n        tasks.push(Live2DLoader.load({\r\n          settings,\r\n          url: settings.physics,\r\n          type: \"json\",\r\n          target: internalModel\r\n        }).then((data) => {\r\n          internalModel.physics = runtime.createPhysics(internalModel.coreModel, data);\r\n          context.live2dModel.emit(\"physicsLoaded\", internalModel.physics);\r\n        }).catch((e) => {\r\n          context.live2dModel.emit(\"physicsLoadError\", e);\r\n          logger.warn(TAG, \"Failed to load physics.\", e);\r\n        }));\r\n      }\r\n      if (tasks.length) {\r\n        yield Promise.all(tasks);\r\n      }\r\n    }\r\n  }\r\n});\r\nconst setupEssentials = (context, next) => __async(void 0, null, function* () {\r\n  if (context.settings) {\r\n    const live2DModel = context.live2dModel;\r\n    const textureLoadings = context.settings.textures.map((tex) => {\r\n      const url2 = context.settings.resolveURL(tex);\r\n      return createTexture(url2, { crossOrigin: context.options.crossOrigin });\r\n    });\r\n    yield next();\r\n    if (context.internalModel) {\r\n      live2DModel.internalModel = context.internalModel;\r\n      live2DModel.emit(\"modelLoaded\", context.internalModel);\r\n    } else {\r\n      throw new TypeError(\"Missing internal model.\");\r\n    }\r\n    live2DModel.textures = yield Promise.all(textureLoadings);\r\n    live2DModel.emit(\"textureLoaded\", live2DModel.textures);\r\n  } else {\r\n    throw new TypeError(\"Missing settings.\");\r\n  }\r\n});\r\nconst createInternalModel = (context, next) => __async(void 0, null, function* () {\r\n  const settings = context.settings;\r\n  if (settings instanceof ModelSettings) {\r\n    const runtime = Live2DFactory.findRuntime(settings);\r\n    if (!runtime) {\r\n      throw new TypeError(\"Unknown model settings.\");\r\n    }\r\n    const modelData = yield Live2DLoader.load({\r\n      settings,\r\n      url: settings.moc,\r\n      type: \"arraybuffer\",\r\n      target: context.live2dModel\r\n    });\r\n    if (!runtime.isValidMoc(modelData)) {\r\n      throw new Error(\"Invalid moc data\");\r\n    }\r\n    const coreModel = runtime.createCoreModel(modelData);\r\n    context.internalModel = runtime.createInternalModel(coreModel, settings, context.options);\r\n    return next();\r\n  }\r\n  throw new TypeError(\"Missing settings.\");\r\n});\r\nconst _Live2DFactory = class {\r\n  static registerRuntime(runtime) {\r\n    _Live2DFactory.runtimes.push(runtime);\r\n    _Live2DFactory.runtimes.sort((a, b) => b.version - a.version);\r\n  }\r\n  static findRuntime(source) {\r\n    for (const runtime of _Live2DFactory.runtimes) {\r\n      if (runtime.test(source)) {\r\n        return runtime;\r\n      }\r\n    }\r\n  }\r\n  static setupLive2DModel(live2dModel, source, options) {\r\n    return __async(this, null, function* () {\r\n      const textureLoaded = new Promise((resolve) => live2dModel.once(\"textureLoaded\", resolve));\r\n      const modelLoaded = new Promise((resolve) => live2dModel.once(\"modelLoaded\", resolve));\r\n      const readyEventEmitted = Promise.all([textureLoaded, modelLoaded]).then(() => live2dModel.emit(\"ready\"));\r\n      yield runMiddlewares(_Live2DFactory.live2DModelMiddlewares, {\r\n        live2dModel,\r\n        source,\r\n        options: options || {}\r\n      });\r\n      yield readyEventEmitted;\r\n      live2dModel.emit(\"load\");\r\n    });\r\n  }\r\n  static loadMotion(motionManager, group, index) {\r\n    var _a, _b;\r\n    const handleError = (e) => motionManager.emit(\"motionLoadError\", group, index, e);\r\n    try {\r\n      const definition = (_a = motionManager.definitions[group]) == null ? void 0 : _a[index];\r\n      if (!definition) {\r\n        return Promise.resolve(void 0);\r\n      }\r\n      if (!motionManager.listeners(\"destroy\").includes(_Live2DFactory.releaseTasks)) {\r\n        motionManager.once(\"destroy\", _Live2DFactory.releaseTasks);\r\n      }\r\n      let tasks = _Live2DFactory.motionTasksMap.get(motionManager);\r\n      if (!tasks) {\r\n        tasks = {};\r\n        _Live2DFactory.motionTasksMap.set(motionManager, tasks);\r\n      }\r\n      let taskGroup = tasks[group];\r\n      if (!taskGroup) {\r\n        taskGroup = [];\r\n        tasks[group] = taskGroup;\r\n      }\r\n      const path = motionManager.getMotionFile(definition);\r\n      (_b = taskGroup[index]) != null ? _b : taskGroup[index] = Live2DLoader.load({\r\n        url: path,\r\n        settings: motionManager.settings,\r\n        type: motionManager.motionDataType,\r\n        target: motionManager\r\n      }).then((data) => {\r\n        var _a2;\r\n        const taskGroup2 = (_a2 = _Live2DFactory.motionTasksMap.get(motionManager)) == null ? void 0 : _a2[group];\r\n        if (taskGroup2) {\r\n          delete taskGroup2[index];\r\n        }\r\n        const motion = motionManager.createMotion(data, group, definition);\r\n        motionManager.emit(\"motionLoaded\", group, index, motion);\r\n        return motion;\r\n      }).catch((e) => {\r\n        logger.warn(motionManager.tag, `Failed to load motion: ${path}\r\n`, e);\r\n        handleError(e);\r\n      });\r\n      return taskGroup[index];\r\n    } catch (e) {\r\n      logger.warn(motionManager.tag, `Failed to load motion at \"${group}\"[${index}]\r\n`, e);\r\n      handleError(e);\r\n    }\r\n    return Promise.resolve(void 0);\r\n  }\r\n  static loadExpression(expressionManager, index) {\r\n    var _a;\r\n    const handleError = (e) => expressionManager.emit(\"expressionLoadError\", index, e);\r\n    try {\r\n      const definition = expressionManager.definitions[index];\r\n      if (!definition) {\r\n        return Promise.resolve(void 0);\r\n      }\r\n      if (!expressionManager.listeners(\"destroy\").includes(_Live2DFactory.releaseTasks)) {\r\n        expressionManager.once(\"destroy\", _Live2DFactory.releaseTasks);\r\n      }\r\n      let tasks = _Live2DFactory.expressionTasksMap.get(expressionManager);\r\n      if (!tasks) {\r\n        tasks = [];\r\n        _Live2DFactory.expressionTasksMap.set(expressionManager, tasks);\r\n      }\r\n      const path = expressionManager.getExpressionFile(definition);\r\n      (_a = tasks[index]) != null ? _a : tasks[index] = Live2DLoader.load({\r\n        url: path,\r\n        settings: expressionManager.settings,\r\n        type: \"json\",\r\n        target: expressionManager\r\n      }).then((data) => {\r\n        const tasks2 = _Live2DFactory.expressionTasksMap.get(expressionManager);\r\n        if (tasks2) {\r\n          delete tasks2[index];\r\n        }\r\n        const expression = expressionManager.createExpression(data, definition);\r\n        expressionManager.emit(\"expressionLoaded\", index, expression);\r\n        return expression;\r\n      }).catch((e) => {\r\n        logger.warn(expressionManager.tag, `Failed to load expression: ${path}\r\n`, e);\r\n        handleError(e);\r\n      });\r\n      return tasks[index];\r\n    } catch (e) {\r\n      logger.warn(expressionManager.tag, `Failed to load expression at [${index}]\r\n`, e);\r\n      handleError(e);\r\n    }\r\n    return Promise.resolve(void 0);\r\n  }\r\n  static releaseTasks() {\r\n    if (this instanceof MotionManager) {\r\n      _Live2DFactory.motionTasksMap.delete(this);\r\n    } else {\r\n      _Live2DFactory.expressionTasksMap.delete(this);\r\n    }\r\n  }\r\n};\r\nlet Live2DFactory = _Live2DFactory;\r\nLive2DFactory.runtimes = [];\r\nLive2DFactory.urlToJSON = urlToJSON;\r\nLive2DFactory.jsonToSettings = jsonToSettings;\r\nLive2DFactory.waitUntilReady = waitUntilReady;\r\nLive2DFactory.setupOptionals = setupOptionals;\r\nLive2DFactory.setupEssentials = setupEssentials;\r\nLive2DFactory.createInternalModel = createInternalModel;\r\nLive2DFactory.live2DModelMiddlewares = [\r\n  urlToJSON,\r\n  jsonToSettings,\r\n  waitUntilReady,\r\n  setupOptionals,\r\n  setupEssentials,\r\n  createInternalModel\r\n];\r\nLive2DFactory.motionTasksMap = /* @__PURE__ */ new WeakMap();\r\nLive2DFactory.expressionTasksMap = /* @__PURE__ */ new WeakMap();\r\nMotionManager.prototype[\"_loadMotion\"] = function(group, index) {\r\n  return Live2DFactory.loadMotion(this, group, index);\r\n};\r\nExpressionManager.prototype[\"_loadExpression\"] = function(index) {\r\n  return Live2DFactory.loadExpression(this, index);\r\n};\r\nclass InteractionMixin {\r\n  constructor() {\r\n    this._autoInteract = false;\r\n  }\r\n  get autoInteract() {\r\n    return this._autoInteract;\r\n  }\r\n  set autoInteract(autoInteract) {\r\n    if (autoInteract !== this._autoInteract) {\r\n      if (autoInteract) {\r\n        this.on(\"pointertap\", onTap, this);\r\n      } else {\r\n        this.off(\"pointertap\", onTap, this);\r\n      }\r\n      this._autoInteract = autoInteract;\r\n    }\r\n  }\r\n  registerInteraction(manager) {\r\n    if (manager !== this.interactionManager) {\r\n      this.unregisterInteraction();\r\n      if (this._autoInteract && manager) {\r\n        this.interactionManager = manager;\r\n        manager.on(\"pointermove\", onPointerMove, this);\r\n      }\r\n    }\r\n  }\r\n  unregisterInteraction() {\r\n    var _a;\r\n    if (this.interactionManager) {\r\n      (_a = this.interactionManager) == null ? void 0 : _a.off(\"pointermove\", onPointerMove, this);\r\n      this.interactionManager = void 0;\r\n    }\r\n  }\r\n}\r\nfunction onTap(event) {\r\n  this.tap(event.data.global.x, event.data.global.y);\r\n}\r\nfunction onPointerMove(event) {\r\n  this.focus(event.data.global.x, event.data.global.y);\r\n}\r\nclass Live2DTransform extends Transform {\r\n}\r\nconst tempPoint = new Point();\r\nconst tempMatrix$1 = new Matrix();\r\nlet tickerRef;\r\nclass Live2DModel extends Container {\r\n  constructor(options) {\r\n    super();\r\n    this.tag = \"Live2DModel(uninitialized)\";\r\n    this.textures = [];\r\n    this.transform = new Live2DTransform();\r\n    this.anchor = new ObservablePoint(this.onAnchorChange, this, 0, 0);\r\n    this.glContextID = -1;\r\n    this.elapsedTime = performance.now();\r\n    this.deltaTime = 0;\r\n    this._autoUpdate = false;\r\n    this.once(\"modelLoaded\", () => this.init(options));\r\n  }\r\n  static from(source, options) {\r\n    const model = new this(options);\r\n    return Live2DFactory.setupLive2DModel(model, source, options).then(() => model);\r\n  }\r\n  static fromSync(source, options) {\r\n    const model = new this(options);\r\n    Live2DFactory.setupLive2DModel(model, source, options).then(options == null ? void 0 : options.onLoad).catch(options == null ? void 0 : options.onError);\r\n    return model;\r\n  }\r\n  static registerTicker(tickerClass) {\r\n    tickerRef = tickerClass;\r\n  }\r\n  get autoUpdate() {\r\n    return this._autoUpdate;\r\n  }\r\n  set autoUpdate(autoUpdate) {\r\n    var _a;\r\n    tickerRef || (tickerRef = (_a = window.PIXI) == null ? void 0 : _a.Ticker);\r\n    if (autoUpdate) {\r\n      if (!this._destroyed) {\r\n        if (tickerRef) {\r\n          tickerRef.shared.add(this.onTickerUpdate, this);\r\n          this._autoUpdate = true;\r\n        } else {\r\n          logger.warn(this.tag, \"No Ticker registered, please call Live2DModel.registerTicker(Ticker).\");\r\n        }\r\n      }\r\n    } else {\r\n      tickerRef == null ? void 0 : tickerRef.shared.remove(this.onTickerUpdate, this);\r\n      this._autoUpdate = false;\r\n    }\r\n  }\r\n  init(options) {\r\n    this.tag = `Live2DModel(${this.internalModel.settings.name})`;\r\n    const _options = Object.assign({\r\n      autoUpdate: true,\r\n      autoInteract: true\r\n    }, options);\r\n    if (_options.autoInteract) {\r\n      this.interactive = true;\r\n    }\r\n    this.autoInteract = _options.autoInteract;\r\n    this.autoUpdate = _options.autoUpdate;\r\n  }\r\n  onAnchorChange() {\r\n    this.pivot.set(this.anchor.x * this.internalModel.width, this.anchor.y * this.internalModel.height);\r\n  }\r\n  motion(group, index, priority) {\r\n    return index === void 0 ? this.internalModel.motionManager.startRandomMotion(group, priority) : this.internalModel.motionManager.startMotion(group, index, priority);\r\n  }\r\n  expression(id) {\r\n    if (this.internalModel.motionManager.expressionManager) {\r\n      return id === void 0 ? this.internalModel.motionManager.expressionManager.setRandomExpression() : this.internalModel.motionManager.expressionManager.setExpression(id);\r\n    }\r\n    return Promise.resolve(false);\r\n  }\r\n  focus(x, y, instant = false) {\r\n    tempPoint.x = x;\r\n    tempPoint.y = y;\r\n    this.toModelPosition(tempPoint, tempPoint, true);\r\n    let tx = tempPoint.x / this.internalModel.originalWidth * 2 - 1;\r\n    let ty = tempPoint.y / this.internalModel.originalHeight * 2 - 1;\r\n    let radian = Math.atan2(ty, tx);\r\n    this.internalModel.focusController.focus(Math.cos(radian), -Math.sin(radian), instant);\r\n  }\r\n  tap(x, y) {\r\n    const hitAreaNames = this.hitTest(x, y);\r\n    if (hitAreaNames.length) {\r\n      logger.log(this.tag, `Hit`, hitAreaNames);\r\n      this.emit(\"hit\", hitAreaNames);\r\n    }\r\n  }\r\n  hitTest(x, y) {\r\n    tempPoint.x = x;\r\n    tempPoint.y = y;\r\n    this.toModelPosition(tempPoint, tempPoint);\r\n    return this.internalModel.hitTest(tempPoint.x, tempPoint.y);\r\n  }\r\n  toModelPosition(position, result = position.clone(), skipUpdate) {\r\n    if (!skipUpdate) {\r\n      this._recursivePostUpdateTransform();\r\n      if (!this.parent) {\r\n        this.parent = this._tempDisplayObjectParent;\r\n        this.displayObjectUpdateTransform();\r\n        this.parent = null;\r\n      } else {\r\n        this.displayObjectUpdateTransform();\r\n      }\r\n    }\r\n    this.transform.worldTransform.applyInverse(position, result);\r\n    this.internalModel.localTransform.applyInverse(result, result);\r\n    return result;\r\n  }\r\n  containsPoint(point) {\r\n    return this.getBounds(true).contains(point.x, point.y);\r\n  }\r\n  _calculateBounds() {\r\n    this._bounds.addFrame(this.transform, 0, 0, this.internalModel.width, this.internalModel.height);\r\n  }\r\n  onTickerUpdate() {\r\n    this.update(tickerRef.shared.deltaMS);\r\n  }\r\n  update(dt) {\r\n    this.deltaTime += dt;\r\n    this.elapsedTime += dt;\r\n  }\r\n  _render(renderer) {\r\n    this.registerInteraction(renderer.plugins.interaction);\r\n    renderer.batch.reset();\r\n    renderer.geometry.reset();\r\n    renderer.shader.reset();\r\n    renderer.state.reset();\r\n    let shouldUpdateTexture = false;\r\n    if (this.glContextID !== renderer.CONTEXT_UID) {\r\n      this.glContextID = renderer.CONTEXT_UID;\r\n      this.internalModel.updateWebGLContext(renderer.gl, this.glContextID);\r\n      shouldUpdateTexture = true;\r\n    }\r\n    for (let i = 0; i < this.textures.length; i++) {\r\n      const texture = this.textures[i];\r\n      if (!texture.valid) {\r\n        continue;\r\n      }\r\n      if (shouldUpdateTexture || !texture.baseTexture._glTextures[this.glContextID]) {\r\n        renderer.gl.pixelStorei(WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL, this.internalModel.textureFlipY);\r\n        renderer.texture.bind(texture.baseTexture, 0);\r\n      }\r\n      this.internalModel.bindTexture(i, texture.baseTexture._glTextures[this.glContextID].texture);\r\n      texture.baseTexture.touched = renderer.textureGC.count;\r\n    }\r\n    const viewport = renderer.framebuffer.viewport;\r\n    this.internalModel.viewport = [viewport.x, viewport.y, viewport.width, viewport.height];\r\n    if (this.deltaTime) {\r\n      this.internalModel.update(this.deltaTime, this.elapsedTime);\r\n      this.deltaTime = 0;\r\n    }\r\n    const internalTransform = tempMatrix$1.copyFrom(renderer.globalUniforms.uniforms.projectionMatrix).append(this.worldTransform);\r\n    this.internalModel.updateTransform(internalTransform);\r\n    this.internalModel.draw(renderer.gl);\r\n    renderer.state.reset();\r\n    renderer.texture.reset();\r\n  }\r\n  destroy(options) {\r\n    this.emit(\"destroy\");\r\n    this.autoUpdate = false;\r\n    this.unregisterInteraction();\r\n    if (options == null ? void 0 : options.texture) {\r\n      this.textures.forEach((texture) => texture.destroy(options.baseTexture));\r\n    }\r\n    this.internalModel.destroy();\r\n    super.destroy(options);\r\n  }\r\n}\r\napplyMixins(Live2DModel, [InteractionMixin]);\r\nconst _FileLoader = class {\r\n  static resolveURL(settingsURL, filePath) {\r\n    var _a;\r\n    const resolved = (_a = _FileLoader.filesMap[settingsURL]) == null ? void 0 : _a[filePath];\r\n    if (resolved === void 0) {\r\n      throw new Error(\"Cannot find this file from uploaded files: \" + filePath);\r\n    }\r\n    return resolved;\r\n  }\r\n  static upload(files, settings) {\r\n    return __async(this, null, function* () {\r\n      const fileMap = {};\r\n      for (const definedFile of settings.getDefinedFiles()) {\r\n        const actualPath = decodeURI(url.resolve(settings.url, definedFile));\r\n        const actualFile = files.find((file) => file.webkitRelativePath === actualPath);\r\n        if (actualFile) {\r\n          fileMap[definedFile] = URL.createObjectURL(actualFile);\r\n        }\r\n      }\r\n      _FileLoader.filesMap[settings._objectURL] = fileMap;\r\n    });\r\n  }\r\n  static createSettings(files) {\r\n    return __async(this, null, function* () {\r\n      const settingsFile = files.find((file) => file.name.endsWith(\"model.json\") || file.name.endsWith(\"model3.json\"));\r\n      if (!settingsFile) {\r\n        throw new TypeError(\"Settings file not found\");\r\n      }\r\n      const settingsText = yield _FileLoader.readText(settingsFile);\r\n      const settingsJSON = JSON.parse(settingsText);\r\n      settingsJSON.url = settingsFile.webkitRelativePath;\r\n      const runtime = Live2DFactory.findRuntime(settingsJSON);\r\n      if (!runtime) {\r\n        throw new Error(\"Unknown settings JSON\");\r\n      }\r\n      const settings = runtime.createModelSettings(settingsJSON);\r\n      settings._objectURL = URL.createObjectURL(settingsFile);\r\n      return settings;\r\n    });\r\n  }\r\n  static readText(file) {\r\n    return __async(this, null, function* () {\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = reject;\r\n        reader.readAsText(file, \"utf8\");\r\n      });\r\n    });\r\n  }\r\n};\r\nlet FileLoader = _FileLoader;\r\nFileLoader.filesMap = {};\r\nFileLoader.factory = (context, next) => __async(void 0, null, function* () {\r\n  if (Array.isArray(context.source) && context.source[0] instanceof File) {\r\n    const files = context.source;\r\n    let settings = files.settings;\r\n    if (!settings) {\r\n      settings = yield _FileLoader.createSettings(files);\r\n    } else if (!settings._objectURL) {\r\n      throw new Error('\"_objectURL\" must be specified in ModelSettings');\r\n    }\r\n    settings.validateFiles(files.map((file) => encodeURI(file.webkitRelativePath)));\r\n    yield _FileLoader.upload(files, settings);\r\n    settings.resolveURL = function(url2) {\r\n      return _FileLoader.resolveURL(this._objectURL, url2);\r\n    };\r\n    context.source = settings;\r\n    context.live2dModel.once(\"modelLoaded\", (internalModel) => {\r\n      internalModel.once(\"destroy\", function() {\r\n        const objectURL = this.settings._objectURL;\r\n        URL.revokeObjectURL(objectURL);\r\n        if (_FileLoader.filesMap[objectURL]) {\r\n          for (const resourceObjectURL of Object.values(_FileLoader.filesMap[objectURL])) {\r\n            URL.revokeObjectURL(resourceObjectURL);\r\n          }\r\n        }\r\n        delete _FileLoader.filesMap[objectURL];\r\n      });\r\n    });\r\n  }\r\n  return next();\r\n});\r\nLive2DFactory.live2DModelMiddlewares.unshift(FileLoader.factory);\r\nconst _ZipLoader = class {\r\n  static unzip(reader, settings) {\r\n    return __async(this, null, function* () {\r\n      const filePaths = yield _ZipLoader.getFilePaths(reader);\r\n      const requiredFilePaths = [];\r\n      for (const definedFile of settings.getDefinedFiles()) {\r\n        const actualPath = decodeURI(url.resolve(settings.url, definedFile));\r\n        if (filePaths.includes(actualPath)) {\r\n          requiredFilePaths.push(actualPath);\r\n        }\r\n      }\r\n      const files = yield _ZipLoader.getFiles(reader, requiredFilePaths);\r\n      for (let i = 0; i < files.length; i++) {\r\n        const path = requiredFilePaths[i];\r\n        const file = files[i];\r\n        Object.defineProperty(file, \"webkitRelativePath\", {\r\n          value: path\r\n        });\r\n      }\r\n      return files;\r\n    });\r\n  }\r\n  static createSettings(reader) {\r\n    return __async(this, null, function* () {\r\n      const filePaths = yield _ZipLoader.getFilePaths(reader);\r\n      const settingsFilePath = filePaths.find((path) => path.endsWith(\"model.json\") || path.endsWith(\"model3.json\"));\r\n      if (!settingsFilePath) {\r\n        throw new Error(\"Settings file not found\");\r\n      }\r\n      const settingsText = yield _ZipLoader.readText(reader, settingsFilePath);\r\n      if (!settingsText) {\r\n        throw new Error(\"Empty settings file: \" + settingsFilePath);\r\n      }\r\n      const settingsJSON = JSON.parse(settingsText);\r\n      settingsJSON.url = settingsFilePath;\r\n      const runtime = Live2DFactory.findRuntime(settingsJSON);\r\n      if (!runtime) {\r\n        throw new Error(\"Unknown settings JSON\");\r\n      }\r\n      return runtime.createModelSettings(settingsJSON);\r\n    });\r\n  }\r\n  static zipReader(data, url2) {\r\n    return __async(this, null, function* () {\r\n      throw new Error(\"Not implemented\");\r\n    });\r\n  }\r\n  static getFilePaths(reader) {\r\n    return __async(this, null, function* () {\r\n      throw new Error(\"Not implemented\");\r\n    });\r\n  }\r\n  static getFiles(reader, paths) {\r\n    return __async(this, null, function* () {\r\n      throw new Error(\"Not implemented\");\r\n    });\r\n  }\r\n  static readText(reader, path) {\r\n    return __async(this, null, function* () {\r\n      throw new Error(\"Not implemented\");\r\n    });\r\n  }\r\n  static releaseReader(reader) {\r\n  }\r\n};\r\nlet ZipLoader = _ZipLoader;\r\nZipLoader.ZIP_PROTOCOL = \"zip://\";\r\nZipLoader.uid = 0;\r\nZipLoader.factory = (context, next) => __async(void 0, null, function* () {\r\n  const source = context.source;\r\n  let sourceURL;\r\n  let zipBlob;\r\n  let settings;\r\n  if (typeof source === \"string\" && (source.endsWith(\".zip\") || source.startsWith(_ZipLoader.ZIP_PROTOCOL))) {\r\n    if (source.startsWith(_ZipLoader.ZIP_PROTOCOL)) {\r\n      sourceURL = source.slice(_ZipLoader.ZIP_PROTOCOL.length);\r\n    } else {\r\n      sourceURL = source;\r\n    }\r\n    zipBlob = yield Live2DLoader.load({\r\n      url: sourceURL,\r\n      type: \"blob\",\r\n      target: context.live2dModel\r\n    });\r\n  } else if (Array.isArray(source) && source.length === 1 && source[0] instanceof File && source[0].name.endsWith(\".zip\")) {\r\n    zipBlob = source[0];\r\n    sourceURL = URL.createObjectURL(zipBlob);\r\n    settings = source.settings;\r\n  }\r\n  if (zipBlob) {\r\n    if (!zipBlob.size) {\r\n      throw new Error(\"Empty zip file\");\r\n    }\r\n    const reader = yield _ZipLoader.zipReader(zipBlob, sourceURL);\r\n    if (!settings) {\r\n      settings = yield _ZipLoader.createSettings(reader);\r\n    }\r\n    settings._objectURL = _ZipLoader.ZIP_PROTOCOL + _ZipLoader.uid + \"/\" + settings.url;\r\n    const files = yield _ZipLoader.unzip(reader, settings);\r\n    files.settings = settings;\r\n    context.source = files;\r\n    if (sourceURL.startsWith(\"blob:\")) {\r\n      context.live2dModel.once(\"modelLoaded\", (internalModel) => {\r\n        internalModel.once(\"destroy\", function() {\r\n          URL.revokeObjectURL(sourceURL);\r\n        });\r\n      });\r\n    }\r\n    _ZipLoader.releaseReader(reader);\r\n  }\r\n  return next();\r\n});\r\nLive2DFactory.live2DModelMiddlewares.unshift(ZipLoader.factory);\r\nif (!window.Live2D) {\r\n  throw new Error(\"Could not find Cubism 2 runtime. This plugin requires live2d.min.js to be loaded.\");\r\n}\r\nconst originalUpdateParam = Live2DMotion.prototype.updateParam;\r\nLive2DMotion.prototype.updateParam = function(model, entry) {\r\n  originalUpdateParam.call(this, model, entry);\r\n  if (entry.isFinished() && this.onFinishHandler) {\r\n    this.onFinishHandler(this);\r\n    delete this.onFinishHandler;\r\n  }\r\n};\r\nclass Live2DExpression extends AMotion {\r\n  constructor(json) {\r\n    super();\r\n    this.params = [];\r\n    this.setFadeIn(json.fade_in > 0 ? json.fade_in : config.expressionFadingDuration);\r\n    this.setFadeOut(json.fade_out > 0 ? json.fade_out : config.expressionFadingDuration);\r\n    if (Array.isArray(json.params)) {\r\n      json.params.forEach((param) => {\r\n        const calc = param.calc || \"add\";\r\n        if (calc === \"add\") {\r\n          const defaultValue = param.def || 0;\r\n          param.val -= defaultValue;\r\n        } else if (calc === \"mult\") {\r\n          const defaultValue = param.def || 1;\r\n          param.val /= defaultValue;\r\n        }\r\n        this.params.push({\r\n          calc,\r\n          val: param.val,\r\n          id: param.id\r\n        });\r\n      });\r\n    }\r\n  }\r\n  updateParamExe(model, time, weight, motionQueueEnt) {\r\n    this.params.forEach((param) => {\r\n      model.setParamFloat(param.id, param.val * weight);\r\n    });\r\n  }\r\n}\r\nclass Cubism2ExpressionManager extends ExpressionManager {\r\n  constructor(settings, options) {\r\n    var _a;\r\n    super(settings, options);\r\n    this.queueManager = new MotionQueueManager();\r\n    this.definitions = (_a = this.settings.expressions) != null ? _a : [];\r\n    this.init();\r\n  }\r\n  isFinished() {\r\n    return this.queueManager.isFinished();\r\n  }\r\n  getExpressionIndex(name) {\r\n    return this.definitions.findIndex((def) => def.name === name);\r\n  }\r\n  getExpressionFile(definition) {\r\n    return definition.file;\r\n  }\r\n  createExpression(data, definition) {\r\n    return new Live2DExpression(data);\r\n  }\r\n  _setExpression(motion) {\r\n    return this.queueManager.startMotion(motion);\r\n  }\r\n  stopAllExpressions() {\r\n    this.queueManager.stopAllMotions();\r\n  }\r\n  updateParameters(model, dt) {\r\n    return this.queueManager.updateParam(model);\r\n  }\r\n}\r\nclass Cubism2MotionManager extends MotionManager {\r\n  constructor(settings, options) {\r\n    super(settings, options);\r\n    this.groups = { idle: \"idle\" };\r\n    this.motionDataType = \"arraybuffer\";\r\n    this.queueManager = new MotionQueueManager();\r\n    this.definitions = this.settings.motions;\r\n    this.init(options);\r\n  }\r\n  init(options) {\r\n    super.init(options);\r\n    if (this.settings.expressions) {\r\n      this.expressionManager = new Cubism2ExpressionManager(this.settings, options);\r\n    }\r\n  }\r\n  isFinished() {\r\n    return this.queueManager.isFinished();\r\n  }\r\n  createMotion(data, group, definition) {\r\n    const motion = Live2DMotion.loadMotion(data);\r\n    const defaultFadingDuration = group === this.groups.idle ? config.idleMotionFadingDuration : config.motionFadingDuration;\r\n    motion.setFadeIn(definition.fade_in > 0 ? definition.fade_in : defaultFadingDuration);\r\n    motion.setFadeOut(definition.fade_out > 0 ? definition.fade_out : defaultFadingDuration);\r\n    return motion;\r\n  }\r\n  getMotionFile(definition) {\r\n    return definition.file;\r\n  }\r\n  getMotionName(definition) {\r\n    return definition.file;\r\n  }\r\n  getSoundFile(definition) {\r\n    return definition.sound;\r\n  }\r\n  _startMotion(motion, onFinish) {\r\n    motion.onFinishHandler = onFinish;\r\n    this.queueManager.stopAllMotions();\r\n    return this.queueManager.startMotion(motion);\r\n  }\r\n  _stopAllMotions() {\r\n    this.queueManager.stopAllMotions();\r\n  }\r\n  updateParameters(model, now) {\r\n    return this.queueManager.updateParam(model);\r\n  }\r\n  destroy() {\r\n    super.destroy();\r\n    this.queueManager = void 0;\r\n  }\r\n}\r\nclass Live2DEyeBlink {\r\n  constructor(coreModel) {\r\n    this.coreModel = coreModel;\r\n    this.blinkInterval = 4e3;\r\n    this.closingDuration = 100;\r\n    this.closedDuration = 50;\r\n    this.openingDuration = 150;\r\n    this.eyeState = 0;\r\n    this.eyeParamValue = 1;\r\n    this.closedTimer = 0;\r\n    this.nextBlinkTimeLeft = this.blinkInterval;\r\n    this.leftParam = coreModel.getParamIndex(\"PARAM_EYE_L_OPEN\");\r\n    this.rightParam = coreModel.getParamIndex(\"PARAM_EYE_R_OPEN\");\r\n  }\r\n  setEyeParams(value) {\r\n    this.eyeParamValue = clamp(value, 0, 1);\r\n    this.coreModel.setParamFloat(this.leftParam, this.eyeParamValue);\r\n    this.coreModel.setParamFloat(this.rightParam, this.eyeParamValue);\r\n  }\r\n  update(dt) {\r\n    switch (this.eyeState) {\r\n      case 0:\r\n        this.nextBlinkTimeLeft -= dt;\r\n        if (this.nextBlinkTimeLeft < 0) {\r\n          this.eyeState = 1;\r\n          this.nextBlinkTimeLeft = this.blinkInterval + this.closingDuration + this.closedDuration + this.openingDuration + rand(0, 2e3);\r\n        }\r\n        break;\r\n      case 1:\r\n        this.setEyeParams(this.eyeParamValue + dt / this.closingDuration);\r\n        if (this.eyeParamValue <= 0) {\r\n          this.eyeState = 2;\r\n          this.closedTimer = 0;\r\n        }\r\n        break;\r\n      case 2:\r\n        this.closedTimer += dt;\r\n        if (this.closedTimer >= this.closedDuration) {\r\n          this.eyeState = 3;\r\n        }\r\n        break;\r\n      case 3:\r\n        this.setEyeParams(this.eyeParamValue + dt / this.openingDuration);\r\n        if (this.eyeParamValue >= 1) {\r\n          this.eyeState = 0;\r\n        }\r\n    }\r\n  }\r\n}\r\nconst tempMatrixArray = new Float32Array([\r\n  1,\r\n  0,\r\n  0,\r\n  0,\r\n  0,\r\n  1,\r\n  0,\r\n  0,\r\n  0,\r\n  0,\r\n  1,\r\n  0,\r\n  0,\r\n  0,\r\n  0,\r\n  1\r\n]);\r\nclass Cubism2InternalModel extends InternalModel {\r\n  constructor(coreModel, settings, options) {\r\n    super();\r\n    this.textureFlipY = true;\r\n    this.drawDataCount = 0;\r\n    this.disableCulling = false;\r\n    this.coreModel = coreModel;\r\n    this.settings = settings;\r\n    this.motionManager = new Cubism2MotionManager(settings, options);\r\n    this.eyeBlink = new Live2DEyeBlink(coreModel);\r\n    this.eyeballXParamIndex = coreModel.getParamIndex(\"PARAM_EYE_BALL_X\");\r\n    this.eyeballYParamIndex = coreModel.getParamIndex(\"PARAM_EYE_BALL_Y\");\r\n    this.angleXParamIndex = coreModel.getParamIndex(\"PARAM_ANGLE_X\");\r\n    this.angleYParamIndex = coreModel.getParamIndex(\"PARAM_ANGLE_Y\");\r\n    this.angleZParamIndex = coreModel.getParamIndex(\"PARAM_ANGLE_Z\");\r\n    this.bodyAngleXParamIndex = coreModel.getParamIndex(\"PARAM_BODY_ANGLE_X\");\r\n    this.breathParamIndex = coreModel.getParamIndex(\"PARAM_BREATH\");\r\n    this.init();\r\n  }\r\n  init() {\r\n    super.init();\r\n    if (this.settings.initParams) {\r\n      this.settings.initParams.forEach(({ id, value }) => this.coreModel.setParamFloat(id, value));\r\n    }\r\n    if (this.settings.initOpacities) {\r\n      this.settings.initOpacities.forEach(({ id, value }) => this.coreModel.setPartsOpacity(id, value));\r\n    }\r\n    this.coreModel.saveParam();\r\n    const arr = this.coreModel.getModelContext()._$aS;\r\n    if (arr == null ? void 0 : arr.length) {\r\n      this.drawDataCount = arr.length;\r\n    }\r\n    let culling = this.coreModel.drawParamWebGL.culling;\r\n    Object.defineProperty(this.coreModel.drawParamWebGL, \"culling\", {\r\n      set: (v) => culling = v,\r\n      get: () => this.disableCulling ? false : culling\r\n    });\r\n    const clipManager = this.coreModel.getModelContext().clipManager;\r\n    const originalSetupClip = clipManager.setupClip;\r\n    clipManager.setupClip = (modelContext, drawParam) => {\r\n      originalSetupClip.call(clipManager, modelContext, drawParam);\r\n      drawParam.gl.viewport(...this.viewport);\r\n    };\r\n  }\r\n  getSize() {\r\n    return [this.coreModel.getCanvasWidth(), this.coreModel.getCanvasHeight()];\r\n  }\r\n  getLayout() {\r\n    const layout = {};\r\n    if (this.settings.layout) {\r\n      for (const key of Object.keys(this.settings.layout)) {\r\n        let commonKey = key;\r\n        if (key === \"center_x\") {\r\n          commonKey = \"centerX\";\r\n        } else if (key === \"center_y\") {\r\n          commonKey = \"centerY\";\r\n        }\r\n        layout[commonKey] = this.settings.layout[key];\r\n      }\r\n    }\r\n    return layout;\r\n  }\r\n  updateWebGLContext(gl, glContextID) {\r\n    const drawParamWebGL = this.coreModel.drawParamWebGL;\r\n    drawParamWebGL.firstDraw = true;\r\n    drawParamWebGL.setGL(gl);\r\n    drawParamWebGL.glno = glContextID;\r\n    for (const prop in drawParamWebGL) {\r\n      if (drawParamWebGL.hasOwnProperty(prop) && drawParamWebGL[prop] instanceof WebGLBuffer) {\r\n        drawParamWebGL[prop] = null;\r\n      }\r\n    }\r\n    const clipManager = this.coreModel.getModelContext().clipManager;\r\n    clipManager.curFrameNo = glContextID;\r\n    const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\r\n    clipManager.getMaskRenderTexture();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n  }\r\n  bindTexture(index, texture) {\r\n    this.coreModel.setTexture(index, texture);\r\n  }\r\n  getHitAreaDefs() {\r\n    var _a;\r\n    return ((_a = this.settings.hitAreas) == null ? void 0 : _a.map((hitArea) => ({\r\n      id: hitArea.id,\r\n      name: hitArea.name,\r\n      index: this.coreModel.getDrawDataIndex(hitArea.id)\r\n    }))) || [];\r\n  }\r\n  getDrawableIDs() {\r\n    const modelContext = this.coreModel.getModelContext();\r\n    const ids = [];\r\n    for (let i = 0; i < this.drawDataCount; i++) {\r\n      const drawData = modelContext.getDrawData(i);\r\n      if (drawData) {\r\n        ids.push(drawData.getDrawDataID().id);\r\n      }\r\n    }\r\n    return ids;\r\n  }\r\n  getDrawableIndex(id) {\r\n    return this.coreModel.getDrawDataIndex(id);\r\n  }\r\n  getDrawableVertices(drawIndex) {\r\n    if (typeof drawIndex === \"string\") {\r\n      drawIndex = this.coreModel.getDrawDataIndex(drawIndex);\r\n      if (drawIndex === -1)\r\n        throw new TypeError(\"Unable to find drawable ID: \" + drawIndex);\r\n    }\r\n    return this.coreModel.getTransformedPoints(drawIndex).slice();\r\n  }\r\n  update(dt, now) {\r\n    var _a, _b, _c, _d;\r\n    super.update(dt, now);\r\n    const model = this.coreModel;\r\n    this.emit(\"beforeMotionUpdate\");\r\n    const motionUpdated = this.motionManager.update(this.coreModel, now);\r\n    this.emit(\"afterMotionUpdate\");\r\n    model.saveParam();\r\n    (_a = this.motionManager.expressionManager) == null ? void 0 : _a.update(model, now);\r\n    if (!motionUpdated) {\r\n      (_b = this.eyeBlink) == null ? void 0 : _b.update(dt);\r\n    }\r\n    this.updateFocus();\r\n    this.updateNaturalMovements(dt, now);\r\n    (_c = this.physics) == null ? void 0 : _c.update(now);\r\n    (_d = this.pose) == null ? void 0 : _d.update(dt);\r\n    this.emit(\"beforeModelUpdate\");\r\n    model.update();\r\n    model.loadParam();\r\n  }\r\n  updateFocus() {\r\n    this.coreModel.addToParamFloat(this.eyeballXParamIndex, this.focusController.x);\r\n    this.coreModel.addToParamFloat(this.eyeballYParamIndex, this.focusController.y);\r\n    this.coreModel.addToParamFloat(this.angleXParamIndex, this.focusController.x * 30);\r\n    this.coreModel.addToParamFloat(this.angleYParamIndex, this.focusController.y * 30);\r\n    this.coreModel.addToParamFloat(this.angleZParamIndex, this.focusController.x * this.focusController.y * -30);\r\n    this.coreModel.addToParamFloat(this.bodyAngleXParamIndex, this.focusController.x * 10);\r\n  }\r\n  updateNaturalMovements(dt, now) {\r\n    const t = now / 1e3 * 2 * Math.PI;\r\n    this.coreModel.addToParamFloat(this.angleXParamIndex, 15 * Math.sin(t / 6.5345) * 0.5);\r\n    this.coreModel.addToParamFloat(this.angleYParamIndex, 8 * Math.sin(t / 3.5345) * 0.5);\r\n    this.coreModel.addToParamFloat(this.angleZParamIndex, 10 * Math.sin(t / 5.5345) * 0.5);\r\n    this.coreModel.addToParamFloat(this.bodyAngleXParamIndex, 4 * Math.sin(t / 15.5345) * 0.5);\r\n    this.coreModel.setParamFloat(this.breathParamIndex, 0.5 + 0.5 * Math.sin(t / 3.2345));\r\n  }\r\n  draw(gl) {\r\n    const disableCulling = this.disableCulling;\r\n    if (gl.getParameter(gl.FRAMEBUFFER_BINDING)) {\r\n      this.disableCulling = true;\r\n    }\r\n    const matrix = this.drawingMatrix;\r\n    tempMatrixArray[0] = matrix.a;\r\n    tempMatrixArray[1] = matrix.b;\r\n    tempMatrixArray[4] = matrix.c;\r\n    tempMatrixArray[5] = matrix.d;\r\n    tempMatrixArray[12] = matrix.tx;\r\n    tempMatrixArray[13] = matrix.ty;\r\n    this.coreModel.setMatrix(tempMatrixArray);\r\n    this.coreModel.draw();\r\n    this.disableCulling = disableCulling;\r\n  }\r\n  destroy() {\r\n    super.destroy();\r\n    this.coreModel = void 0;\r\n  }\r\n}\r\nclass Cubism2ModelSettings extends ModelSettings {\r\n  constructor(json) {\r\n    super(json);\r\n    this.motions = {};\r\n    if (!Cubism2ModelSettings.isValidJSON(json)) {\r\n      throw new TypeError(\"Invalid JSON.\");\r\n    }\r\n    this.moc = json.model;\r\n    copyArray(\"string\", json, this, \"textures\", \"textures\");\r\n    this.copy(json);\r\n  }\r\n  static isValidJSON(json) {\r\n    var _a;\r\n    return !!json && typeof json.model === \"string\" && ((_a = json.textures) == null ? void 0 : _a.length) > 0 && json.textures.every((item) => typeof item === \"string\");\r\n  }\r\n  copy(json) {\r\n    copyProperty(\"string\", json, this, \"name\", \"name\");\r\n    copyProperty(\"string\", json, this, \"pose\", \"pose\");\r\n    copyProperty(\"string\", json, this, \"physics\", \"physics\");\r\n    copyProperty(\"object\", json, this, \"layout\", \"layout\");\r\n    copyProperty(\"object\", json, this, \"motions\", \"motions\");\r\n    copyArray(\"object\", json, this, \"hit_areas\", \"hitAreas\");\r\n    copyArray(\"object\", json, this, \"expressions\", \"expressions\");\r\n    copyArray(\"object\", json, this, \"init_params\", \"initParams\");\r\n    copyArray(\"object\", json, this, \"init_opacities\", \"initOpacities\");\r\n  }\r\n  replaceFiles(replace) {\r\n    super.replaceFiles(replace);\r\n    for (const [group, motions] of Object.entries(this.motions)) {\r\n      for (let i = 0; i < motions.length; i++) {\r\n        motions[i].file = replace(motions[i].file, `motions.${group}[${i}].file`);\r\n        if (motions[i].sound !== void 0) {\r\n          motions[i].sound = replace(motions[i].sound, `motions.${group}[${i}].sound`);\r\n        }\r\n      }\r\n    }\r\n    if (this.expressions) {\r\n      for (let i = 0; i < this.expressions.length; i++) {\r\n        this.expressions[i].file = replace(this.expressions[i].file, `expressions[${i}].file`);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst SRC_TYPE_MAP = {\r\n  x: PhysicsHair.Src.SRC_TO_X,\r\n  y: PhysicsHair.Src.SRC_TO_Y,\r\n  angle: PhysicsHair.Src.SRC_TO_G_ANGLE\r\n};\r\nconst TARGET_TYPE_MAP = {\r\n  x: PhysicsHair.Src.SRC_TO_X,\r\n  y: PhysicsHair.Src.SRC_TO_Y,\r\n  angle: PhysicsHair.Src.SRC_TO_G_ANGLE\r\n};\r\nclass Live2DPhysics {\r\n  constructor(coreModel, json) {\r\n    this.coreModel = coreModel;\r\n    this.physicsHairs = [];\r\n    if (json.physics_hair) {\r\n      this.physicsHairs = json.physics_hair.map((definition) => {\r\n        const physicsHair = new PhysicsHair();\r\n        physicsHair.setup(definition.setup.length, definition.setup.regist, definition.setup.mass);\r\n        definition.src.forEach(({ id, ptype, scale, weight }) => {\r\n          const type = SRC_TYPE_MAP[ptype];\r\n          if (type) {\r\n            physicsHair.addSrcParam(type, id, scale, weight);\r\n          }\r\n        });\r\n        definition.targets.forEach(({ id, ptype, scale, weight }) => {\r\n          const type = TARGET_TYPE_MAP[ptype];\r\n          if (type) {\r\n            physicsHair.addTargetParam(type, id, scale, weight);\r\n          }\r\n        });\r\n        return physicsHair;\r\n      });\r\n    }\r\n  }\r\n  update(elapsed) {\r\n    this.physicsHairs.forEach((physicsHair) => physicsHair.update(this.coreModel, elapsed));\r\n  }\r\n}\r\nclass Live2DPartsParam {\r\n  constructor(id) {\r\n    this.id = id;\r\n    this.paramIndex = -1;\r\n    this.partsIndex = -1;\r\n    this.link = [];\r\n  }\r\n  initIndex(model) {\r\n    this.paramIndex = model.getParamIndex(\"VISIBLE:\" + this.id);\r\n    this.partsIndex = model.getPartsDataIndex(PartsDataID.getID(this.id));\r\n    model.setParamFloat(this.paramIndex, 1);\r\n  }\r\n}\r\nclass Live2DPose {\r\n  constructor(coreModel, json) {\r\n    this.coreModel = coreModel;\r\n    this.opacityAnimDuration = 500;\r\n    this.partsGroups = [];\r\n    if (json.parts_visible) {\r\n      this.partsGroups = json.parts_visible.map(({ group }) => group.map(({ id, link }) => {\r\n        const parts = new Live2DPartsParam(id);\r\n        if (link) {\r\n          parts.link = link.map((l) => new Live2DPartsParam(l));\r\n        }\r\n        return parts;\r\n      }));\r\n      this.init();\r\n    }\r\n  }\r\n  init() {\r\n    this.partsGroups.forEach((group) => {\r\n      group.forEach((parts) => {\r\n        parts.initIndex(this.coreModel);\r\n        if (parts.paramIndex >= 0) {\r\n          const visible = this.coreModel.getParamFloat(parts.paramIndex) !== 0;\r\n          this.coreModel.setPartsOpacity(parts.partsIndex, visible ? 1 : 0);\r\n          this.coreModel.setParamFloat(parts.paramIndex, visible ? 1 : 0);\r\n          if (parts.link.length > 0) {\r\n            parts.link.forEach((p) => p.initIndex(this.coreModel));\r\n          }\r\n        }\r\n      });\r\n    });\r\n  }\r\n  normalizePartsOpacityGroup(partsGroup, dt) {\r\n    const model = this.coreModel;\r\n    const phi = 0.5;\r\n    const maxBackOpacity = 0.15;\r\n    let visibleOpacity = 1;\r\n    let visibleIndex = partsGroup.findIndex(({ paramIndex, partsIndex }) => partsIndex >= 0 && model.getParamFloat(paramIndex) !== 0);\r\n    if (visibleIndex >= 0) {\r\n      const originalOpacity = model.getPartsOpacity(partsGroup[visibleIndex].partsIndex);\r\n      visibleOpacity = clamp(originalOpacity + dt / this.opacityAnimDuration, 0, 1);\r\n    } else {\r\n      visibleIndex = 0;\r\n      visibleOpacity = 1;\r\n    }\r\n    partsGroup.forEach(({ partsIndex }, index) => {\r\n      if (partsIndex >= 0) {\r\n        if (visibleIndex == index) {\r\n          model.setPartsOpacity(partsIndex, visibleOpacity);\r\n        } else {\r\n          let opacity = model.getPartsOpacity(partsIndex);\r\n          let a1;\r\n          if (visibleOpacity < phi) {\r\n            a1 = visibleOpacity * (phi - 1) / phi + 1;\r\n          } else {\r\n            a1 = (1 - visibleOpacity) * phi / (1 - phi);\r\n          }\r\n          let backOp = (1 - a1) * (1 - visibleOpacity);\r\n          if (backOp > maxBackOpacity) {\r\n            a1 = 1 - maxBackOpacity / (1 - visibleOpacity);\r\n          }\r\n          if (opacity > a1) {\r\n            opacity = a1;\r\n          }\r\n          model.setPartsOpacity(partsIndex, opacity);\r\n        }\r\n      }\r\n    });\r\n  }\r\n  copyOpacity(partsGroup) {\r\n    const model = this.coreModel;\r\n    partsGroup.forEach(({ partsIndex, link }) => {\r\n      if (partsIndex >= 0 && link) {\r\n        const opacity = model.getPartsOpacity(partsIndex);\r\n        link.forEach(({ partsIndex: partsIndex2 }) => {\r\n          if (partsIndex2 >= 0) {\r\n            model.setPartsOpacity(partsIndex2, opacity);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n  update(dt) {\r\n    this.partsGroups.forEach((partGroup) => {\r\n      this.normalizePartsOpacityGroup(partGroup, dt);\r\n      this.copyOpacity(partGroup);\r\n    });\r\n  }\r\n}\r\nLive2DFactory.registerRuntime({\r\n  version: 2,\r\n  test(source) {\r\n    return source instanceof Cubism2ModelSettings || Cubism2ModelSettings.isValidJSON(source);\r\n  },\r\n  ready() {\r\n    return Promise.resolve();\r\n  },\r\n  isValidMoc(modelData) {\r\n    if (modelData.byteLength < 3) {\r\n      return false;\r\n    }\r\n    const view = new Int8Array(modelData, 0, 3);\r\n    return String.fromCharCode(...view) === \"moc\";\r\n  },\r\n  createModelSettings(json) {\r\n    return new Cubism2ModelSettings(json);\r\n  },\r\n  createCoreModel(data) {\r\n    const model = Live2DModelWebGL.loadModel(data);\r\n    const error = Live2D.getError();\r\n    if (error)\r\n      throw error;\r\n    return model;\r\n  },\r\n  createInternalModel(coreModel, settings, options) {\r\n    return new Cubism2InternalModel(coreModel, settings, options);\r\n  },\r\n  createPose(coreModel, data) {\r\n    return new Live2DPose(coreModel, data);\r\n  },\r\n  createPhysics(coreModel, data) {\r\n    return new Live2DPhysics(coreModel, data);\r\n  }\r\n});\r\nif (!window.Live2DCubismCore) {\r\n  throw new Error(\"Could not find Cubism 4 runtime. This plugin requires live2dcubismcore.js to be loaded.\");\r\n}\r\nclass CubismVector2 {\r\n  constructor(x, y) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n  }\r\n  add(vector2) {\r\n    const ret = new CubismVector2(0, 0);\r\n    ret.x = this.x + vector2.x;\r\n    ret.y = this.y + vector2.y;\r\n    return ret;\r\n  }\r\n  substract(vector2) {\r\n    const ret = new CubismVector2(0, 0);\r\n    ret.x = this.x - vector2.x;\r\n    ret.y = this.y - vector2.y;\r\n    return ret;\r\n  }\r\n  multiply(vector2) {\r\n    const ret = new CubismVector2(0, 0);\r\n    ret.x = this.x * vector2.x;\r\n    ret.y = this.y * vector2.y;\r\n    return ret;\r\n  }\r\n  multiplyByScaler(scalar) {\r\n    return this.multiply(new CubismVector2(scalar, scalar));\r\n  }\r\n  division(vector2) {\r\n    const ret = new CubismVector2(0, 0);\r\n    ret.x = this.x / vector2.x;\r\n    ret.y = this.y / vector2.y;\r\n    return ret;\r\n  }\r\n  divisionByScalar(scalar) {\r\n    return this.division(new CubismVector2(scalar, scalar));\r\n  }\r\n  getLength() {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y);\r\n  }\r\n  getDistanceWith(a) {\r\n    return Math.sqrt((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));\r\n  }\r\n  dot(a) {\r\n    return this.x * a.x + this.y * a.y;\r\n  }\r\n  normalize() {\r\n    const length = Math.pow(this.x * this.x + this.y * this.y, 0.5);\r\n    this.x = this.x / length;\r\n    this.y = this.y / length;\r\n  }\r\n  isEqual(rhs) {\r\n    return this.x == rhs.x && this.y == rhs.y;\r\n  }\r\n  isNotEqual(rhs) {\r\n    return !this.isEqual(rhs);\r\n  }\r\n}\r\nconst _CubismMath = class {\r\n  static range(value, min, max) {\r\n    if (value < min) {\r\n      value = min;\r\n    } else if (value > max) {\r\n      value = max;\r\n    }\r\n    return value;\r\n  }\r\n  static sin(x) {\r\n    return Math.sin(x);\r\n  }\r\n  static cos(x) {\r\n    return Math.cos(x);\r\n  }\r\n  static abs(x) {\r\n    return Math.abs(x);\r\n  }\r\n  static sqrt(x) {\r\n    return Math.sqrt(x);\r\n  }\r\n  static cbrt(x) {\r\n    if (x === 0) {\r\n      return x;\r\n    }\r\n    let cx = x;\r\n    const isNegativeNumber = cx < 0;\r\n    if (isNegativeNumber) {\r\n      cx = -cx;\r\n    }\r\n    let ret;\r\n    if (cx === Infinity) {\r\n      ret = Infinity;\r\n    } else {\r\n      ret = Math.exp(Math.log(cx) / 3);\r\n      ret = (cx / (ret * ret) + 2 * ret) / 3;\r\n    }\r\n    return isNegativeNumber ? -ret : ret;\r\n  }\r\n  static getEasingSine(value) {\r\n    if (value < 0) {\r\n      return 0;\r\n    } else if (value > 1) {\r\n      return 1;\r\n    }\r\n    return 0.5 - 0.5 * this.cos(value * Math.PI);\r\n  }\r\n  static max(left, right) {\r\n    return left > right ? left : right;\r\n  }\r\n  static min(left, right) {\r\n    return left > right ? right : left;\r\n  }\r\n  static degreesToRadian(degrees) {\r\n    return degrees / 180 * Math.PI;\r\n  }\r\n  static radianToDegrees(radian) {\r\n    return radian * 180 / Math.PI;\r\n  }\r\n  static directionToRadian(from, to) {\r\n    const q1 = Math.atan2(to.y, to.x);\r\n    const q2 = Math.atan2(from.y, from.x);\r\n    let ret = q1 - q2;\r\n    while (ret < -Math.PI) {\r\n      ret += Math.PI * 2;\r\n    }\r\n    while (ret > Math.PI) {\r\n      ret -= Math.PI * 2;\r\n    }\r\n    return ret;\r\n  }\r\n  static directionToDegrees(from, to) {\r\n    const radian = this.directionToRadian(from, to);\r\n    let degree = this.radianToDegrees(radian);\r\n    if (to.x - from.x > 0) {\r\n      degree = -degree;\r\n    }\r\n    return degree;\r\n  }\r\n  static radianToDirection(totalAngle) {\r\n    const ret = new CubismVector2();\r\n    ret.x = this.sin(totalAngle);\r\n    ret.y = this.cos(totalAngle);\r\n    return ret;\r\n  }\r\n  static quadraticEquation(a, b, c) {\r\n    if (this.abs(a) < _CubismMath.Epsilon) {\r\n      if (this.abs(b) < _CubismMath.Epsilon) {\r\n        return -c;\r\n      }\r\n      return -c / b;\r\n    }\r\n    return -(b + this.sqrt(b * b - 4 * a * c)) / (2 * a);\r\n  }\r\n  static cardanoAlgorithmForBezier(a, b, c, d) {\r\n    if (this.sqrt(a) < _CubismMath.Epsilon) {\r\n      return this.range(this.quadraticEquation(b, c, d), 0, 1);\r\n    }\r\n    const ba = b / a;\r\n    const ca = c / a;\r\n    const da = d / a;\r\n    const p = (3 * ca - ba * ba) / 3;\r\n    const p3 = p / 3;\r\n    const q = (2 * ba * ba * ba - 9 * ba * ca + 27 * da) / 27;\r\n    const q2 = q / 2;\r\n    const discriminant = q2 * q2 + p3 * p3 * p3;\r\n    const center = 0.5;\r\n    const threshold = center + 0.01;\r\n    if (discriminant < 0) {\r\n      const mp3 = -p / 3;\r\n      const mp33 = mp3 * mp3 * mp3;\r\n      const r = this.sqrt(mp33);\r\n      const t = -q / (2 * r);\r\n      const cosphi = this.range(t, -1, 1);\r\n      const phi = Math.acos(cosphi);\r\n      const crtr = this.cbrt(r);\r\n      const t1 = 2 * crtr;\r\n      const root12 = t1 * this.cos(phi / 3) - ba / 3;\r\n      if (this.abs(root12 - center) < threshold) {\r\n        return this.range(root12, 0, 1);\r\n      }\r\n      const root2 = t1 * this.cos((phi + 2 * Math.PI) / 3) - ba / 3;\r\n      if (this.abs(root2 - center) < threshold) {\r\n        return this.range(root2, 0, 1);\r\n      }\r\n      const root3 = t1 * this.cos((phi + 4 * Math.PI) / 3) - ba / 3;\r\n      return this.range(root3, 0, 1);\r\n    }\r\n    if (discriminant == 0) {\r\n      let u12;\r\n      if (q2 < 0) {\r\n        u12 = this.cbrt(-q2);\r\n      } else {\r\n        u12 = -this.cbrt(q2);\r\n      }\r\n      const root12 = 2 * u12 - ba / 3;\r\n      if (this.abs(root12 - center) < threshold) {\r\n        return this.range(root12, 0, 1);\r\n      }\r\n      const root2 = -u12 - ba / 3;\r\n      return this.range(root2, 0, 1);\r\n    }\r\n    const sd = this.sqrt(discriminant);\r\n    const u1 = this.cbrt(sd - q2);\r\n    const v1 = this.cbrt(sd + q2);\r\n    const root1 = u1 - v1 - ba / 3;\r\n    return this.range(root1, 0, 1);\r\n  }\r\n  constructor() {\r\n  }\r\n};\r\nlet CubismMath = _CubismMath;\r\nCubismMath.Epsilon = 1e-5;\r\nclass CubismMatrix44 {\r\n  constructor() {\r\n    this._tr = new Float32Array(16);\r\n    this.loadIdentity();\r\n  }\r\n  static multiply(a, b, dst) {\r\n    const c = new Float32Array([\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      0\r\n    ]);\r\n    const n = 4;\r\n    for (let i = 0; i < n; ++i) {\r\n      for (let j = 0; j < n; ++j) {\r\n        for (let k = 0; k < n; ++k) {\r\n          c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\r\n        }\r\n      }\r\n    }\r\n    for (let i = 0; i < 16; ++i) {\r\n      dst[i] = c[i];\r\n    }\r\n  }\r\n  loadIdentity() {\r\n    const c = new Float32Array([\r\n      1,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      1,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      1,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      1\r\n    ]);\r\n    this.setMatrix(c);\r\n  }\r\n  setMatrix(tr) {\r\n    for (let i = 0; i < 16; ++i) {\r\n      this._tr[i] = tr[i];\r\n    }\r\n  }\r\n  getArray() {\r\n    return this._tr;\r\n  }\r\n  getScaleX() {\r\n    return this._tr[0];\r\n  }\r\n  getScaleY() {\r\n    return this._tr[5];\r\n  }\r\n  getTranslateX() {\r\n    return this._tr[12];\r\n  }\r\n  getTranslateY() {\r\n    return this._tr[13];\r\n  }\r\n  transformX(src) {\r\n    return this._tr[0] * src + this._tr[12];\r\n  }\r\n  transformY(src) {\r\n    return this._tr[5] * src + this._tr[13];\r\n  }\r\n  invertTransformX(src) {\r\n    return (src - this._tr[12]) / this._tr[0];\r\n  }\r\n  invertTransformY(src) {\r\n    return (src - this._tr[13]) / this._tr[5];\r\n  }\r\n  translateRelative(x, y) {\r\n    const tr1 = new Float32Array([\r\n      1,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      1,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      1,\r\n      0,\r\n      x,\r\n      y,\r\n      0,\r\n      1\r\n    ]);\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n  translate(x, y) {\r\n    this._tr[12] = x;\r\n    this._tr[13] = y;\r\n  }\r\n  translateX(x) {\r\n    this._tr[12] = x;\r\n  }\r\n  translateY(y) {\r\n    this._tr[13] = y;\r\n  }\r\n  scaleRelative(x, y) {\r\n    const tr1 = new Float32Array([\r\n      x,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      y,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      1,\r\n      0,\r\n      0,\r\n      0,\r\n      0,\r\n      1\r\n    ]);\r\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\r\n  }\r\n  scale(x, y) {\r\n    this._tr[0] = x;\r\n    this._tr[5] = y;\r\n  }\r\n  multiplyByMatrix(m) {\r\n    CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\r\n  }\r\n  clone() {\r\n    const cloneMatrix = new CubismMatrix44();\r\n    for (let i = 0; i < this._tr.length; i++) {\r\n      cloneMatrix._tr[i] = this._tr[i];\r\n    }\r\n    return cloneMatrix;\r\n  }\r\n}\r\nclass CubismRenderer {\r\n  initialize(model) {\r\n    this._model = model;\r\n  }\r\n  drawModel() {\r\n    if (this.getModel() == null)\r\n      return;\r\n    this.doDrawModel();\r\n  }\r\n  setMvpMatrix(matrix44) {\r\n    this._mvpMatrix4x4.setMatrix(matrix44.getArray());\r\n  }\r\n  getMvpMatrix() {\r\n    return this._mvpMatrix4x4;\r\n  }\r\n  setModelColor(red, green, blue, alpha) {\r\n    if (red < 0) {\r\n      red = 0;\r\n    } else if (red > 1) {\r\n      red = 1;\r\n    }\r\n    if (green < 0) {\r\n      green = 0;\r\n    } else if (green > 1) {\r\n      green = 1;\r\n    }\r\n    if (blue < 0) {\r\n      blue = 0;\r\n    } else if (blue > 1) {\r\n      blue = 1;\r\n    }\r\n    if (alpha < 0) {\r\n      alpha = 0;\r\n    } else if (alpha > 1) {\r\n      alpha = 1;\r\n    }\r\n    this._modelColor.R = red;\r\n    this._modelColor.G = green;\r\n    this._modelColor.B = blue;\r\n    this._modelColor.A = alpha;\r\n  }\r\n  getModelColor() {\r\n    return Object.assign({}, this._modelColor);\r\n  }\r\n  setIsPremultipliedAlpha(enable) {\r\n    this._isPremultipliedAlpha = enable;\r\n  }\r\n  isPremultipliedAlpha() {\r\n    return this._isPremultipliedAlpha;\r\n  }\r\n  setIsCulling(culling) {\r\n    this._isCulling = culling;\r\n  }\r\n  isCulling() {\r\n    return this._isCulling;\r\n  }\r\n  setAnisotropy(n) {\r\n    this._anisortopy = n;\r\n  }\r\n  getAnisotropy() {\r\n    return this._anisortopy;\r\n  }\r\n  getModel() {\r\n    return this._model;\r\n  }\r\n  constructor() {\r\n    this._isCulling = false;\r\n    this._isPremultipliedAlpha = false;\r\n    this._anisortopy = 0;\r\n    this._modelColor = new CubismTextureColor();\r\n    this._mvpMatrix4x4 = new CubismMatrix44();\r\n    this._mvpMatrix4x4.loadIdentity();\r\n  }\r\n}\r\nvar CubismBlendMode = /* @__PURE__ */ ((CubismBlendMode2) => {\r\n  CubismBlendMode2[CubismBlendMode2[\"CubismBlendMode_Normal\"] = 0] = \"CubismBlendMode_Normal\";\r\n  CubismBlendMode2[CubismBlendMode2[\"CubismBlendMode_Additive\"] = 1] = \"CubismBlendMode_Additive\";\r\n  CubismBlendMode2[CubismBlendMode2[\"CubismBlendMode_Multiplicative\"] = 2] = \"CubismBlendMode_Multiplicative\";\r\n  return CubismBlendMode2;\r\n})(CubismBlendMode || {});\r\nclass CubismTextureColor {\r\n  constructor() {\r\n    this.R = 1;\r\n    this.G = 1;\r\n    this.B = 1;\r\n    this.A = 1;\r\n  }\r\n}\r\nlet s_isStarted = false;\r\nlet s_isInitialized = false;\r\nlet s_option = void 0;\r\nconst Constant = {\r\n  vertexOffset: 0,\r\n  vertexStep: 2\r\n};\r\nclass CubismFramework {\r\n  static startUp(option) {\r\n    if (s_isStarted) {\r\n      CubismLogInfo(\"CubismFramework.startUp() is already done.\");\r\n      return s_isStarted;\r\n    }\r\n    if (Live2DCubismCore._isStarted) {\r\n      s_isStarted = true;\r\n      return true;\r\n    }\r\n    Live2DCubismCore._isStarted = true;\r\n    s_option = option;\r\n    if (s_option) {\r\n      Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\r\n    }\r\n    s_isStarted = true;\r\n    if (s_isStarted) {\r\n      const version = Live2DCubismCore.Version.csmGetVersion();\r\n      const major = (version & 4278190080) >> 24;\r\n      const minor = (version & 16711680) >> 16;\r\n      const patch = version & 65535;\r\n      const versionNumber = version;\r\n      CubismLogInfo(`Live2D Cubism Core version: {0}.{1}.{2} ({3})`, (\"00\" + major).slice(-2), (\"00\" + minor).slice(-2), (\"0000\" + patch).slice(-4), versionNumber);\r\n    }\r\n    CubismLogInfo(\"CubismFramework.startUp() is complete.\");\r\n    return s_isStarted;\r\n  }\r\n  static cleanUp() {\r\n    s_isStarted = false;\r\n    s_isInitialized = false;\r\n    s_option = void 0;\r\n  }\r\n  static initialize() {\r\n    if (!s_isStarted) {\r\n      CubismLogWarning(\"CubismFramework is not started.\");\r\n      return;\r\n    }\r\n    if (s_isInitialized) {\r\n      CubismLogWarning(\"CubismFramework.initialize() skipped, already initialized.\");\r\n      return;\r\n    }\r\n    s_isInitialized = true;\r\n    CubismLogInfo(\"CubismFramework.initialize() is complete.\");\r\n  }\r\n  static dispose() {\r\n    if (!s_isStarted) {\r\n      CubismLogWarning(\"CubismFramework is not started.\");\r\n      return;\r\n    }\r\n    if (!s_isInitialized) {\r\n      CubismLogWarning(\"CubismFramework.dispose() skipped, not initialized.\");\r\n      return;\r\n    }\r\n    CubismRenderer.staticRelease();\r\n    s_isInitialized = false;\r\n    CubismLogInfo(\"CubismFramework.dispose() is complete.\");\r\n  }\r\n  static isStarted() {\r\n    return s_isStarted;\r\n  }\r\n  static isInitialized() {\r\n    return s_isInitialized;\r\n  }\r\n  static coreLogFunction(message) {\r\n    if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\r\n      return;\r\n    }\r\n    Live2DCubismCore.Logging.csmGetLogFunction()(message);\r\n  }\r\n  static getLoggingLevel() {\r\n    if (s_option != null) {\r\n      return s_option.loggingLevel;\r\n    }\r\n    return LogLevel.LogLevel_Off;\r\n  }\r\n  constructor() {\r\n  }\r\n}\r\nvar LogLevel = /* @__PURE__ */ ((LogLevel2) => {\r\n  LogLevel2[LogLevel2[\"LogLevel_Verbose\"] = 0] = \"LogLevel_Verbose\";\r\n  LogLevel2[LogLevel2[\"LogLevel_Debug\"] = 1] = \"LogLevel_Debug\";\r\n  LogLevel2[LogLevel2[\"LogLevel_Info\"] = 2] = \"LogLevel_Info\";\r\n  LogLevel2[LogLevel2[\"LogLevel_Warning\"] = 3] = \"LogLevel_Warning\";\r\n  LogLevel2[LogLevel2[\"LogLevel_Error\"] = 4] = \"LogLevel_Error\";\r\n  LogLevel2[LogLevel2[\"LogLevel_Off\"] = 5] = \"LogLevel_Off\";\r\n  return LogLevel2;\r\n})(LogLevel || {});\r\nconst CSM_ASSERT = () => {\r\n};\r\nfunction CubismLogDebug(fmt, ...args) {\r\n  CubismDebug.print(LogLevel.LogLevel_Debug, \"[CSM][D]\" + fmt + \"\\n\", args);\r\n}\r\nfunction CubismLogInfo(fmt, ...args) {\r\n  CubismDebug.print(LogLevel.LogLevel_Info, \"[CSM][I]\" + fmt + \"\\n\", args);\r\n}\r\nfunction CubismLogWarning(fmt, ...args) {\r\n  CubismDebug.print(LogLevel.LogLevel_Warning, \"[CSM][W]\" + fmt + \"\\n\", args);\r\n}\r\nfunction CubismLogError(fmt, ...args) {\r\n  CubismDebug.print(LogLevel.LogLevel_Error, \"[CSM][E]\" + fmt + \"\\n\", args);\r\n}\r\nclass CubismDebug {\r\n  static print(logLevel, format, args) {\r\n    if (logLevel < CubismFramework.getLoggingLevel()) {\r\n      return;\r\n    }\r\n    const logPrint = CubismFramework.coreLogFunction;\r\n    if (!logPrint)\r\n      return;\r\n    const buffer = format.replace(/{(\\d+)}/g, (m, k) => {\r\n      return args[k];\r\n    });\r\n    logPrint(buffer);\r\n  }\r\n  static dumpBytes(logLevel, data, length) {\r\n    for (let i = 0; i < length; i++) {\r\n      if (i % 16 == 0 && i > 0)\r\n        this.print(logLevel, \"\\n\");\r\n      else if (i % 8 == 0 && i > 0)\r\n        this.print(logLevel, \"  \");\r\n      this.print(logLevel, \"{0} \", [data[i] & 255]);\r\n    }\r\n    this.print(logLevel, \"\\n\");\r\n  }\r\n  constructor() {\r\n  }\r\n}\r\nclass ACubismMotion {\r\n  constructor() {\r\n    this._fadeInSeconds = -1;\r\n    this._fadeOutSeconds = -1;\r\n    this._weight = 1;\r\n    this._offsetSeconds = 0;\r\n    this._firedEventValues = [];\r\n  }\r\n  release() {\r\n    this._weight = 0;\r\n  }\r\n  updateParameters(model, motionQueueEntry, userTimeSeconds) {\r\n    if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\r\n      return;\r\n    }\r\n    if (!motionQueueEntry.isStarted()) {\r\n      motionQueueEntry.setIsStarted(true);\r\n      motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);\r\n      motionQueueEntry.setFadeInStartTime(userTimeSeconds);\r\n      const duration = this.getDuration();\r\n      if (motionQueueEntry.getEndTime() < 0) {\r\n        motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);\r\n      }\r\n    }\r\n    let fadeWeight = this._weight;\r\n    const fadeIn = this._fadeInSeconds == 0 ? 1 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds);\r\n    const fadeOut = this._fadeOutSeconds == 0 || motionQueueEntry.getEndTime() < 0 ? 1 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds);\r\n    fadeWeight = fadeWeight * fadeIn * fadeOut;\r\n    motionQueueEntry.setState(userTimeSeconds, fadeWeight);\r\n    this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);\r\n    if (motionQueueEntry.getEndTime() > 0 && motionQueueEntry.getEndTime() < userTimeSeconds) {\r\n      motionQueueEntry.setIsFinished(true);\r\n    }\r\n  }\r\n  setFadeInTime(fadeInSeconds) {\r\n    this._fadeInSeconds = fadeInSeconds;\r\n  }\r\n  setFadeOutTime(fadeOutSeconds) {\r\n    this._fadeOutSeconds = fadeOutSeconds;\r\n  }\r\n  getFadeOutTime() {\r\n    return this._fadeOutSeconds;\r\n  }\r\n  getFadeInTime() {\r\n    return this._fadeInSeconds;\r\n  }\r\n  setWeight(weight) {\r\n    this._weight = weight;\r\n  }\r\n  getWeight() {\r\n    return this._weight;\r\n  }\r\n  getDuration() {\r\n    return -1;\r\n  }\r\n  getLoopDuration() {\r\n    return -1;\r\n  }\r\n  setOffsetTime(offsetSeconds) {\r\n    this._offsetSeconds = offsetSeconds;\r\n  }\r\n  getFiredEvent(beforeCheckTimeSeconds, motionTimeSeconds) {\r\n    return this._firedEventValues;\r\n  }\r\n  setFinishedMotionHandler(onFinishedMotionHandler) {\r\n    this._onFinishedMotion = onFinishedMotionHandler;\r\n  }\r\n  getFinishedMotionHandler() {\r\n    return this._onFinishedMotion;\r\n  }\r\n}\r\nconst DefaultFadeTime = 1;\r\nclass CubismExpressionMotion extends ACubismMotion {\r\n  constructor() {\r\n    super();\r\n    this._parameters = [];\r\n  }\r\n  static create(json) {\r\n    const expression = new CubismExpressionMotion();\r\n    const fadeInTime = json.FadeInTime;\r\n    const fadeOutTime = json.FadeOutTime;\r\n    expression.setFadeInTime(fadeInTime !== void 0 ? fadeInTime : DefaultFadeTime);\r\n    expression.setFadeOutTime(fadeOutTime !== void 0 ? fadeOutTime : DefaultFadeTime);\r\n    const parameters = json.Parameters || [];\r\n    for (let i = 0; i < parameters.length; ++i) {\r\n      const param = parameters[i];\r\n      const parameterId = param.Id;\r\n      const value = param.Value;\r\n      let blendType;\r\n      switch (param.Blend) {\r\n        case \"Multiply\":\r\n          blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\r\n          break;\r\n        case \"Overwrite\":\r\n          blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\r\n          break;\r\n        case \"Add\":\r\n        default:\r\n          blendType = ExpressionBlendType.ExpressionBlendType_Add;\r\n          break;\r\n      }\r\n      const item = {\r\n        parameterId,\r\n        blendType,\r\n        value\r\n      };\r\n      expression._parameters.push(item);\r\n    }\r\n    return expression;\r\n  }\r\n  doUpdateParameters(model, userTimeSeconds, weight, motionQueueEntry) {\r\n    for (let i = 0; i < this._parameters.length; ++i) {\r\n      const parameter = this._parameters[i];\r\n      switch (parameter.blendType) {\r\n        case ExpressionBlendType.ExpressionBlendType_Add: {\r\n          model.addParameterValueById(parameter.parameterId, parameter.value, weight);\r\n          break;\r\n        }\r\n        case ExpressionBlendType.ExpressionBlendType_Multiply: {\r\n          model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);\r\n          break;\r\n        }\r\n        case ExpressionBlendType.ExpressionBlendType_Overwrite: {\r\n          model.setParameterValueById(parameter.parameterId, parameter.value, weight);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\nvar ExpressionBlendType = /* @__PURE__ */ ((ExpressionBlendType2) => {\r\n  ExpressionBlendType2[ExpressionBlendType2[\"ExpressionBlendType_Add\"] = 0] = \"ExpressionBlendType_Add\";\r\n  ExpressionBlendType2[ExpressionBlendType2[\"ExpressionBlendType_Multiply\"] = 1] = \"ExpressionBlendType_Multiply\";\r\n  ExpressionBlendType2[ExpressionBlendType2[\"ExpressionBlendType_Overwrite\"] = 2] = \"ExpressionBlendType_Overwrite\";\r\n  return ExpressionBlendType2;\r\n})(ExpressionBlendType || {});\r\nclass CubismMotionQueueEntry {\r\n  constructor() {\r\n    this._autoDelete = false;\r\n    this._available = true;\r\n    this._finished = false;\r\n    this._started = false;\r\n    this._startTimeSeconds = -1;\r\n    this._fadeInStartTimeSeconds = 0;\r\n    this._endTimeSeconds = -1;\r\n    this._stateTimeSeconds = 0;\r\n    this._stateWeight = 0;\r\n    this._lastEventCheckSeconds = 0;\r\n    this._motionQueueEntryHandle = this;\r\n    this._fadeOutSeconds = 0;\r\n    this._isTriggeredFadeOut = false;\r\n  }\r\n  release() {\r\n    if (this._autoDelete && this._motion) {\r\n      this._motion.release();\r\n    }\r\n  }\r\n  setFadeOut(fadeOutSeconds) {\r\n    this._fadeOutSeconds = fadeOutSeconds;\r\n    this._isTriggeredFadeOut = true;\r\n  }\r\n  startFadeOut(fadeOutSeconds, userTimeSeconds) {\r\n    const newEndTimeSeconds = userTimeSeconds + fadeOutSeconds;\r\n    this._isTriggeredFadeOut = true;\r\n    if (this._endTimeSeconds < 0 || newEndTimeSeconds < this._endTimeSeconds) {\r\n      this._endTimeSeconds = newEndTimeSeconds;\r\n    }\r\n  }\r\n  isFinished() {\r\n    return this._finished;\r\n  }\r\n  isStarted() {\r\n    return this._started;\r\n  }\r\n  getStartTime() {\r\n    return this._startTimeSeconds;\r\n  }\r\n  getFadeInStartTime() {\r\n    return this._fadeInStartTimeSeconds;\r\n  }\r\n  getEndTime() {\r\n    return this._endTimeSeconds;\r\n  }\r\n  setStartTime(startTime) {\r\n    this._startTimeSeconds = startTime;\r\n  }\r\n  setFadeInStartTime(startTime) {\r\n    this._fadeInStartTimeSeconds = startTime;\r\n  }\r\n  setEndTime(endTime) {\r\n    this._endTimeSeconds = endTime;\r\n  }\r\n  setIsFinished(f) {\r\n    this._finished = f;\r\n  }\r\n  setIsStarted(f) {\r\n    this._started = f;\r\n  }\r\n  isAvailable() {\r\n    return this._available;\r\n  }\r\n  setIsAvailable(v) {\r\n    this._available = v;\r\n  }\r\n  setState(timeSeconds, weight) {\r\n    this._stateTimeSeconds = timeSeconds;\r\n    this._stateWeight = weight;\r\n  }\r\n  getStateTime() {\r\n    return this._stateTimeSeconds;\r\n  }\r\n  getStateWeight() {\r\n    return this._stateWeight;\r\n  }\r\n  getLastCheckEventSeconds() {\r\n    return this._lastEventCheckSeconds;\r\n  }\r\n  setLastCheckEventSeconds(checkSeconds) {\r\n    this._lastEventCheckSeconds = checkSeconds;\r\n  }\r\n  isTriggeredFadeOut() {\r\n    return this._isTriggeredFadeOut;\r\n  }\r\n  getFadeOutSeconds() {\r\n    return this._fadeOutSeconds;\r\n  }\r\n}\r\nclass CubismMotionQueueManager {\r\n  constructor() {\r\n    this._userTimeSeconds = 0;\r\n    this._eventCustomData = null;\r\n    this._motions = [];\r\n  }\r\n  release() {\r\n    for (let i = 0; i < this._motions.length; ++i) {\r\n      if (this._motions[i]) {\r\n        this._motions[i].release();\r\n      }\r\n    }\r\n    this._motions = void 0;\r\n  }\r\n  startMotion(motion, autoDelete, userTimeSeconds) {\r\n    if (motion == null) {\r\n      return InvalidMotionQueueEntryHandleValue;\r\n    }\r\n    let motionQueueEntry;\r\n    for (let i = 0; i < this._motions.length; ++i) {\r\n      motionQueueEntry = this._motions[i];\r\n      if (motionQueueEntry == null) {\r\n        continue;\r\n      }\r\n      motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime());\r\n    }\r\n    motionQueueEntry = new CubismMotionQueueEntry();\r\n    motionQueueEntry._autoDelete = autoDelete;\r\n    motionQueueEntry._motion = motion;\r\n    this._motions.push(motionQueueEntry);\r\n    return motionQueueEntry._motionQueueEntryHandle;\r\n  }\r\n  isFinished() {\r\n    let i = 0;\r\n    while (i < this._motions.length) {\r\n      const motionQueueEntry = this._motions[i];\r\n      if (motionQueueEntry == null) {\r\n        this._motions.splice(i, 1);\r\n        continue;\r\n      }\r\n      const motion = motionQueueEntry._motion;\r\n      if (motion == null) {\r\n        motionQueueEntry.release();\r\n        this._motions.splice(i, 1);\r\n        continue;\r\n      }\r\n      if (!motionQueueEntry.isFinished()) {\r\n        return false;\r\n      }\r\n      i++;\r\n    }\r\n    return true;\r\n  }\r\n  isFinishedByHandle(motionQueueEntryNumber) {\r\n    for (let i = 0; i < this._motions.length; i++) {\r\n      const motionQueueEntry = this._motions[i];\r\n      if (motionQueueEntry == null) {\r\n        continue;\r\n      }\r\n      if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber && !motionQueueEntry.isFinished()) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  stopAllMotions() {\r\n    for (let i = 0; i < this._motions.length; i++) {\r\n      const motionQueueEntry = this._motions[i];\r\n      if (motionQueueEntry != null) {\r\n        motionQueueEntry.release();\r\n      }\r\n    }\r\n    this._motions = [];\r\n  }\r\n  getCubismMotionQueueEntry(motionQueueEntryNumber) {\r\n    return this._motions.find((entry) => entry != null && entry._motionQueueEntryHandle == motionQueueEntryNumber);\r\n  }\r\n  setEventCallback(callback, customData = null) {\r\n    this._eventCallBack = callback;\r\n    this._eventCustomData = customData;\r\n  }\r\n  doUpdateMotion(model, userTimeSeconds) {\r\n    let updated = false;\r\n    let i = 0;\r\n    while (i < this._motions.length) {\r\n      const motionQueueEntry = this._motions[i];\r\n      if (motionQueueEntry == null) {\r\n        this._motions.splice(i, 1);\r\n        continue;\r\n      }\r\n      const motion = motionQueueEntry._motion;\r\n      if (motion == null) {\r\n        motionQueueEntry.release();\r\n        this._motions.splice(i, 1);\r\n        continue;\r\n      }\r\n      motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\r\n      updated = true;\r\n      const firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventSeconds() - motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());\r\n      for (let i2 = 0; i2 < firedList.length; ++i2) {\r\n        this._eventCallBack(this, firedList[i2], this._eventCustomData);\r\n      }\r\n      motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);\r\n      if (motionQueueEntry.isFinished()) {\r\n        motionQueueEntry.release();\r\n        this._motions.splice(i, 1);\r\n      } else {\r\n        if (motionQueueEntry.isTriggeredFadeOut()) {\r\n          motionQueueEntry.startFadeOut(motionQueueEntry.getFadeOutSeconds(), userTimeSeconds);\r\n        }\r\n        i++;\r\n      }\r\n    }\r\n    return updated;\r\n  }\r\n}\r\nconst InvalidMotionQueueEntryHandleValue = -1;\r\nclass Cubism4ExpressionManager extends ExpressionManager {\r\n  constructor(settings, options) {\r\n    var _a;\r\n    super(settings, options);\r\n    this.queueManager = new CubismMotionQueueManager();\r\n    this.definitions = (_a = settings.expressions) != null ? _a : [];\r\n    this.init();\r\n  }\r\n  isFinished() {\r\n    return this.queueManager.isFinished();\r\n  }\r\n  getExpressionIndex(name) {\r\n    return this.definitions.findIndex((def) => def.Name === name);\r\n  }\r\n  getExpressionFile(definition) {\r\n    return definition.File;\r\n  }\r\n  createExpression(data, definition) {\r\n    return CubismExpressionMotion.create(data);\r\n  }\r\n  _setExpression(motion) {\r\n    return this.queueManager.startMotion(motion, false, performance.now());\r\n  }\r\n  stopAllExpressions() {\r\n    this.queueManager.stopAllMotions();\r\n  }\r\n  updateParameters(model, now) {\r\n    return this.queueManager.doUpdateMotion(model, now);\r\n  }\r\n}\r\nclass CubismModelSettingsJson {\r\n  constructor(json) {\r\n    this.groups = json.Groups;\r\n    this.hitAreas = json.HitAreas;\r\n    this.layout = json.Layout;\r\n    this.moc = json.FileReferences.Moc;\r\n    this.expressions = json.FileReferences.Expressions;\r\n    this.motions = json.FileReferences.Motions;\r\n    this.textures = json.FileReferences.Textures;\r\n    this.physics = json.FileReferences.Physics;\r\n    this.pose = json.FileReferences.Pose;\r\n  }\r\n  getEyeBlinkParameters() {\r\n    var _a, _b;\r\n    return (_b = (_a = this.groups) == null ? void 0 : _a.find((group) => group.Name === \"EyeBlink\")) == null ? void 0 : _b.Ids;\r\n  }\r\n  getLipSyncParameters() {\r\n    var _a, _b;\r\n    return (_b = (_a = this.groups) == null ? void 0 : _a.find((group) => group.Name === \"LipSync\")) == null ? void 0 : _b.Ids;\r\n  }\r\n}\r\nclass Cubism4ModelSettings extends ModelSettings {\r\n  constructor(json) {\r\n    super(json);\r\n    if (!Cubism4ModelSettings.isValidJSON(json)) {\r\n      throw new TypeError(\"Invalid JSON.\");\r\n    }\r\n    Object.assign(this, new CubismModelSettingsJson(json));\r\n  }\r\n  static isValidJSON(json) {\r\n    var _a;\r\n    return !!(json == null ? void 0 : json.FileReferences) && typeof json.FileReferences.Moc === \"string\" && ((_a = json.FileReferences.Textures) == null ? void 0 : _a.length) > 0 && json.FileReferences.Textures.every((item) => typeof item === \"string\");\r\n  }\r\n  replaceFiles(replace) {\r\n    super.replaceFiles(replace);\r\n    if (this.motions) {\r\n      for (const [group, motions] of Object.entries(this.motions)) {\r\n        for (let i = 0; i < motions.length; i++) {\r\n          motions[i].File = replace(motions[i].File, `motions.${group}[${i}].File`);\r\n          if (motions[i].Sound !== void 0) {\r\n            motions[i].Sound = replace(motions[i].Sound, `motions.${group}[${i}].Sound`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (this.expressions) {\r\n      for (let i = 0; i < this.expressions.length; i++) {\r\n        this.expressions[i].File = replace(this.expressions[i].File, `expressions[${i}].File`);\r\n      }\r\n    }\r\n  }\r\n}\r\napplyMixins(Cubism4ModelSettings, [CubismModelSettingsJson]);\r\nvar CubismMotionCurveTarget = /* @__PURE__ */ ((CubismMotionCurveTarget2) => {\r\n  CubismMotionCurveTarget2[CubismMotionCurveTarget2[\"CubismMotionCurveTarget_Model\"] = 0] = \"CubismMotionCurveTarget_Model\";\r\n  CubismMotionCurveTarget2[CubismMotionCurveTarget2[\"CubismMotionCurveTarget_Parameter\"] = 1] = \"CubismMotionCurveTarget_Parameter\";\r\n  CubismMotionCurveTarget2[CubismMotionCurveTarget2[\"CubismMotionCurveTarget_PartOpacity\"] = 2] = \"CubismMotionCurveTarget_PartOpacity\";\r\n  return CubismMotionCurveTarget2;\r\n})(CubismMotionCurveTarget || {});\r\nvar CubismMotionSegmentType = /* @__PURE__ */ ((CubismMotionSegmentType2) => {\r\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_Linear\"] = 0] = \"CubismMotionSegmentType_Linear\";\r\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_Bezier\"] = 1] = \"CubismMotionSegmentType_Bezier\";\r\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_Stepped\"] = 2] = \"CubismMotionSegmentType_Stepped\";\r\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_InverseStepped\"] = 3] = \"CubismMotionSegmentType_InverseStepped\";\r\n  return CubismMotionSegmentType2;\r\n})(CubismMotionSegmentType || {});\r\nclass CubismMotionPoint {\r\n  constructor(time = 0, value = 0) {\r\n    this.time = time;\r\n    this.value = value;\r\n  }\r\n}\r\nclass CubismMotionSegment {\r\n  constructor() {\r\n    this.basePointIndex = 0;\r\n    this.segmentType = 0;\r\n  }\r\n}\r\nclass CubismMotionCurve {\r\n  constructor() {\r\n    this.id = \"\";\r\n    this.type = 0;\r\n    this.segmentCount = 0;\r\n    this.baseSegmentIndex = 0;\r\n    this.fadeInTime = 0;\r\n    this.fadeOutTime = 0;\r\n  }\r\n}\r\nclass CubismMotionEvent {\r\n  constructor() {\r\n    this.fireTime = 0;\r\n    this.value = \"\";\r\n  }\r\n}\r\nclass CubismMotionData {\r\n  constructor() {\r\n    this.duration = 0;\r\n    this.loop = false;\r\n    this.curveCount = 0;\r\n    this.eventCount = 0;\r\n    this.fps = 0;\r\n    this.curves = [];\r\n    this.segments = [];\r\n    this.points = [];\r\n    this.events = [];\r\n  }\r\n}\r\nclass CubismMotionJson {\r\n  constructor(json) {\r\n    this._json = json;\r\n  }\r\n  release() {\r\n    this._json = void 0;\r\n  }\r\n  getMotionDuration() {\r\n    return this._json.Meta.Duration;\r\n  }\r\n  isMotionLoop() {\r\n    return this._json.Meta.Loop || false;\r\n  }\r\n  getEvaluationOptionFlag(flagType) {\r\n    if (EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType) {\r\n      return !!this._json.Meta.AreBeziersRestricted;\r\n    }\r\n    return false;\r\n  }\r\n  getMotionCurveCount() {\r\n    return this._json.Meta.CurveCount;\r\n  }\r\n  getMotionFps() {\r\n    return this._json.Meta.Fps;\r\n  }\r\n  getMotionTotalSegmentCount() {\r\n    return this._json.Meta.TotalSegmentCount;\r\n  }\r\n  getMotionTotalPointCount() {\r\n    return this._json.Meta.TotalPointCount;\r\n  }\r\n  getMotionFadeInTime() {\r\n    return this._json.Meta.FadeInTime;\r\n  }\r\n  getMotionFadeOutTime() {\r\n    return this._json.Meta.FadeOutTime;\r\n  }\r\n  getMotionCurveTarget(curveIndex) {\r\n    return this._json.Curves[curveIndex].Target;\r\n  }\r\n  getMotionCurveId(curveIndex) {\r\n    return this._json.Curves[curveIndex].Id;\r\n  }\r\n  getMotionCurveFadeInTime(curveIndex) {\r\n    return this._json.Curves[curveIndex].FadeInTime;\r\n  }\r\n  getMotionCurveFadeOutTime(curveIndex) {\r\n    return this._json.Curves[curveIndex].FadeOutTime;\r\n  }\r\n  getMotionCurveSegmentCount(curveIndex) {\r\n    return this._json.Curves[curveIndex].Segments.length;\r\n  }\r\n  getMotionCurveSegment(curveIndex, segmentIndex) {\r\n    return this._json.Curves[curveIndex].Segments[segmentIndex];\r\n  }\r\n  getEventCount() {\r\n    return this._json.Meta.UserDataCount || 0;\r\n  }\r\n  getTotalEventValueSize() {\r\n    return this._json.Meta.TotalUserDataSize;\r\n  }\r\n  getEventTime(userDataIndex) {\r\n    return this._json.UserData[userDataIndex].Time;\r\n  }\r\n  getEventValue(userDataIndex) {\r\n    return this._json.UserData[userDataIndex].Value;\r\n  }\r\n}\r\nvar EvaluationOptionFlag = /* @__PURE__ */ ((EvaluationOptionFlag2) => {\r\n  EvaluationOptionFlag2[EvaluationOptionFlag2[\"EvaluationOptionFlag_AreBeziersRistricted\"] = 0] = \"EvaluationOptionFlag_AreBeziersRistricted\";\r\n  return EvaluationOptionFlag2;\r\n})(EvaluationOptionFlag || {});\r\nconst EffectNameEyeBlink = \"EyeBlink\";\r\nconst EffectNameLipSync = \"LipSync\";\r\nconst TargetNameModel = \"Model\";\r\nconst TargetNameParameter = \"Parameter\";\r\nconst TargetNamePartOpacity = \"PartOpacity\";\r\nconst UseOldBeziersCurveMotion = false;\r\nfunction lerpPoints(a, b, t) {\r\n  const result = new CubismMotionPoint();\r\n  result.time = a.time + (b.time - a.time) * t;\r\n  result.value = a.value + (b.value - a.value) * t;\r\n  return result;\r\n}\r\nfunction linearEvaluate(points, time) {\r\n  let t = (time - points[0].time) / (points[1].time - points[0].time);\r\n  if (t < 0) {\r\n    t = 0;\r\n  }\r\n  return points[0].value + (points[1].value - points[0].value) * t;\r\n}\r\nfunction bezierEvaluate(points, time) {\r\n  let t = (time - points[0].time) / (points[3].time - points[0].time);\r\n  if (t < 0) {\r\n    t = 0;\r\n  }\r\n  const p01 = lerpPoints(points[0], points[1], t);\r\n  const p12 = lerpPoints(points[1], points[2], t);\r\n  const p23 = lerpPoints(points[2], points[3], t);\r\n  const p012 = lerpPoints(p01, p12, t);\r\n  const p123 = lerpPoints(p12, p23, t);\r\n  return lerpPoints(p012, p123, t).value;\r\n}\r\nfunction bezierEvaluateCardanoInterpretation(points, time) {\r\n  const x = time;\r\n  const x1 = points[0].time;\r\n  const x2 = points[3].time;\r\n  const cx1 = points[1].time;\r\n  const cx2 = points[2].time;\r\n  const a = x2 - 3 * cx2 + 3 * cx1 - x1;\r\n  const b = 3 * cx2 - 6 * cx1 + 3 * x1;\r\n  const c = 3 * cx1 - 3 * x1;\r\n  const d = x1 - x;\r\n  const t = CubismMath.cardanoAlgorithmForBezier(a, b, c, d);\r\n  const p01 = lerpPoints(points[0], points[1], t);\r\n  const p12 = lerpPoints(points[1], points[2], t);\r\n  const p23 = lerpPoints(points[2], points[3], t);\r\n  const p012 = lerpPoints(p01, p12, t);\r\n  const p123 = lerpPoints(p12, p23, t);\r\n  return lerpPoints(p012, p123, t).value;\r\n}\r\nfunction steppedEvaluate(points, time) {\r\n  return points[0].value;\r\n}\r\nfunction inverseSteppedEvaluate(points, time) {\r\n  return points[1].value;\r\n}\r\nfunction evaluateCurve(motionData, index, time) {\r\n  const curve = motionData.curves[index];\r\n  let target = -1;\r\n  const totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;\r\n  let pointPosition = 0;\r\n  for (let i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\r\n    pointPosition = motionData.segments[i].basePointIndex + (motionData.segments[i].segmentType == CubismMotionSegmentType.CubismMotionSegmentType_Bezier ? 3 : 1);\r\n    if (motionData.points[pointPosition].time > time) {\r\n      target = i;\r\n      break;\r\n    }\r\n  }\r\n  if (target == -1) {\r\n    return motionData.points[pointPosition].value;\r\n  }\r\n  const segment = motionData.segments[target];\r\n  return segment.evaluate(motionData.points.slice(segment.basePointIndex), time);\r\n}\r\nclass CubismMotion extends ACubismMotion {\r\n  constructor() {\r\n    super();\r\n    this._eyeBlinkParameterIds = [];\r\n    this._lipSyncParameterIds = [];\r\n    this._sourceFrameRate = 30;\r\n    this._loopDurationSeconds = -1;\r\n    this._isLoop = false;\r\n    this._isLoopFadeIn = true;\r\n    this._lastWeight = 0;\r\n  }\r\n  static create(json, onFinishedMotionHandler) {\r\n    const ret = new CubismMotion();\r\n    ret.parse(json);\r\n    ret._sourceFrameRate = ret._motionData.fps;\r\n    ret._loopDurationSeconds = ret._motionData.duration;\r\n    ret._onFinishedMotion = onFinishedMotionHandler;\r\n    return ret;\r\n  }\r\n  doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry) {\r\n    if (this._modelCurveIdEyeBlink == null) {\r\n      this._modelCurveIdEyeBlink = EffectNameEyeBlink;\r\n    }\r\n    if (this._modelCurveIdLipSync == null) {\r\n      this._modelCurveIdLipSync = EffectNameLipSync;\r\n    }\r\n    let timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();\r\n    if (timeOffsetSeconds < 0) {\r\n      timeOffsetSeconds = 0;\r\n    }\r\n    let lipSyncValue = Number.MAX_VALUE;\r\n    let eyeBlinkValue = Number.MAX_VALUE;\r\n    const MaxTargetSize = 64;\r\n    let lipSyncFlags = 0;\r\n    let eyeBlinkFlags = 0;\r\n    if (this._eyeBlinkParameterIds.length > MaxTargetSize) {\r\n      CubismLogDebug(\"too many eye blink targets : {0}\", this._eyeBlinkParameterIds.length);\r\n    }\r\n    if (this._lipSyncParameterIds.length > MaxTargetSize) {\r\n      CubismLogDebug(\"too many lip sync targets : {0}\", this._lipSyncParameterIds.length);\r\n    }\r\n    const tmpFadeIn = this._fadeInSeconds <= 0 ? 1 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds);\r\n    const tmpFadeOut = this._fadeOutSeconds <= 0 || motionQueueEntry.getEndTime() < 0 ? 1 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds);\r\n    let value;\r\n    let c, parameterIndex;\r\n    let time = timeOffsetSeconds;\r\n    if (this._isLoop) {\r\n      while (time > this._motionData.duration) {\r\n        time -= this._motionData.duration;\r\n      }\r\n    }\r\n    const curves = this._motionData.curves;\r\n    for (c = 0; c < this._motionData.curveCount && curves[c].type == CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {\r\n      value = evaluateCurve(this._motionData, c, time);\r\n      if (curves[c].id == this._modelCurveIdEyeBlink) {\r\n        eyeBlinkValue = value;\r\n      } else if (curves[c].id == this._modelCurveIdLipSync) {\r\n        lipSyncValue = value;\r\n      }\r\n    }\r\n    for (; c < this._motionData.curveCount && curves[c].type == CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {\r\n      parameterIndex = model.getParameterIndex(curves[c].id);\r\n      if (parameterIndex == -1) {\r\n        continue;\r\n      }\r\n      const sourceValue = model.getParameterValueByIndex(parameterIndex);\r\n      value = evaluateCurve(this._motionData, c, time);\r\n      if (eyeBlinkValue != Number.MAX_VALUE) {\r\n        for (let i = 0; i < this._eyeBlinkParameterIds.length && i < MaxTargetSize; ++i) {\r\n          if (this._eyeBlinkParameterIds[i] == curves[c].id) {\r\n            value *= eyeBlinkValue;\r\n            eyeBlinkFlags |= 1 << i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (lipSyncValue != Number.MAX_VALUE) {\r\n        for (let i = 0; i < this._lipSyncParameterIds.length && i < MaxTargetSize; ++i) {\r\n          if (this._lipSyncParameterIds[i] == curves[c].id) {\r\n            value += lipSyncValue;\r\n            lipSyncFlags |= 1 << i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      let v;\r\n      if (curves[c].fadeInTime < 0 && curves[c].fadeOutTime < 0) {\r\n        v = sourceValue + (value - sourceValue) * fadeWeight;\r\n      } else {\r\n        let fin;\r\n        let fout;\r\n        if (curves[c].fadeInTime < 0) {\r\n          fin = tmpFadeIn;\r\n        } else {\r\n          fin = curves[c].fadeInTime == 0 ? 1 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / curves[c].fadeInTime);\r\n        }\r\n        if (curves[c].fadeOutTime < 0) {\r\n          fout = tmpFadeOut;\r\n        } else {\r\n          fout = curves[c].fadeOutTime == 0 || motionQueueEntry.getEndTime() < 0 ? 1 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / curves[c].fadeOutTime);\r\n        }\r\n        const paramWeight = this._weight * fin * fout;\r\n        v = sourceValue + (value - sourceValue) * paramWeight;\r\n      }\r\n      model.setParameterValueByIndex(parameterIndex, v, 1);\r\n    }\r\n    {\r\n      if (eyeBlinkValue != Number.MAX_VALUE) {\r\n        for (let i = 0; i < this._eyeBlinkParameterIds.length && i < MaxTargetSize; ++i) {\r\n          const sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds[i]);\r\n          if (eyeBlinkFlags >> i & 1) {\r\n            continue;\r\n          }\r\n          const v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\r\n          model.setParameterValueById(this._eyeBlinkParameterIds[i], v);\r\n        }\r\n      }\r\n      if (lipSyncValue != Number.MAX_VALUE) {\r\n        for (let i = 0; i < this._lipSyncParameterIds.length && i < MaxTargetSize; ++i) {\r\n          const sourceValue = model.getParameterValueById(this._lipSyncParameterIds[i]);\r\n          if (lipSyncFlags >> i & 1) {\r\n            continue;\r\n          }\r\n          const v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\r\n          model.setParameterValueById(this._lipSyncParameterIds[i], v);\r\n        }\r\n      }\r\n    }\r\n    for (; c < this._motionData.curveCount && curves[c].type == CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {\r\n      value = evaluateCurve(this._motionData, c, time);\r\n      if (CubismConfig.setOpacityFromMotion) {\r\n        model.setPartOpacityById(curves[c].id, value);\r\n      } else {\r\n        parameterIndex = model.getParameterIndex(curves[c].id);\r\n        if (parameterIndex == -1) {\r\n          continue;\r\n        }\r\n        model.setParameterValueByIndex(parameterIndex, value);\r\n      }\r\n    }\r\n    if (timeOffsetSeconds >= this._motionData.duration) {\r\n      if (this._isLoop) {\r\n        motionQueueEntry.setStartTime(userTimeSeconds);\r\n        if (this._isLoopFadeIn) {\r\n          motionQueueEntry.setFadeInStartTime(userTimeSeconds);\r\n        }\r\n      } else {\r\n        if (this._onFinishedMotion) {\r\n          this._onFinishedMotion(this);\r\n        }\r\n        motionQueueEntry.setIsFinished(true);\r\n      }\r\n    }\r\n    this._lastWeight = fadeWeight;\r\n  }\r\n  setIsLoop(loop) {\r\n    this._isLoop = loop;\r\n  }\r\n  isLoop() {\r\n    return this._isLoop;\r\n  }\r\n  setIsLoopFadeIn(loopFadeIn) {\r\n    this._isLoopFadeIn = loopFadeIn;\r\n  }\r\n  isLoopFadeIn() {\r\n    return this._isLoopFadeIn;\r\n  }\r\n  getDuration() {\r\n    return this._isLoop ? -1 : this._loopDurationSeconds;\r\n  }\r\n  getLoopDuration() {\r\n    return this._loopDurationSeconds;\r\n  }\r\n  setParameterFadeInTime(parameterId, value) {\r\n    const curves = this._motionData.curves;\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves[i].id) {\r\n        curves[i].fadeInTime = value;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  setParameterFadeOutTime(parameterId, value) {\r\n    const curves = this._motionData.curves;\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves[i].id) {\r\n        curves[i].fadeOutTime = value;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n  getParameterFadeInTime(parameterId) {\r\n    const curves = this._motionData.curves;\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves[i].id) {\r\n        return curves[i].fadeInTime;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  getParameterFadeOutTime(parameterId) {\r\n    const curves = this._motionData.curves;\r\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\r\n      if (parameterId == curves[i].id) {\r\n        return curves[i].fadeOutTime;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  setEffectIds(eyeBlinkParameterIds, lipSyncParameterIds) {\r\n    this._eyeBlinkParameterIds = eyeBlinkParameterIds;\r\n    this._lipSyncParameterIds = lipSyncParameterIds;\r\n  }\r\n  release() {\r\n    this._motionData = void 0;\r\n  }\r\n  parse(motionJson) {\r\n    this._motionData = new CubismMotionData();\r\n    let json = new CubismMotionJson(motionJson);\r\n    this._motionData.duration = json.getMotionDuration();\r\n    this._motionData.loop = json.isMotionLoop();\r\n    this._motionData.curveCount = json.getMotionCurveCount();\r\n    this._motionData.fps = json.getMotionFps();\r\n    this._motionData.eventCount = json.getEventCount();\r\n    const areBeziersRestructed = json.getEvaluationOptionFlag(EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);\r\n    const fadeInSeconds = json.getMotionFadeInTime();\r\n    const fadeOutSeconds = json.getMotionFadeOutTime();\r\n    if (fadeInSeconds !== void 0) {\r\n      this._fadeInSeconds = fadeInSeconds < 0 ? 1 : fadeInSeconds;\r\n    } else {\r\n      this._fadeInSeconds = 1;\r\n    }\r\n    if (fadeOutSeconds !== void 0) {\r\n      this._fadeOutSeconds = fadeOutSeconds < 0 ? 1 : fadeOutSeconds;\r\n    } else {\r\n      this._fadeOutSeconds = 1;\r\n    }\r\n    this._motionData.curves = Array.from({ length: this._motionData.curveCount }).map(() => new CubismMotionCurve());\r\n    this._motionData.segments = Array.from({ length: json.getMotionTotalSegmentCount() }).map(() => new CubismMotionSegment());\r\n    this._motionData.events = Array.from({ length: this._motionData.eventCount }).map(() => new CubismMotionEvent());\r\n    this._motionData.points = [];\r\n    let totalPointCount = 0;\r\n    let totalSegmentCount = 0;\r\n    for (let curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {\r\n      const curve = this._motionData.curves[curveCount];\r\n      switch (json.getMotionCurveTarget(curveCount)) {\r\n        case TargetNameModel:\r\n          curve.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\r\n          break;\r\n        case TargetNameParameter:\r\n          curve.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\r\n          break;\r\n        case TargetNamePartOpacity:\r\n          curve.type = CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\r\n          break;\r\n        default:\r\n          CubismLogWarning('Warning : Unable to get segment type from Curve! The number of \"CurveCount\" may be incorrect!');\r\n      }\r\n      curve.id = json.getMotionCurveId(curveCount);\r\n      curve.baseSegmentIndex = totalSegmentCount;\r\n      const fadeInTime = json.getMotionCurveFadeInTime(curveCount);\r\n      const fadeOutTime = json.getMotionCurveFadeOutTime(curveCount);\r\n      curve.fadeInTime = fadeInTime !== void 0 ? fadeInTime : -1;\r\n      curve.fadeOutTime = fadeOutTime !== void 0 ? fadeOutTime : -1;\r\n      for (let segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount); ) {\r\n        if (segmentPosition == 0) {\r\n          this._motionData.segments[totalSegmentCount].basePointIndex = totalPointCount;\r\n          this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition), json.getMotionCurveSegment(curveCount, segmentPosition + 1));\r\n          totalPointCount += 1;\r\n          segmentPosition += 2;\r\n        } else {\r\n          this._motionData.segments[totalSegmentCount].basePointIndex = totalPointCount - 1;\r\n        }\r\n        const segment = json.getMotionCurveSegment(curveCount, segmentPosition);\r\n        switch (segment) {\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\r\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Linear;\r\n            this._motionData.segments[totalSegmentCount].evaluate = linearEvaluate;\r\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 1), json.getMotionCurveSegment(curveCount, segmentPosition + 2));\r\n            totalPointCount += 1;\r\n            segmentPosition += 3;\r\n            break;\r\n          }\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\r\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\r\n            if (areBeziersRestructed || UseOldBeziersCurveMotion) {\r\n              this._motionData.segments[totalSegmentCount].evaluate = bezierEvaluate;\r\n            } else {\r\n              this._motionData.segments[totalSegmentCount].evaluate = bezierEvaluateCardanoInterpretation;\r\n            }\r\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 1), json.getMotionCurveSegment(curveCount, segmentPosition + 2));\r\n            this._motionData.points[totalPointCount + 1] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 3), json.getMotionCurveSegment(curveCount, segmentPosition + 4));\r\n            this._motionData.points[totalPointCount + 2] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 5), json.getMotionCurveSegment(curveCount, segmentPosition + 6));\r\n            totalPointCount += 3;\r\n            segmentPosition += 7;\r\n            break;\r\n          }\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\r\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\r\n            this._motionData.segments[totalSegmentCount].evaluate = steppedEvaluate;\r\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 1), json.getMotionCurveSegment(curveCount, segmentPosition + 2));\r\n            totalPointCount += 1;\r\n            segmentPosition += 3;\r\n            break;\r\n          }\r\n          case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\r\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\r\n            this._motionData.segments[totalSegmentCount].evaluate = inverseSteppedEvaluate;\r\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 1), json.getMotionCurveSegment(curveCount, segmentPosition + 2));\r\n            totalPointCount += 1;\r\n            segmentPosition += 3;\r\n            break;\r\n          }\r\n        }\r\n        ++curve.segmentCount;\r\n        ++totalSegmentCount;\r\n      }\r\n      this._motionData.curves.push(curve);\r\n    }\r\n    for (let userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {\r\n      this._motionData.events[userdatacount].fireTime = json.getEventTime(userdatacount);\r\n      this._motionData.events[userdatacount].value = json.getEventValue(userdatacount);\r\n    }\r\n    json.release();\r\n  }\r\n  getFiredEvent(beforeCheckTimeSeconds, motionTimeSeconds) {\r\n    this._firedEventValues.length = 0;\r\n    for (let u = 0; u < this._motionData.eventCount; ++u) {\r\n      if (this._motionData.events[u].fireTime > beforeCheckTimeSeconds && this._motionData.events[u].fireTime <= motionTimeSeconds) {\r\n        this._firedEventValues.push(this._motionData.events[u].value);\r\n      }\r\n    }\r\n    return this._firedEventValues;\r\n  }\r\n}\r\nclass Cubism4MotionManager extends MotionManager {\r\n  constructor(settings, options) {\r\n    var _a;\r\n    super(settings, options);\r\n    this.groups = { idle: \"Idle\" };\r\n    this.motionDataType = \"json\";\r\n    this.queueManager = new CubismMotionQueueManager();\r\n    this.definitions = (_a = settings.motions) != null ? _a : {};\r\n    this.eyeBlinkIds = settings.getEyeBlinkParameters() || [];\r\n    this.lipSyncIds = settings.getLipSyncParameters() || [];\r\n    this.init(options);\r\n  }\r\n  init(options) {\r\n    super.init(options);\r\n    if (this.settings.expressions) {\r\n      this.expressionManager = new Cubism4ExpressionManager(this.settings, options);\r\n    }\r\n    this.queueManager.setEventCallback((caller, eventValue, customData) => {\r\n      this.emit(\"motion:\" + eventValue);\r\n    });\r\n  }\r\n  isFinished() {\r\n    return this.queueManager.isFinished();\r\n  }\r\n  _startMotion(motion, onFinish) {\r\n    motion.setFinishedMotionHandler(onFinish);\r\n    this.queueManager.stopAllMotions();\r\n    return this.queueManager.startMotion(motion, false, performance.now());\r\n  }\r\n  _stopAllMotions() {\r\n    this.queueManager.stopAllMotions();\r\n  }\r\n  createMotion(data, group, definition) {\r\n    const motion = CubismMotion.create(data);\r\n    const json = new CubismMotionJson(data);\r\n    const defaultFadingDuration = (group === this.groups.idle ? config.idleMotionFadingDuration : config.motionFadingDuration) / 1e3;\r\n    if (json.getMotionFadeInTime() === void 0) {\r\n      motion.setFadeInTime(definition.FadeInTime > 0 ? definition.FadeInTime : defaultFadingDuration);\r\n    }\r\n    if (json.getMotionFadeOutTime() === void 0) {\r\n      motion.setFadeOutTime(definition.FadeOutTime > 0 ? definition.FadeOutTime : defaultFadingDuration);\r\n    }\r\n    motion.setEffectIds(this.eyeBlinkIds, this.lipSyncIds);\r\n    return motion;\r\n  }\r\n  getMotionFile(definition) {\r\n    return definition.File;\r\n  }\r\n  getMotionName(definition) {\r\n    return definition.File;\r\n  }\r\n  getSoundFile(definition) {\r\n    return definition.Sound;\r\n  }\r\n  updateParameters(model, now) {\r\n    return this.queueManager.doUpdateMotion(model, now);\r\n  }\r\n  destroy() {\r\n    super.destroy();\r\n    this.queueManager.release();\r\n    this.queueManager = void 0;\r\n  }\r\n}\r\nconst ParamAngleX = \"ParamAngleX\";\r\nconst ParamAngleY = \"ParamAngleY\";\r\nconst ParamAngleZ = \"ParamAngleZ\";\r\nconst ParamEyeBallX = \"ParamEyeBallX\";\r\nconst ParamEyeBallY = \"ParamEyeBallY\";\r\nconst ParamBodyAngleX = \"ParamBodyAngleX\";\r\nconst ParamBreath = \"ParamBreath\";\r\nclass CubismBreath {\r\n  constructor() {\r\n    this._breathParameters = [];\r\n    this._currentTime = 0;\r\n  }\r\n  static create() {\r\n    return new CubismBreath();\r\n  }\r\n  setParameters(breathParameters) {\r\n    this._breathParameters = breathParameters;\r\n  }\r\n  getParameters() {\r\n    return this._breathParameters;\r\n  }\r\n  updateParameters(model, deltaTimeSeconds) {\r\n    this._currentTime += deltaTimeSeconds;\r\n    const t = this._currentTime * 2 * 3.14159;\r\n    for (let i = 0; i < this._breathParameters.length; ++i) {\r\n      const data = this._breathParameters[i];\r\n      model.addParameterValueById(data.parameterId, data.offset + data.peak * Math.sin(t / data.cycle), data.weight);\r\n    }\r\n  }\r\n}\r\nclass BreathParameterData {\r\n  constructor(parameterId, offset, peak, cycle, weight) {\r\n    this.parameterId = parameterId == void 0 ? void 0 : parameterId;\r\n    this.offset = offset == void 0 ? 0 : offset;\r\n    this.peak = peak == void 0 ? 0 : peak;\r\n    this.cycle = cycle == void 0 ? 0 : cycle;\r\n    this.weight = weight == void 0 ? 0 : weight;\r\n  }\r\n}\r\nconst _CubismEyeBlink = class {\r\n  static create(modelSetting) {\r\n    return new _CubismEyeBlink(modelSetting);\r\n  }\r\n  setBlinkingInterval(blinkingInterval) {\r\n    this._blinkingIntervalSeconds = blinkingInterval;\r\n  }\r\n  setBlinkingSetting(closing, closed, opening) {\r\n    this._closingSeconds = closing;\r\n    this._closedSeconds = closed;\r\n    this._openingSeconds = opening;\r\n  }\r\n  setParameterIds(parameterIds) {\r\n    this._parameterIds = parameterIds;\r\n  }\r\n  getParameterIds() {\r\n    return this._parameterIds;\r\n  }\r\n  updateParameters(model, deltaTimeSeconds) {\r\n    this._userTimeSeconds += deltaTimeSeconds;\r\n    let parameterValue;\r\n    let t = 0;\r\n    switch (this._blinkingState) {\r\n      case EyeState.EyeState_Closing:\r\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closingSeconds;\r\n        if (t >= 1) {\r\n          t = 1;\r\n          this._blinkingState = EyeState.EyeState_Closed;\r\n          this._stateStartTimeSeconds = this._userTimeSeconds;\r\n        }\r\n        parameterValue = 1 - t;\r\n        break;\r\n      case EyeState.EyeState_Closed:\r\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closedSeconds;\r\n        if (t >= 1) {\r\n          this._blinkingState = EyeState.EyeState_Opening;\r\n          this._stateStartTimeSeconds = this._userTimeSeconds;\r\n        }\r\n        parameterValue = 0;\r\n        break;\r\n      case EyeState.EyeState_Opening:\r\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._openingSeconds;\r\n        if (t >= 1) {\r\n          t = 1;\r\n          this._blinkingState = EyeState.EyeState_Interval;\r\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n        }\r\n        parameterValue = t;\r\n        break;\r\n      case EyeState.EyeState_Interval:\r\n        if (this._nextBlinkingTime < this._userTimeSeconds) {\r\n          this._blinkingState = EyeState.EyeState_Closing;\r\n          this._stateStartTimeSeconds = this._userTimeSeconds;\r\n        }\r\n        parameterValue = 1;\r\n        break;\r\n      case EyeState.EyeState_First:\r\n      default:\r\n        this._blinkingState = EyeState.EyeState_Interval;\r\n        this._nextBlinkingTime = this.determinNextBlinkingTiming();\r\n        parameterValue = 1;\r\n        break;\r\n    }\r\n    if (!_CubismEyeBlink.CloseIfZero) {\r\n      parameterValue = -parameterValue;\r\n    }\r\n    for (let i = 0; i < this._parameterIds.length; ++i) {\r\n      model.setParameterValueById(this._parameterIds[i], parameterValue);\r\n    }\r\n  }\r\n  constructor(modelSetting) {\r\n    var _a, _b;\r\n    this._blinkingState = EyeState.EyeState_First;\r\n    this._nextBlinkingTime = 0;\r\n    this._stateStartTimeSeconds = 0;\r\n    this._blinkingIntervalSeconds = 4;\r\n    this._closingSeconds = 0.1;\r\n    this._closedSeconds = 0.05;\r\n    this._openingSeconds = 0.15;\r\n    this._userTimeSeconds = 0;\r\n    this._parameterIds = [];\r\n    if (modelSetting == null) {\r\n      return;\r\n    }\r\n    this._parameterIds = (_b = (_a = modelSetting.getEyeBlinkParameters()) == null ? void 0 : _a.slice()) != null ? _b : this._parameterIds;\r\n  }\r\n  determinNextBlinkingTiming() {\r\n    const r = Math.random();\r\n    return this._userTimeSeconds + r * (2 * this._blinkingIntervalSeconds - 1);\r\n  }\r\n};\r\nlet CubismEyeBlink = _CubismEyeBlink;\r\nCubismEyeBlink.CloseIfZero = true;\r\nvar EyeState = /* @__PURE__ */ ((EyeState2) => {\r\n  EyeState2[EyeState2[\"EyeState_First\"] = 0] = \"EyeState_First\";\r\n  EyeState2[EyeState2[\"EyeState_Interval\"] = 1] = \"EyeState_Interval\";\r\n  EyeState2[EyeState2[\"EyeState_Closing\"] = 2] = \"EyeState_Closing\";\r\n  EyeState2[EyeState2[\"EyeState_Closed\"] = 3] = \"EyeState_Closed\";\r\n  EyeState2[EyeState2[\"EyeState_Opening\"] = 4] = \"EyeState_Opening\";\r\n  return EyeState2;\r\n})(EyeState || {});\r\nclass csmRect {\r\n  constructor(x = 0, y = 0, w = 0, h = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = w;\r\n    this.height = h;\r\n  }\r\n  getCenterX() {\r\n    return this.x + 0.5 * this.width;\r\n  }\r\n  getCenterY() {\r\n    return this.y + 0.5 * this.height;\r\n  }\r\n  getRight() {\r\n    return this.x + this.width;\r\n  }\r\n  getBottom() {\r\n    return this.y + this.height;\r\n  }\r\n  setRect(r) {\r\n    this.x = r.x;\r\n    this.y = r.y;\r\n    this.width = r.width;\r\n    this.height = r.height;\r\n  }\r\n  expand(w, h) {\r\n    this.x -= w;\r\n    this.y -= h;\r\n    this.width += w * 2;\r\n    this.height += h * 2;\r\n  }\r\n}\r\nconst ColorChannelCount = 4;\r\nconst shaderCount = 10;\r\nlet s_instance;\r\nlet s_viewport;\r\nlet s_fbo;\r\nclass CubismClippingManager_WebGL {\r\n  getChannelFlagAsColor(channelNo) {\r\n    return this._channelColors[channelNo];\r\n  }\r\n  getMaskRenderTexture() {\r\n    let ret = 0;\r\n    if (this._maskTexture && this._maskTexture.texture != 0) {\r\n      this._maskTexture.frameNo = this._currentFrameNo;\r\n      ret = this._maskTexture.texture;\r\n    }\r\n    if (ret == 0) {\r\n      const size = this._clippingMaskBufferSize;\r\n      this._colorBuffer = this.gl.createTexture();\r\n      this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);\r\n      this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);\r\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\r\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\r\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\r\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\r\n      this.gl.bindTexture(this.gl.TEXTURE_2D, null);\r\n      ret = this.gl.createFramebuffer();\r\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);\r\n      this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);\r\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\r\n      this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);\r\n    }\r\n    return ret;\r\n  }\r\n  setGL(gl) {\r\n    this.gl = gl;\r\n  }\r\n  calcClippedDrawTotalBounds(model, clippingContext) {\r\n    let clippedDrawTotalMinX = Number.MAX_VALUE;\r\n    let clippedDrawTotalMinY = Number.MAX_VALUE;\r\n    let clippedDrawTotalMaxX = Number.MIN_VALUE;\r\n    let clippedDrawTotalMaxY = Number.MIN_VALUE;\r\n    const clippedDrawCount = clippingContext._clippedDrawableIndexList.length;\r\n    for (let clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {\r\n      const drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\r\n      const drawableVertexCount = model.getDrawableVertexCount(drawableIndex);\r\n      const drawableVertexes = model.getDrawableVertices(drawableIndex);\r\n      let minX = Number.MAX_VALUE;\r\n      let minY = Number.MAX_VALUE;\r\n      let maxX = Number.MIN_VALUE;\r\n      let maxY = Number.MIN_VALUE;\r\n      const loop = drawableVertexCount * Constant.vertexStep;\r\n      for (let pi = Constant.vertexOffset; pi < loop; pi += Constant.vertexStep) {\r\n        const x = drawableVertexes[pi];\r\n        const y = drawableVertexes[pi + 1];\r\n        if (x < minX) {\r\n          minX = x;\r\n        }\r\n        if (x > maxX) {\r\n          maxX = x;\r\n        }\r\n        if (y < minY) {\r\n          minY = y;\r\n        }\r\n        if (y > maxY) {\r\n          maxY = y;\r\n        }\r\n      }\r\n      if (minX == Number.MAX_VALUE) {\r\n        continue;\r\n      }\r\n      if (minX < clippedDrawTotalMinX) {\r\n        clippedDrawTotalMinX = minX;\r\n      }\r\n      if (minY < clippedDrawTotalMinY) {\r\n        clippedDrawTotalMinY = minY;\r\n      }\r\n      if (maxX > clippedDrawTotalMaxX) {\r\n        clippedDrawTotalMaxX = maxX;\r\n      }\r\n      if (maxY > clippedDrawTotalMaxY) {\r\n        clippedDrawTotalMaxY = maxY;\r\n      }\r\n      if (clippedDrawTotalMinX == Number.MAX_VALUE) {\r\n        clippingContext._allClippedDrawRect.x = 0;\r\n        clippingContext._allClippedDrawRect.y = 0;\r\n        clippingContext._allClippedDrawRect.width = 0;\r\n        clippingContext._allClippedDrawRect.height = 0;\r\n        clippingContext._isUsing = false;\r\n      } else {\r\n        clippingContext._isUsing = true;\r\n        const w = clippedDrawTotalMaxX - clippedDrawTotalMinX;\r\n        const h = clippedDrawTotalMaxY - clippedDrawTotalMinY;\r\n        clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\r\n        clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\r\n        clippingContext._allClippedDrawRect.width = w;\r\n        clippingContext._allClippedDrawRect.height = h;\r\n      }\r\n    }\r\n  }\r\n  constructor() {\r\n    this._maskRenderTexture = null;\r\n    this._colorBuffer = null;\r\n    this._currentFrameNo = 0;\r\n    this._clippingMaskBufferSize = 256;\r\n    this._clippingContextListForMask = [];\r\n    this._clippingContextListForDraw = [];\r\n    this._channelColors = [];\r\n    this._tmpBoundsOnModel = new csmRect();\r\n    this._tmpMatrix = new CubismMatrix44();\r\n    this._tmpMatrixForMask = new CubismMatrix44();\r\n    this._tmpMatrixForDraw = new CubismMatrix44();\r\n    let tmp = new CubismTextureColor();\r\n    tmp.R = 1;\r\n    tmp.G = 0;\r\n    tmp.B = 0;\r\n    tmp.A = 0;\r\n    this._channelColors.push(tmp);\r\n    tmp = new CubismTextureColor();\r\n    tmp.R = 0;\r\n    tmp.G = 1;\r\n    tmp.B = 0;\r\n    tmp.A = 0;\r\n    this._channelColors.push(tmp);\r\n    tmp = new CubismTextureColor();\r\n    tmp.R = 0;\r\n    tmp.G = 0;\r\n    tmp.B = 1;\r\n    tmp.A = 0;\r\n    this._channelColors.push(tmp);\r\n    tmp = new CubismTextureColor();\r\n    tmp.R = 0;\r\n    tmp.G = 0;\r\n    tmp.B = 0;\r\n    tmp.A = 1;\r\n    this._channelColors.push(tmp);\r\n  }\r\n  release() {\r\n    var _a, _b, _c;\r\n    const self = this;\r\n    for (let i = 0; i < this._clippingContextListForMask.length; i++) {\r\n      if (this._clippingContextListForMask[i]) {\r\n        (_a = this._clippingContextListForMask[i]) == null ? void 0 : _a.release();\r\n      }\r\n    }\r\n    self._clippingContextListForMask = void 0;\r\n    self._clippingContextListForDraw = void 0;\r\n    if (this._maskTexture) {\r\n      (_b = this.gl) == null ? void 0 : _b.deleteFramebuffer(this._maskTexture.texture);\r\n      self._maskTexture = void 0;\r\n    }\r\n    self._channelColors = void 0;\r\n    (_c = this.gl) == null ? void 0 : _c.deleteTexture(this._colorBuffer);\r\n    this._colorBuffer = null;\r\n  }\r\n  initialize(model, drawableCount, drawableMasks, drawableMaskCounts) {\r\n    for (let i = 0; i < drawableCount; i++) {\r\n      if (drawableMaskCounts[i] <= 0) {\r\n        this._clippingContextListForDraw.push(null);\r\n        continue;\r\n      }\r\n      let clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);\r\n      if (clippingContext == null) {\r\n        clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);\r\n        this._clippingContextListForMask.push(clippingContext);\r\n      }\r\n      clippingContext.addClippedDrawable(i);\r\n      this._clippingContextListForDraw.push(clippingContext);\r\n    }\r\n  }\r\n  setupClippingContext(model, renderer) {\r\n    this._currentFrameNo++;\r\n    let usingClipCount = 0;\r\n    for (let clipIndex = 0; clipIndex < this._clippingContextListForMask.length; clipIndex++) {\r\n      const cc = this._clippingContextListForMask[clipIndex];\r\n      this.calcClippedDrawTotalBounds(model, cc);\r\n      if (cc._isUsing) {\r\n        usingClipCount++;\r\n      }\r\n    }\r\n    if (usingClipCount > 0) {\r\n      this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);\r\n      this._maskRenderTexture = this.getMaskRenderTexture();\r\n      renderer.getMvpMatrix();\r\n      renderer.preDraw();\r\n      this.setupLayoutBounds(usingClipCount);\r\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);\r\n      this.gl.clearColor(1, 1, 1, 1);\r\n      this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n      for (let clipIndex = 0; clipIndex < this._clippingContextListForMask.length; clipIndex++) {\r\n        const clipContext = this._clippingContextListForMask[clipIndex];\r\n        const allClipedDrawRect = clipContext._allClippedDrawRect;\r\n        const layoutBoundsOnTex01 = clipContext._layoutBounds;\r\n        const MARGIN = 0.05;\r\n        this._tmpBoundsOnModel.setRect(allClipedDrawRect);\r\n        this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);\r\n        const scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\r\n        const scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\r\n        {\r\n          this._tmpMatrix.loadIdentity();\r\n          {\r\n            this._tmpMatrix.translateRelative(-1, -1);\r\n            this._tmpMatrix.scaleRelative(2, 2);\r\n          }\r\n          {\r\n            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\r\n            this._tmpMatrix.scaleRelative(scaleX, scaleY);\r\n            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\r\n          }\r\n          this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\r\n        }\r\n        {\r\n          this._tmpMatrix.loadIdentity();\r\n          {\r\n            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\r\n            this._tmpMatrix.scaleRelative(scaleX, scaleY);\r\n            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\r\n          }\r\n          this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\r\n        }\r\n        clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\r\n        clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\r\n        const clipDrawCount = clipContext._clippingIdCount;\r\n        for (let i = 0; i < clipDrawCount; i++) {\r\n          const clipDrawIndex = clipContext._clippingIdList[i];\r\n          if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {\r\n            continue;\r\n          }\r\n          renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);\r\n          renderer.setClippingContextBufferForMask(clipContext);\r\n          renderer.drawMesh(model.getDrawableTextureIndices(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), CubismBlendMode.CubismBlendMode_Normal, false);\r\n        }\r\n      }\r\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\r\n      renderer.setClippingContextBufferForMask(null);\r\n      this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);\r\n    }\r\n  }\r\n  findSameClip(drawableMasks, drawableMaskCounts) {\r\n    for (let i = 0; i < this._clippingContextListForMask.length; i++) {\r\n      const clippingContext = this._clippingContextListForMask[i];\r\n      const count = clippingContext._clippingIdCount;\r\n      if (count != drawableMaskCounts) {\r\n        continue;\r\n      }\r\n      let sameCount = 0;\r\n      for (let j = 0; j < count; j++) {\r\n        const clipId = clippingContext._clippingIdList[j];\r\n        for (let k = 0; k < count; k++) {\r\n          if (drawableMasks[k] == clipId) {\r\n            sameCount++;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (sameCount == count) {\r\n        return clippingContext;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n  setupLayoutBounds(usingClipCount) {\r\n    let div = usingClipCount / ColorChannelCount;\r\n    let mod = usingClipCount % ColorChannelCount;\r\n    div = ~~div;\r\n    mod = ~~mod;\r\n    let curClipIndex = 0;\r\n    for (let channelNo = 0; channelNo < ColorChannelCount; channelNo++) {\r\n      const layoutCount = div + (channelNo < mod ? 1 : 0);\r\n      if (layoutCount == 0)\r\n        ;\r\n      else if (layoutCount == 1) {\r\n        const clipContext = this._clippingContextListForMask[curClipIndex++];\r\n        clipContext._layoutChannelNo = channelNo;\r\n        clipContext._layoutBounds.x = 0;\r\n        clipContext._layoutBounds.y = 0;\r\n        clipContext._layoutBounds.width = 1;\r\n        clipContext._layoutBounds.height = 1;\r\n      } else if (layoutCount == 2) {\r\n        for (let i = 0; i < layoutCount; i++) {\r\n          let xpos = i % 2;\r\n          xpos = ~~xpos;\r\n          const cc = this._clippingContextListForMask[curClipIndex++];\r\n          cc._layoutChannelNo = channelNo;\r\n          cc._layoutBounds.x = xpos * 0.5;\r\n          cc._layoutBounds.y = 0;\r\n          cc._layoutBounds.width = 0.5;\r\n          cc._layoutBounds.height = 1;\r\n        }\r\n      } else if (layoutCount <= 4) {\r\n        for (let i = 0; i < layoutCount; i++) {\r\n          let xpos = i % 2;\r\n          let ypos = i / 2;\r\n          xpos = ~~xpos;\r\n          ypos = ~~ypos;\r\n          const cc = this._clippingContextListForMask[curClipIndex++];\r\n          cc._layoutChannelNo = channelNo;\r\n          cc._layoutBounds.x = xpos * 0.5;\r\n          cc._layoutBounds.y = ypos * 0.5;\r\n          cc._layoutBounds.width = 0.5;\r\n          cc._layoutBounds.height = 0.5;\r\n        }\r\n      } else if (layoutCount <= 9) {\r\n        for (let i = 0; i < layoutCount; i++) {\r\n          let xpos = i % 3;\r\n          let ypos = i / 3;\r\n          xpos = ~~xpos;\r\n          ypos = ~~ypos;\r\n          const cc = this._clippingContextListForMask[curClipIndex++];\r\n          cc._layoutChannelNo = channelNo;\r\n          cc._layoutBounds.x = xpos / 3;\r\n          cc._layoutBounds.y = ypos / 3;\r\n          cc._layoutBounds.width = 1 / 3;\r\n          cc._layoutBounds.height = 1 / 3;\r\n        }\r\n      } else if (CubismConfig.supportMoreMaskDivisions && layoutCount <= 16) {\r\n        for (let i = 0; i < layoutCount; i++) {\r\n          let xpos = i % 4;\r\n          let ypos = i / 4;\r\n          xpos = ~~xpos;\r\n          ypos = ~~ypos;\r\n          const cc = this._clippingContextListForMask[curClipIndex++];\r\n          cc._layoutChannelNo = channelNo;\r\n          cc._layoutBounds.x = xpos / 4;\r\n          cc._layoutBounds.y = ypos / 4;\r\n          cc._layoutBounds.width = 1 / 4;\r\n          cc._layoutBounds.height = 1 / 4;\r\n        }\r\n      } else {\r\n        CubismLogError(\"not supported mask count : {0}\", layoutCount);\r\n      }\r\n    }\r\n  }\r\n  getColorBuffer() {\r\n    return this._colorBuffer;\r\n  }\r\n  getClippingContextListForDraw() {\r\n    return this._clippingContextListForDraw;\r\n  }\r\n  setClippingMaskBufferSize(size) {\r\n    this._clippingMaskBufferSize = size;\r\n  }\r\n  getClippingMaskBufferSize() {\r\n    return this._clippingMaskBufferSize;\r\n  }\r\n}\r\nclass CubismRenderTextureResource {\r\n  constructor(frameNo, texture) {\r\n    this.frameNo = frameNo;\r\n    this.texture = texture;\r\n  }\r\n}\r\nclass CubismClippingContext {\r\n  constructor(manager, clippingDrawableIndices, clipCount) {\r\n    this._isUsing = false;\r\n    this._owner = manager;\r\n    this._clippingIdList = clippingDrawableIndices;\r\n    this._clippingIdCount = clipCount;\r\n    this._allClippedDrawRect = new csmRect();\r\n    this._layoutBounds = new csmRect();\r\n    this._clippedDrawableIndexList = [];\r\n    this._matrixForMask = new CubismMatrix44();\r\n    this._matrixForDraw = new CubismMatrix44();\r\n  }\r\n  release() {\r\n    const self = this;\r\n    self._layoutBounds = void 0;\r\n    self._allClippedDrawRect = void 0;\r\n    self._clippedDrawableIndexList = void 0;\r\n  }\r\n  addClippedDrawable(drawableIndex) {\r\n    this._clippedDrawableIndexList.push(drawableIndex);\r\n  }\r\n  getClippingManager() {\r\n    return this._owner;\r\n  }\r\n  setGl(gl) {\r\n    this._owner.setGL(gl);\r\n  }\r\n}\r\nclass CubismShader_WebGL {\r\n  static getInstance() {\r\n    if (s_instance == null) {\r\n      s_instance = new CubismShader_WebGL();\r\n      return s_instance;\r\n    }\r\n    return s_instance;\r\n  }\r\n  static deleteInstance() {\r\n    if (s_instance) {\r\n      s_instance.release();\r\n      s_instance = void 0;\r\n    }\r\n  }\r\n  constructor() {\r\n    this._shaderSets = [];\r\n  }\r\n  release() {\r\n    this.releaseShaderProgram();\r\n  }\r\n  setupShaderProgram(renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, isPremultipliedAlpha, matrix4x4, invertedMask) {\r\n    if (!isPremultipliedAlpha) {\r\n      CubismLogError(\"NoPremultipliedAlpha is not allowed\");\r\n    }\r\n    if (this._shaderSets.length == 0) {\r\n      this.generateShaders();\r\n    }\r\n    let SRC_COLOR;\r\n    let DST_COLOR;\r\n    let SRC_ALPHA;\r\n    let DST_ALPHA;\r\n    const clippingContextBufferForMask = renderer.getClippingContextBufferForMask();\r\n    if (clippingContextBufferForMask != null) {\r\n      const shaderSet = this._shaderSets[ShaderNames.ShaderNames_SetupMask];\r\n      this.gl.useProgram(shaderSet.shaderProgram);\r\n      this.gl.activeTexture(this.gl.TEXTURE0);\r\n      this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n      this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n      if (bufferData.vertex == null) {\r\n        bufferData.vertex = this.gl.createBuffer();\r\n      }\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\r\n      this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n      this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n      if (bufferData.uv == null) {\r\n        bufferData.uv = this.gl.createBuffer();\r\n      }\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n      this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n      this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n      const channelNo = clippingContextBufferForMask._layoutChannelNo;\r\n      const colorChannel = clippingContextBufferForMask.getClippingManager().getChannelFlagAsColor(channelNo);\r\n      this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\r\n      this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, clippingContextBufferForMask._matrixForMask.getArray());\r\n      const rect = clippingContextBufferForMask._layoutBounds;\r\n      this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2 - 1, rect.y * 2 - 1, rect.getRight() * 2 - 1, rect.getBottom() * 2 - 1);\r\n      SRC_COLOR = this.gl.ZERO;\r\n      DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;\r\n      SRC_ALPHA = this.gl.ZERO;\r\n      DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n    } else {\r\n      const clippingContextBufferForDraw = renderer.getClippingContextBufferForDraw();\r\n      const masked = clippingContextBufferForDraw != null;\r\n      const offset = masked ? invertedMask ? 2 : 1 : 0;\r\n      let shaderSet;\r\n      switch (colorBlendMode) {\r\n        case CubismBlendMode.CubismBlendMode_Normal:\r\n        default:\r\n          shaderSet = this._shaderSets[ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset];\r\n          SRC_COLOR = this.gl.ONE;\r\n          DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n          SRC_ALPHA = this.gl.ONE;\r\n          DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\r\n          break;\r\n        case CubismBlendMode.CubismBlendMode_Additive:\r\n          shaderSet = this._shaderSets[ShaderNames.ShaderNames_AddPremultipliedAlpha + offset];\r\n          SRC_COLOR = this.gl.ONE;\r\n          DST_COLOR = this.gl.ONE;\r\n          SRC_ALPHA = this.gl.ZERO;\r\n          DST_ALPHA = this.gl.ONE;\r\n          break;\r\n        case CubismBlendMode.CubismBlendMode_Multiplicative:\r\n          shaderSet = this._shaderSets[ShaderNames.ShaderNames_MultPremultipliedAlpha + offset];\r\n          SRC_COLOR = this.gl.DST_COLOR;\r\n          DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\r\n          SRC_ALPHA = this.gl.ZERO;\r\n          DST_ALPHA = this.gl.ONE;\r\n          break;\r\n      }\r\n      this.gl.useProgram(shaderSet.shaderProgram);\r\n      if (bufferData.vertex == null) {\r\n        bufferData.vertex = this.gl.createBuffer();\r\n      }\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\r\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\r\n      this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\r\n      this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n      if (bufferData.uv == null) {\r\n        bufferData.uv = this.gl.createBuffer();\r\n      }\r\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\r\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\r\n      this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\r\n      this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\r\n      if (clippingContextBufferForDraw != null) {\r\n        this.gl.activeTexture(this.gl.TEXTURE1);\r\n        const tex = clippingContextBufferForDraw.getClippingManager().getColorBuffer();\r\n        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\r\n        this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\r\n        this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, clippingContextBufferForDraw._matrixForDraw.getArray());\r\n        const channelNo = clippingContextBufferForDraw._layoutChannelNo;\r\n        const colorChannel = clippingContextBufferForDraw.getClippingManager().getChannelFlagAsColor(channelNo);\r\n        this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\r\n      }\r\n      this.gl.activeTexture(this.gl.TEXTURE0);\r\n      this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\r\n      this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\r\n      this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());\r\n      this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);\r\n    }\r\n    if (bufferData.index == null) {\r\n      bufferData.index = this.gl.createBuffer();\r\n    }\r\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);\r\n    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);\r\n    this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);\r\n  }\r\n  releaseShaderProgram() {\r\n    for (let i = 0; i < this._shaderSets.length; i++) {\r\n      this.gl.deleteProgram(this._shaderSets[i].shaderProgram);\r\n      this._shaderSets[i].shaderProgram = 0;\r\n    }\r\n    this._shaderSets = [];\r\n  }\r\n  generateShaders() {\r\n    for (let i = 0; i < shaderCount; i++) {\r\n      this._shaderSets.push({});\r\n    }\r\n    this._shaderSets[0].shaderProgram = this.loadShaderProgram(vertexShaderSrcSetupMask, fragmentShaderSrcsetupMask);\r\n    this._shaderSets[1].shaderProgram = this.loadShaderProgram(vertexShaderSrc, fragmentShaderSrcPremultipliedAlpha);\r\n    this._shaderSets[2].shaderProgram = this.loadShaderProgram(vertexShaderSrcMasked, fragmentShaderSrcMaskPremultipliedAlpha);\r\n    this._shaderSets[3].shaderProgram = this.loadShaderProgram(vertexShaderSrcMasked, fragmentShaderSrcMaskInvertedPremultipliedAlpha);\r\n    this._shaderSets[4].shaderProgram = this._shaderSets[1].shaderProgram;\r\n    this._shaderSets[5].shaderProgram = this._shaderSets[2].shaderProgram;\r\n    this._shaderSets[6].shaderProgram = this._shaderSets[3].shaderProgram;\r\n    this._shaderSets[7].shaderProgram = this._shaderSets[1].shaderProgram;\r\n    this._shaderSets[8].shaderProgram = this._shaderSets[2].shaderProgram;\r\n    this._shaderSets[9].shaderProgram = this._shaderSets[3].shaderProgram;\r\n    this._shaderSets[0].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[0].shaderProgram, \"a_position\");\r\n    this._shaderSets[0].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[0].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[0].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[0].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[0].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[0].shaderProgram, \"u_clipMatrix\");\r\n    this._shaderSets[0].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[0].shaderProgram, \"u_channelFlag\");\r\n    this._shaderSets[0].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[0].shaderProgram, \"u_baseColor\");\r\n    this._shaderSets[1].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[1].shaderProgram, \"a_position\");\r\n    this._shaderSets[1].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[1].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[1].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[1].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[1].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[1].shaderProgram, \"u_matrix\");\r\n    this._shaderSets[1].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[1].shaderProgram, \"u_baseColor\");\r\n    this._shaderSets[2].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[2].shaderProgram, \"a_position\");\r\n    this._shaderSets[2].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[2].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[2].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[2].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"s_texture1\");\r\n    this._shaderSets[2].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"u_matrix\");\r\n    this._shaderSets[2].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"u_clipMatrix\");\r\n    this._shaderSets[2].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"u_channelFlag\");\r\n    this._shaderSets[2].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"u_baseColor\");\r\n    this._shaderSets[3].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[3].shaderProgram, \"a_position\");\r\n    this._shaderSets[3].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[3].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[3].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[3].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"s_texture1\");\r\n    this._shaderSets[3].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"u_matrix\");\r\n    this._shaderSets[3].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"u_clipMatrix\");\r\n    this._shaderSets[3].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"u_channelFlag\");\r\n    this._shaderSets[3].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"u_baseColor\");\r\n    this._shaderSets[4].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[4].shaderProgram, \"a_position\");\r\n    this._shaderSets[4].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[4].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[4].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[4].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[4].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[4].shaderProgram, \"u_matrix\");\r\n    this._shaderSets[4].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[4].shaderProgram, \"u_baseColor\");\r\n    this._shaderSets[5].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[5].shaderProgram, \"a_position\");\r\n    this._shaderSets[5].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[5].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[5].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[5].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"s_texture1\");\r\n    this._shaderSets[5].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"u_matrix\");\r\n    this._shaderSets[5].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"u_clipMatrix\");\r\n    this._shaderSets[5].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"u_channelFlag\");\r\n    this._shaderSets[5].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"u_baseColor\");\r\n    this._shaderSets[6].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[6].shaderProgram, \"a_position\");\r\n    this._shaderSets[6].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[6].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[6].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[6].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"s_texture1\");\r\n    this._shaderSets[6].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"u_matrix\");\r\n    this._shaderSets[6].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"u_clipMatrix\");\r\n    this._shaderSets[6].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"u_channelFlag\");\r\n    this._shaderSets[6].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"u_baseColor\");\r\n    this._shaderSets[7].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[7].shaderProgram, \"a_position\");\r\n    this._shaderSets[7].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[7].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[7].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[7].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[7].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[7].shaderProgram, \"u_matrix\");\r\n    this._shaderSets[7].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[7].shaderProgram, \"u_baseColor\");\r\n    this._shaderSets[8].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[8].shaderProgram, \"a_position\");\r\n    this._shaderSets[8].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[8].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[8].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[8].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"s_texture1\");\r\n    this._shaderSets[8].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"u_matrix\");\r\n    this._shaderSets[8].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"u_clipMatrix\");\r\n    this._shaderSets[8].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"u_channelFlag\");\r\n    this._shaderSets[8].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"u_baseColor\");\r\n    this._shaderSets[9].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[9].shaderProgram, \"a_position\");\r\n    this._shaderSets[9].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[9].shaderProgram, \"a_texCoord\");\r\n    this._shaderSets[9].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"s_texture0\");\r\n    this._shaderSets[9].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"s_texture1\");\r\n    this._shaderSets[9].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"u_matrix\");\r\n    this._shaderSets[9].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"u_clipMatrix\");\r\n    this._shaderSets[9].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"u_channelFlag\");\r\n    this._shaderSets[9].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"u_baseColor\");\r\n  }\r\n  loadShaderProgram(vertexShaderSource, fragmentShaderSource) {\r\n    let shaderProgram = this.gl.createProgram();\r\n    let vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);\r\n    if (!vertShader) {\r\n      CubismLogError(\"Vertex shader compile error!\");\r\n      return 0;\r\n    }\r\n    let fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);\r\n    if (!fragShader) {\r\n      CubismLogError(\"Vertex shader compile error!\");\r\n      return 0;\r\n    }\r\n    this.gl.attachShader(shaderProgram, vertShader);\r\n    this.gl.attachShader(shaderProgram, fragShader);\r\n    this.gl.linkProgram(shaderProgram);\r\n    const linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);\r\n    if (!linkStatus) {\r\n      CubismLogError(\"Failed to link program: {0}\", shaderProgram);\r\n      this.gl.deleteShader(vertShader);\r\n      this.gl.deleteShader(fragShader);\r\n      if (shaderProgram) {\r\n        this.gl.deleteProgram(shaderProgram);\r\n      }\r\n      return 0;\r\n    }\r\n    this.gl.deleteShader(vertShader);\r\n    this.gl.deleteShader(fragShader);\r\n    return shaderProgram;\r\n  }\r\n  compileShaderSource(shaderType, shaderSource) {\r\n    const source = shaderSource;\r\n    const shader = this.gl.createShader(shaderType);\r\n    this.gl.shaderSource(shader, source);\r\n    this.gl.compileShader(shader);\r\n    if (!shader) {\r\n      const log = this.gl.getShaderInfoLog(shader);\r\n      CubismLogError(\"Shader compile log: {0} \", log);\r\n    }\r\n    const status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\r\n    if (!status) {\r\n      this.gl.deleteShader(shader);\r\n      return null;\r\n    }\r\n    return shader;\r\n  }\r\n  setGl(gl) {\r\n    this.gl = gl;\r\n  }\r\n}\r\nvar ShaderNames = /* @__PURE__ */ ((ShaderNames2) => {\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_SetupMask\"] = 0] = \"ShaderNames_SetupMask\";\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_NormalPremultipliedAlpha\"] = 1] = \"ShaderNames_NormalPremultipliedAlpha\";\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_NormalMaskedPremultipliedAlpha\"] = 2] = \"ShaderNames_NormalMaskedPremultipliedAlpha\";\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\"] = 3] = \"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\";\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_AddPremultipliedAlpha\"] = 4] = \"ShaderNames_AddPremultipliedAlpha\";\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_AddMaskedPremultipliedAlpha\"] = 5] = \"ShaderNames_AddMaskedPremultipliedAlpha\";\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_AddMaskedPremultipliedAlphaInverted\"] = 6] = \"ShaderNames_AddMaskedPremultipliedAlphaInverted\";\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_MultPremultipliedAlpha\"] = 7] = \"ShaderNames_MultPremultipliedAlpha\";\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_MultMaskedPremultipliedAlpha\"] = 8] = \"ShaderNames_MultMaskedPremultipliedAlpha\";\r\n  ShaderNames2[ShaderNames2[\"ShaderNames_MultMaskedPremultipliedAlphaInverted\"] = 9] = \"ShaderNames_MultMaskedPremultipliedAlphaInverted\";\r\n  return ShaderNames2;\r\n})(ShaderNames || {});\r\nconst vertexShaderSrcSetupMask = \"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}\";\r\nconst fragmentShaderSrcsetupMask = \"precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}\";\r\nconst vertexShaderSrc = \"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}\";\r\nconst vertexShaderSrcMasked = \"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}\";\r\nconst fragmentShaderSrcPremultipliedAlpha = \"precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;void main(){   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;}\";\r\nconst fragmentShaderSrcMaskPremultipliedAlpha = \"precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;void main(){   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}\";\r\nconst fragmentShaderSrcMaskInvertedPremultipliedAlpha = \"precision mediump float;varying vec2 v_texCoord;varying vec4 v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4 u_channelFlag;uniform vec4 u_baseColor;void main(){vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;col_formask = col_formask * (1.0 - maskVal);gl_FragColor = col_formask;}\";\r\nclass CubismRenderer_WebGL extends CubismRenderer {\r\n  constructor() {\r\n    super();\r\n    this._clippingContextBufferForMask = null;\r\n    this._clippingContextBufferForDraw = null;\r\n    this._clippingManager = new CubismClippingManager_WebGL();\r\n    this.firstDraw = true;\r\n    this._textures = {};\r\n    this._sortedDrawableIndexList = [];\r\n    this._bufferData = {\r\n      vertex: null,\r\n      uv: null,\r\n      index: null\r\n    };\r\n  }\r\n  initialize(model) {\r\n    if (model.isUsingMasking()) {\r\n      this._clippingManager = new CubismClippingManager_WebGL();\r\n      this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());\r\n    }\r\n    for (let i = model.getDrawableCount() - 1; i >= 0; i--) {\r\n      this._sortedDrawableIndexList[i] = 0;\r\n    }\r\n    super.initialize(model);\r\n  }\r\n  bindTexture(modelTextureNo, glTexture) {\r\n    this._textures[modelTextureNo] = glTexture;\r\n  }\r\n  getBindedTextures() {\r\n    return this._textures;\r\n  }\r\n  setClippingMaskBufferSize(size) {\r\n    this._clippingManager.release();\r\n    this._clippingManager = new CubismClippingManager_WebGL();\r\n    this._clippingManager.setClippingMaskBufferSize(size);\r\n    this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());\r\n  }\r\n  getClippingMaskBufferSize() {\r\n    return this._clippingManager.getClippingMaskBufferSize();\r\n  }\r\n  release() {\r\n    var _a, _b, _c;\r\n    const self = this;\r\n    this._clippingManager.release();\r\n    self._clippingManager = void 0;\r\n    (_a = this.gl) == null ? void 0 : _a.deleteBuffer(this._bufferData.vertex);\r\n    this._bufferData.vertex = null;\r\n    (_b = this.gl) == null ? void 0 : _b.deleteBuffer(this._bufferData.uv);\r\n    this._bufferData.uv = null;\r\n    (_c = this.gl) == null ? void 0 : _c.deleteBuffer(this._bufferData.index);\r\n    this._bufferData.index = null;\r\n    self._bufferData = void 0;\r\n    self._textures = void 0;\r\n  }\r\n  doDrawModel() {\r\n    this.preDraw();\r\n    if (this._clippingManager != null) {\r\n      this._clippingManager.setupClippingContext(this.getModel(), this);\r\n    }\r\n    const drawableCount = this.getModel().getDrawableCount();\r\n    const renderOrder = this.getModel().getDrawableRenderOrders();\r\n    for (let i = 0; i < drawableCount; ++i) {\r\n      const order = renderOrder[i];\r\n      this._sortedDrawableIndexList[order] = i;\r\n    }\r\n    for (let i = 0; i < drawableCount; ++i) {\r\n      const drawableIndex = this._sortedDrawableIndexList[i];\r\n      if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\r\n        continue;\r\n      }\r\n      this.setClippingContextBufferForDraw(this._clippingManager != null ? this._clippingManager.getClippingContextListForDraw()[drawableIndex] : null);\r\n      this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\r\n      this.drawMesh(this.getModel().getDrawableTextureIndices(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));\r\n    }\r\n  }\r\n  drawMesh(textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, opacity, colorBlendMode, invertedMask) {\r\n    if (this.isCulling()) {\r\n      this.gl.enable(this.gl.CULL_FACE);\r\n    } else {\r\n      this.gl.disable(this.gl.CULL_FACE);\r\n    }\r\n    this.gl.frontFace(this.gl.CCW);\r\n    const modelColorRGBA = this.getModelColor();\r\n    if (this.getClippingContextBufferForMask() == null) {\r\n      modelColorRGBA.A *= opacity;\r\n      if (this.isPremultipliedAlpha()) {\r\n        modelColorRGBA.R *= modelColorRGBA.A;\r\n        modelColorRGBA.G *= modelColorRGBA.A;\r\n        modelColorRGBA.B *= modelColorRGBA.A;\r\n      }\r\n    }\r\n    let drawtexture = null;\r\n    if (this._textures[textureNo] != null) {\r\n      drawtexture = this._textures[textureNo];\r\n    }\r\n    CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);\r\n    this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);\r\n    this.gl.useProgram(null);\r\n    this.setClippingContextBufferForDraw(null);\r\n    this.setClippingContextBufferForMask(null);\r\n  }\r\n  static doStaticRelease() {\r\n    CubismShader_WebGL.deleteInstance();\r\n  }\r\n  setRenderState(fbo, viewport) {\r\n    s_fbo = fbo;\r\n    s_viewport = viewport;\r\n  }\r\n  preDraw() {\r\n    if (this.firstDraw) {\r\n      this.firstDraw = false;\r\n      this._anisortopy = this.gl.getExtension(\"EXT_texture_filter_anisotropic\") || this.gl.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\") || this.gl.getExtension(\"MOZ_EXT_texture_filter_anisotropic\");\r\n    }\r\n    this.gl.disable(this.gl.SCISSOR_TEST);\r\n    this.gl.disable(this.gl.STENCIL_TEST);\r\n    this.gl.disable(this.gl.DEPTH_TEST);\r\n    this.gl.frontFace(this.gl.CW);\r\n    this.gl.enable(this.gl.BLEND);\r\n    this.gl.colorMask(true, true, true, true);\r\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\r\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\r\n  }\r\n  setClippingContextBufferForMask(clip) {\r\n    this._clippingContextBufferForMask = clip;\r\n  }\r\n  getClippingContextBufferForMask() {\r\n    return this._clippingContextBufferForMask;\r\n  }\r\n  setClippingContextBufferForDraw(clip) {\r\n    this._clippingContextBufferForDraw = clip;\r\n  }\r\n  getClippingContextBufferForDraw() {\r\n    return this._clippingContextBufferForDraw;\r\n  }\r\n  startUp(gl) {\r\n    this.gl = gl;\r\n    this._clippingManager.setGL(gl);\r\n    CubismShader_WebGL.getInstance().setGl(gl);\r\n  }\r\n}\r\nCubismRenderer.staticRelease = () => {\r\n  CubismRenderer_WebGL.doStaticRelease();\r\n};\r\nconst tempMatrix = new CubismMatrix44();\r\nclass Cubism4InternalModel extends InternalModel {\r\n  constructor(coreModel, settings, options) {\r\n    super();\r\n    this.lipSync = true;\r\n    this.breath = CubismBreath.create();\r\n    this.renderer = new CubismRenderer_WebGL();\r\n    this.idParamAngleX = ParamAngleX;\r\n    this.idParamAngleY = ParamAngleY;\r\n    this.idParamAngleZ = ParamAngleZ;\r\n    this.idParamEyeBallX = ParamEyeBallX;\r\n    this.idParamEyeBallY = ParamEyeBallY;\r\n    this.idParamBodyAngleX = ParamBodyAngleX;\r\n    this.idParamBreath = ParamBreath;\r\n    this.pixelsPerUnit = 1;\r\n    this.centeringTransform = new Matrix();\r\n    this.coreModel = coreModel;\r\n    this.settings = settings;\r\n    this.motionManager = new Cubism4MotionManager(settings, options);\r\n    this.init();\r\n  }\r\n  init() {\r\n    var _a;\r\n    super.init();\r\n    if (((_a = this.settings.getEyeBlinkParameters()) == null ? void 0 : _a.length) > 0) {\r\n      this.eyeBlink = CubismEyeBlink.create(this.settings);\r\n    }\r\n    this.breath.setParameters([\r\n      new BreathParameterData(this.idParamAngleX, 0, 15, 6.5345, 0.5),\r\n      new BreathParameterData(this.idParamAngleY, 0, 8, 3.5345, 0.5),\r\n      new BreathParameterData(this.idParamAngleZ, 0, 10, 5.5345, 0.5),\r\n      new BreathParameterData(this.idParamBodyAngleX, 0, 4, 15.5345, 0.5),\r\n      new BreathParameterData(this.idParamBreath, 0, 0.5, 3.2345, 0.5)\r\n    ]);\r\n    this.renderer.initialize(this.coreModel);\r\n    this.renderer.setIsPremultipliedAlpha(true);\r\n  }\r\n  getSize() {\r\n    return [this.coreModel.getModel().canvasinfo.CanvasWidth, this.coreModel.getModel().canvasinfo.CanvasHeight];\r\n  }\r\n  getLayout() {\r\n    const layout = {};\r\n    if (this.settings.layout) {\r\n      for (const key of Object.keys(this.settings.layout)) {\r\n        const commonKey = key.charAt(0).toLowerCase() + key.slice(1);\r\n        layout[commonKey] = this.settings.layout[key];\r\n      }\r\n    }\r\n    return layout;\r\n  }\r\n  setupLayout() {\r\n    super.setupLayout();\r\n    this.pixelsPerUnit = this.coreModel.getModel().canvasinfo.PixelsPerUnit;\r\n    this.centeringTransform.scale(this.pixelsPerUnit, this.pixelsPerUnit).translate(this.originalWidth / 2, this.originalHeight / 2);\r\n  }\r\n  updateWebGLContext(gl, glContextID) {\r\n    this.renderer.firstDraw = true;\r\n    this.renderer._bufferData = {\r\n      vertex: null,\r\n      uv: null,\r\n      index: null\r\n    };\r\n    this.renderer.startUp(gl);\r\n    this.renderer._clippingManager._currentFrameNo = glContextID;\r\n    this.renderer._clippingManager._maskTexture = void 0;\r\n    CubismShader_WebGL.getInstance()._shaderSets = [];\r\n  }\r\n  bindTexture(index, texture) {\r\n    this.renderer.bindTexture(index, texture);\r\n  }\r\n  getHitAreaDefs() {\r\n    var _a, _b;\r\n    return (_b = (_a = this.settings.hitAreas) == null ? void 0 : _a.map((hitArea) => ({\r\n      id: hitArea.Id,\r\n      name: hitArea.Name,\r\n      index: this.coreModel.getDrawableIndex(hitArea.Id)\r\n    }))) != null ? _b : [];\r\n  }\r\n  getDrawableIDs() {\r\n    return this.coreModel.getDrawableIds();\r\n  }\r\n  getDrawableIndex(id) {\r\n    return this.coreModel.getDrawableIndex(id);\r\n  }\r\n  getDrawableVertices(drawIndex) {\r\n    if (typeof drawIndex === \"string\") {\r\n      drawIndex = this.coreModel.getDrawableIndex(drawIndex);\r\n      if (drawIndex === -1)\r\n        throw new TypeError(\"Unable to find drawable ID: \" + drawIndex);\r\n    }\r\n    const arr = this.coreModel.getDrawableVertices(drawIndex).slice();\r\n    for (let i = 0; i < arr.length; i += 2) {\r\n      arr[i] = arr[i] * this.pixelsPerUnit + this.originalWidth / 2;\r\n      arr[i + 1] = -arr[i + 1] * this.pixelsPerUnit + this.originalHeight / 2;\r\n    }\r\n    return arr;\r\n  }\r\n  updateTransform(transform) {\r\n    this.drawingMatrix.copyFrom(this.centeringTransform).prepend(this.localTransform).prepend(transform);\r\n  }\r\n  update(dt, now) {\r\n    var _a, _b, _c, _d;\r\n    super.update(dt, now);\r\n    dt /= 1e3;\r\n    now /= 1e3;\r\n    const model = this.coreModel;\r\n    this.emit(\"beforeMotionUpdate\");\r\n    const motionUpdated = this.motionManager.update(this.coreModel, now);\r\n    this.emit(\"afterMotionUpdate\");\r\n    model.saveParameters();\r\n    (_a = this.motionManager.expressionManager) == null ? void 0 : _a.update(model, now);\r\n    if (!motionUpdated) {\r\n      (_b = this.eyeBlink) == null ? void 0 : _b.updateParameters(model, dt);\r\n    }\r\n    this.updateFocus();\r\n    this.updateNaturalMovements(dt * 1e3, now * 1e3);\r\n    (_c = this.physics) == null ? void 0 : _c.evaluate(model, dt);\r\n    (_d = this.pose) == null ? void 0 : _d.updateParameters(model, dt);\r\n    this.emit(\"beforeModelUpdate\");\r\n    model.update();\r\n    model.loadParameters();\r\n  }\r\n  updateFocus() {\r\n    this.coreModel.addParameterValueById(this.idParamEyeBallX, this.focusController.x);\r\n    this.coreModel.addParameterValueById(this.idParamEyeBallY, this.focusController.y);\r\n    this.coreModel.addParameterValueById(this.idParamAngleX, this.focusController.x * 30);\r\n    this.coreModel.addParameterValueById(this.idParamAngleY, this.focusController.y * 30);\r\n    this.coreModel.addParameterValueById(this.idParamAngleZ, this.focusController.x * this.focusController.y * -30);\r\n    this.coreModel.addParameterValueById(this.idParamBodyAngleX, this.focusController.x * 10);\r\n  }\r\n  updateNaturalMovements(dt, now) {\r\n    var _a;\r\n    (_a = this.breath) == null ? void 0 : _a.updateParameters(this.coreModel, dt / 1e3);\r\n  }\r\n  draw(gl) {\r\n    const matrix = this.drawingMatrix;\r\n    const array = tempMatrix.getArray();\r\n    array[0] = matrix.a;\r\n    array[1] = matrix.b;\r\n    array[4] = -matrix.c;\r\n    array[5] = -matrix.d;\r\n    array[12] = matrix.tx;\r\n    array[13] = matrix.ty;\r\n    this.renderer.setMvpMatrix(tempMatrix);\r\n    this.renderer.setRenderState(gl.getParameter(gl.FRAMEBUFFER_BINDING), this.viewport);\r\n    this.renderer.drawModel();\r\n  }\r\n  destroy() {\r\n    super.destroy();\r\n    this.renderer.release();\r\n    this.coreModel.release();\r\n    this.renderer = void 0;\r\n    this.coreModel = void 0;\r\n  }\r\n}\r\nlet startupPromise;\r\nlet startupRetries = 20;\r\nfunction cubism4Ready() {\r\n  if (CubismFramework.isStarted()) {\r\n    return Promise.resolve();\r\n  }\r\n  startupPromise != null ? startupPromise : startupPromise = new Promise((resolve, reject) => {\r\n    function startUpWithRetry() {\r\n      try {\r\n        startUpCubism4();\r\n        resolve();\r\n      } catch (e) {\r\n        startupRetries--;\r\n        if (startupRetries < 0) {\r\n          const err = new Error(\"Failed to start up Cubism 4 framework.\");\r\n          err.cause = e;\r\n          reject(err);\r\n          return;\r\n        }\r\n        logger.log(\"Cubism4\", \"Startup failed, retrying 10ms later...\");\r\n        setTimeout(startUpWithRetry, 10);\r\n      }\r\n    }\r\n    startUpWithRetry();\r\n  });\r\n  return startupPromise;\r\n}\r\nfunction startUpCubism4(options) {\r\n  options = Object.assign({\r\n    logFunction: console.log,\r\n    loggingLevel: LogLevel.LogLevel_Verbose\r\n  }, options);\r\n  CubismFramework.startUp(options);\r\n  CubismFramework.initialize();\r\n}\r\nconst Epsilon = 1e-3;\r\nconst DefaultFadeInSeconds = 0.5;\r\nclass CubismPose {\r\n  static create(pose3json) {\r\n    const ret = new CubismPose();\r\n    if (typeof pose3json.FadeInTime === \"number\") {\r\n      ret._fadeTimeSeconds = pose3json.FadeInTime;\r\n      if (ret._fadeTimeSeconds <= 0) {\r\n        ret._fadeTimeSeconds = DefaultFadeInSeconds;\r\n      }\r\n    }\r\n    const poseListInfo = pose3json.Groups;\r\n    const poseCount = poseListInfo.length;\r\n    for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\r\n      const idListInfo = poseListInfo[poseIndex];\r\n      const idCount = idListInfo.length;\r\n      let groupCount = 0;\r\n      for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\r\n        const partInfo = idListInfo[groupIndex];\r\n        const partData = new PartData();\r\n        partData.partId = partInfo.Id;\r\n        const linkListInfo = partInfo.Link;\r\n        if (linkListInfo) {\r\n          const linkCount = linkListInfo.length;\r\n          for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\r\n            const linkPart = new PartData();\r\n            linkPart.partId = linkListInfo[linkIndex];\r\n            partData.link.push(linkPart);\r\n          }\r\n        }\r\n        ret._partGroups.push(partData);\r\n        ++groupCount;\r\n      }\r\n      ret._partGroupCounts.push(groupCount);\r\n    }\r\n    return ret;\r\n  }\r\n  updateParameters(model, deltaTimeSeconds) {\r\n    if (model != this._lastModel) {\r\n      this.reset(model);\r\n    }\r\n    this._lastModel = model;\r\n    if (deltaTimeSeconds < 0) {\r\n      deltaTimeSeconds = 0;\r\n    }\r\n    let beginIndex = 0;\r\n    for (let i = 0; i < this._partGroupCounts.length; i++) {\r\n      const partGroupCount = this._partGroupCounts[i];\r\n      this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\r\n      beginIndex += partGroupCount;\r\n    }\r\n    this.copyPartOpacities(model);\r\n  }\r\n  reset(model) {\r\n    let beginIndex = 0;\r\n    for (let i = 0; i < this._partGroupCounts.length; ++i) {\r\n      const groupCount = this._partGroupCounts[i];\r\n      for (let j = beginIndex; j < beginIndex + groupCount; ++j) {\r\n        this._partGroups[j].initialize(model);\r\n        const partsIndex = this._partGroups[j].partIndex;\r\n        const paramIndex = this._partGroups[j].parameterIndex;\r\n        if (partsIndex < 0) {\r\n          continue;\r\n        }\r\n        model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1 : 0);\r\n        model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1 : 0);\r\n        for (let k = 0; k < this._partGroups[j].link.length; ++k) {\r\n          this._partGroups[j].link[k].initialize(model);\r\n        }\r\n      }\r\n      beginIndex += groupCount;\r\n    }\r\n  }\r\n  copyPartOpacities(model) {\r\n    for (let groupIndex = 0; groupIndex < this._partGroups.length; ++groupIndex) {\r\n      const partData = this._partGroups[groupIndex];\r\n      if (partData.link.length == 0) {\r\n        continue;\r\n      }\r\n      const partIndex = this._partGroups[groupIndex].partIndex;\r\n      const opacity = model.getPartOpacityByIndex(partIndex);\r\n      for (let linkIndex = 0; linkIndex < partData.link.length; ++linkIndex) {\r\n        const linkPart = partData.link[linkIndex];\r\n        const linkPartIndex = linkPart.partIndex;\r\n        if (linkPartIndex < 0) {\r\n          continue;\r\n        }\r\n        model.setPartOpacityByIndex(linkPartIndex, opacity);\r\n      }\r\n    }\r\n  }\r\n  doFade(model, deltaTimeSeconds, beginIndex, partGroupCount) {\r\n    let visiblePartIndex = -1;\r\n    let newOpacity = 1;\r\n    const phi = 0.5;\r\n    const backOpacityThreshold = 0.15;\r\n    for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n      const partIndex = this._partGroups[i].partIndex;\r\n      const paramIndex = this._partGroups[i].parameterIndex;\r\n      if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\r\n        if (visiblePartIndex >= 0) {\r\n          break;\r\n        }\r\n        visiblePartIndex = i;\r\n        newOpacity = model.getPartOpacityByIndex(partIndex);\r\n        newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\r\n        if (newOpacity > 1) {\r\n          newOpacity = 1;\r\n        }\r\n      }\r\n    }\r\n    if (visiblePartIndex < 0) {\r\n      visiblePartIndex = 0;\r\n      newOpacity = 1;\r\n    }\r\n    for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\r\n      const partsIndex = this._partGroups[i].partIndex;\r\n      if (visiblePartIndex == i) {\r\n        model.setPartOpacityByIndex(partsIndex, newOpacity);\r\n      } else {\r\n        let opacity = model.getPartOpacityByIndex(partsIndex);\r\n        let a1;\r\n        if (newOpacity < phi) {\r\n          a1 = newOpacity * (phi - 1) / phi + 1;\r\n        } else {\r\n          a1 = (1 - newOpacity) * phi / (1 - phi);\r\n        }\r\n        const backOpacity = (1 - a1) * (1 - newOpacity);\r\n        if (backOpacity > backOpacityThreshold) {\r\n          a1 = 1 - backOpacityThreshold / (1 - newOpacity);\r\n        }\r\n        if (opacity > a1) {\r\n          opacity = a1;\r\n        }\r\n        model.setPartOpacityByIndex(partsIndex, opacity);\r\n      }\r\n    }\r\n  }\r\n  constructor() {\r\n    this._fadeTimeSeconds = DefaultFadeInSeconds;\r\n    this._lastModel = void 0;\r\n    this._partGroups = [];\r\n    this._partGroupCounts = [];\r\n  }\r\n}\r\nclass PartData {\r\n  constructor(v) {\r\n    this.parameterIndex = 0;\r\n    this.partIndex = 0;\r\n    this.partId = \"\";\r\n    this.link = [];\r\n    if (v != void 0) {\r\n      this.assignment(v);\r\n    }\r\n  }\r\n  assignment(v) {\r\n    this.partId = v.partId;\r\n    this.link = v.link.map((link) => link.clone());\r\n    return this;\r\n  }\r\n  initialize(model) {\r\n    this.parameterIndex = model.getParameterIndex(this.partId);\r\n    this.partIndex = model.getPartIndex(this.partId);\r\n    model.setParameterValueByIndex(this.parameterIndex, 1);\r\n  }\r\n  clone() {\r\n    const clonePartData = new PartData();\r\n    clonePartData.partId = this.partId;\r\n    clonePartData.parameterIndex = this.parameterIndex;\r\n    clonePartData.partIndex = this.partIndex;\r\n    clonePartData.link = this.link.map((link) => link.clone());\r\n    return clonePartData;\r\n  }\r\n}\r\nclass CubismModel {\r\n  update() {\r\n    this._model.update();\r\n    this._model.drawables.resetDynamicFlags();\r\n  }\r\n  getCanvasWidth() {\r\n    if (this._model == null) {\r\n      return 0;\r\n    }\r\n    return this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit;\r\n  }\r\n  getCanvasHeight() {\r\n    if (this._model == null) {\r\n      return 0;\r\n    }\r\n    return this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit;\r\n  }\r\n  saveParameters() {\r\n    const parameterCount = this._model.parameters.count;\r\n    const savedParameterCount = this._savedParameters.length;\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      if (i < savedParameterCount) {\r\n        this._savedParameters[i] = this._parameterValues[i];\r\n      } else {\r\n        this._savedParameters.push(this._parameterValues[i]);\r\n      }\r\n    }\r\n  }\r\n  getModel() {\r\n    return this._model;\r\n  }\r\n  getPartIndex(partId) {\r\n    let partIndex;\r\n    const partCount = this._model.parts.count;\r\n    for (partIndex = 0; partIndex < partCount; ++partIndex) {\r\n      if (partId == this._partIds[partIndex]) {\r\n        return partIndex;\r\n      }\r\n    }\r\n    if (partId in this._notExistPartId) {\r\n      return this._notExistPartId[partId];\r\n    }\r\n    partIndex = partCount + this._notExistPartId.length;\r\n    this._notExistPartId[partId] = partIndex;\r\n    this._notExistPartOpacities[partIndex] = 0;\r\n    return partIndex;\r\n  }\r\n  getPartCount() {\r\n    return this._model.parts.count;\r\n  }\r\n  setPartOpacityByIndex(partIndex, opacity) {\r\n    if (partIndex in this._notExistPartOpacities) {\r\n      this._notExistPartOpacities[partIndex] = opacity;\r\n      return;\r\n    }\r\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n    this._partOpacities[partIndex] = opacity;\r\n  }\r\n  setPartOpacityById(partId, opacity) {\r\n    const index = this.getPartIndex(partId);\r\n    if (index < 0) {\r\n      return;\r\n    }\r\n    this.setPartOpacityByIndex(index, opacity);\r\n  }\r\n  getPartOpacityByIndex(partIndex) {\r\n    if (partIndex in this._notExistPartOpacities) {\r\n      return this._notExistPartOpacities[partIndex];\r\n    }\r\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\r\n    return this._partOpacities[partIndex];\r\n  }\r\n  getPartOpacityById(partId) {\r\n    const index = this.getPartIndex(partId);\r\n    if (index < 0) {\r\n      return 0;\r\n    }\r\n    return this.getPartOpacityByIndex(index);\r\n  }\r\n  getParameterIndex(parameterId) {\r\n    let parameterIndex;\r\n    const idCount = this._model.parameters.count;\r\n    for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\r\n      if (parameterId != this._parameterIds[parameterIndex]) {\r\n        continue;\r\n      }\r\n      return parameterIndex;\r\n    }\r\n    if (parameterId in this._notExistParameterId) {\r\n      return this._notExistParameterId[parameterId];\r\n    }\r\n    parameterIndex = this._model.parameters.count + Object.keys(this._notExistParameterId).length;\r\n    this._notExistParameterId[parameterId] = parameterIndex;\r\n    this._notExistParameterValues[parameterIndex] = 0;\r\n    return parameterIndex;\r\n  }\r\n  getParameterCount() {\r\n    return this._model.parameters.count;\r\n  }\r\n  getParameterMaximumValue(parameterIndex) {\r\n    return this._model.parameters.maximumValues[parameterIndex];\r\n  }\r\n  getParameterMinimumValue(parameterIndex) {\r\n    return this._model.parameters.minimumValues[parameterIndex];\r\n  }\r\n  getParameterDefaultValue(parameterIndex) {\r\n    return this._model.parameters.defaultValues[parameterIndex];\r\n  }\r\n  getParameterValueByIndex(parameterIndex) {\r\n    if (parameterIndex in this._notExistParameterValues) {\r\n      return this._notExistParameterValues[parameterIndex];\r\n    }\r\n    CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\r\n    return this._parameterValues[parameterIndex];\r\n  }\r\n  getParameterValueById(parameterId) {\r\n    const parameterIndex = this.getParameterIndex(parameterId);\r\n    return this.getParameterValueByIndex(parameterIndex);\r\n  }\r\n  setParameterValueByIndex(parameterIndex, value, weight = 1) {\r\n    if (parameterIndex in this._notExistParameterValues) {\r\n      this._notExistParameterValues[parameterIndex] = weight == 1 ? value : this._notExistParameterValues[parameterIndex] * (1 - weight) + value * weight;\r\n      return;\r\n    }\r\n    CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\r\n    if (this._model.parameters.maximumValues[parameterIndex] < value) {\r\n      value = this._model.parameters.maximumValues[parameterIndex];\r\n    }\r\n    if (this._model.parameters.minimumValues[parameterIndex] > value) {\r\n      value = this._model.parameters.minimumValues[parameterIndex];\r\n    }\r\n    this._parameterValues[parameterIndex] = weight == 1 ? value : this._parameterValues[parameterIndex] = this._parameterValues[parameterIndex] * (1 - weight) + value * weight;\r\n  }\r\n  setParameterValueById(parameterId, value, weight = 1) {\r\n    const index = this.getParameterIndex(parameterId);\r\n    this.setParameterValueByIndex(index, value, weight);\r\n  }\r\n  addParameterValueByIndex(parameterIndex, value, weight = 1) {\r\n    this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);\r\n  }\r\n  addParameterValueById(parameterId, value, weight = 1) {\r\n    const index = this.getParameterIndex(parameterId);\r\n    this.addParameterValueByIndex(index, value, weight);\r\n  }\r\n  multiplyParameterValueById(parameterId, value, weight = 1) {\r\n    const index = this.getParameterIndex(parameterId);\r\n    this.multiplyParameterValueByIndex(index, value, weight);\r\n  }\r\n  multiplyParameterValueByIndex(parameterIndex, value, weight = 1) {\r\n    this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) * (1 + (value - 1) * weight));\r\n  }\r\n  getDrawableIds() {\r\n    return this._drawableIds.slice();\r\n  }\r\n  getDrawableIndex(drawableId) {\r\n    const drawableCount = this._model.drawables.count;\r\n    for (let drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {\r\n      if (this._drawableIds[drawableIndex] == drawableId) {\r\n        return drawableIndex;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n  getDrawableCount() {\r\n    return this._model.drawables.count;\r\n  }\r\n  getDrawableId(drawableIndex) {\r\n    return this._model.drawables.ids[drawableIndex];\r\n  }\r\n  getDrawableRenderOrders() {\r\n    return this._model.drawables.renderOrders;\r\n  }\r\n  getDrawableTextureIndices(drawableIndex) {\r\n    return this._model.drawables.textureIndices[drawableIndex];\r\n  }\r\n  getDrawableDynamicFlagVertexPositionsDidChange(drawableIndex) {\r\n    const dynamicFlags = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);\r\n  }\r\n  getDrawableVertexIndexCount(drawableIndex) {\r\n    return this._model.drawables.indexCounts[drawableIndex];\r\n  }\r\n  getDrawableVertexCount(drawableIndex) {\r\n    return this._model.drawables.vertexCounts[drawableIndex];\r\n  }\r\n  getDrawableVertices(drawableIndex) {\r\n    return this.getDrawableVertexPositions(drawableIndex);\r\n  }\r\n  getDrawableVertexIndices(drawableIndex) {\r\n    return this._model.drawables.indices[drawableIndex];\r\n  }\r\n  getDrawableVertexPositions(drawableIndex) {\r\n    return this._model.drawables.vertexPositions[drawableIndex];\r\n  }\r\n  getDrawableVertexUvs(drawableIndex) {\r\n    return this._model.drawables.vertexUvs[drawableIndex];\r\n  }\r\n  getDrawableOpacity(drawableIndex) {\r\n    return this._model.drawables.opacities[drawableIndex];\r\n  }\r\n  getDrawableCulling(drawableIndex) {\r\n    const constantFlags = this._model.drawables.constantFlags;\r\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);\r\n  }\r\n  getDrawableBlendMode(drawableIndex) {\r\n    const constantFlags = this._model.drawables.constantFlags;\r\n    return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex]) ? CubismBlendMode.CubismBlendMode_Additive : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex]) ? CubismBlendMode.CubismBlendMode_Multiplicative : CubismBlendMode.CubismBlendMode_Normal;\r\n  }\r\n  getDrawableInvertedMaskBit(drawableIndex) {\r\n    const constantFlags = this._model.drawables.constantFlags;\r\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);\r\n  }\r\n  getDrawableMasks() {\r\n    return this._model.drawables.masks;\r\n  }\r\n  getDrawableMaskCounts() {\r\n    return this._model.drawables.maskCounts;\r\n  }\r\n  isUsingMasking() {\r\n    for (let d = 0; d < this._model.drawables.count; ++d) {\r\n      if (this._model.drawables.maskCounts[d] <= 0) {\r\n        continue;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  getDrawableDynamicFlagIsVisible(drawableIndex) {\r\n    const dynamicFlags = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\r\n  }\r\n  getDrawableDynamicFlagVisibilityDidChange(drawableIndex) {\r\n    const dynamicFlags = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);\r\n  }\r\n  getDrawableDynamicFlagOpacityDidChange(drawableIndex) {\r\n    const dynamicFlags = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);\r\n  }\r\n  getDrawableDynamicFlagRenderOrderDidChange(drawableIndex) {\r\n    const dynamicFlags = this._model.drawables.dynamicFlags;\r\n    return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);\r\n  }\r\n  loadParameters() {\r\n    let parameterCount = this._model.parameters.count;\r\n    const savedParameterCount = this._savedParameters.length;\r\n    if (parameterCount > savedParameterCount) {\r\n      parameterCount = savedParameterCount;\r\n    }\r\n    for (let i = 0; i < parameterCount; ++i) {\r\n      this._parameterValues[i] = this._savedParameters[i];\r\n    }\r\n  }\r\n  initialize() {\r\n    this._parameterValues = this._model.parameters.values;\r\n    this._partOpacities = this._model.parts.opacities;\r\n    this._parameterMaximumValues = this._model.parameters.maximumValues;\r\n    this._parameterMinimumValues = this._model.parameters.minimumValues;\r\n    {\r\n      const parameterIds = this._model.parameters.ids;\r\n      const parameterCount = this._model.parameters.count;\r\n      for (let i = 0; i < parameterCount; ++i) {\r\n        this._parameterIds.push(parameterIds[i]);\r\n      }\r\n    }\r\n    {\r\n      const partIds = this._model.parts.ids;\r\n      const partCount = this._model.parts.count;\r\n      for (let i = 0; i < partCount; ++i) {\r\n        this._partIds.push(partIds[i]);\r\n      }\r\n    }\r\n    {\r\n      const drawableIds = this._model.drawables.ids;\r\n      const drawableCount = this._model.drawables.count;\r\n      for (let i = 0; i < drawableCount; ++i) {\r\n        this._drawableIds.push(drawableIds[i]);\r\n      }\r\n    }\r\n  }\r\n  constructor(model) {\r\n    this._model = model;\r\n    this._savedParameters = [];\r\n    this._parameterIds = [];\r\n    this._drawableIds = [];\r\n    this._partIds = [];\r\n    this._notExistPartId = {};\r\n    this._notExistParameterId = {};\r\n    this._notExistParameterValues = {};\r\n    this._notExistPartOpacities = {};\r\n    this.initialize();\r\n  }\r\n  release() {\r\n    this._model.release();\r\n    this._model = void 0;\r\n  }\r\n}\r\nclass CubismMoc {\r\n  static create(mocBytes) {\r\n    const moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\r\n    if (moc) {\r\n      return new CubismMoc(moc);\r\n    }\r\n    throw new Error(\"Unknown error\");\r\n  }\r\n  createModel() {\r\n    let cubismModel;\r\n    const model = Live2DCubismCore.Model.fromMoc(this._moc);\r\n    if (model) {\r\n      cubismModel = new CubismModel(model);\r\n      ++this._modelCount;\r\n      return cubismModel;\r\n    }\r\n    throw new Error(\"Unknown error\");\r\n  }\r\n  deleteModel(model) {\r\n    if (model != null) {\r\n      --this._modelCount;\r\n    }\r\n  }\r\n  constructor(moc) {\r\n    this._moc = moc;\r\n    this._modelCount = 0;\r\n  }\r\n  release() {\r\n    this._moc._release();\r\n    this._moc = void 0;\r\n  }\r\n}\r\nvar CubismPhysicsTargetType = /* @__PURE__ */ ((CubismPhysicsTargetType2) => {\r\n  CubismPhysicsTargetType2[CubismPhysicsTargetType2[\"CubismPhysicsTargetType_Parameter\"] = 0] = \"CubismPhysicsTargetType_Parameter\";\r\n  return CubismPhysicsTargetType2;\r\n})(CubismPhysicsTargetType || {});\r\nvar CubismPhysicsSource = /* @__PURE__ */ ((CubismPhysicsSource2) => {\r\n  CubismPhysicsSource2[CubismPhysicsSource2[\"CubismPhysicsSource_X\"] = 0] = \"CubismPhysicsSource_X\";\r\n  CubismPhysicsSource2[CubismPhysicsSource2[\"CubismPhysicsSource_Y\"] = 1] = \"CubismPhysicsSource_Y\";\r\n  CubismPhysicsSource2[CubismPhysicsSource2[\"CubismPhysicsSource_Angle\"] = 2] = \"CubismPhysicsSource_Angle\";\r\n  return CubismPhysicsSource2;\r\n})(CubismPhysicsSource || {});\r\nclass CubismPhysicsParticle {\r\n  constructor() {\r\n    this.initialPosition = new CubismVector2(0, 0);\r\n    this.position = new CubismVector2(0, 0);\r\n    this.lastPosition = new CubismVector2(0, 0);\r\n    this.lastGravity = new CubismVector2(0, 0);\r\n    this.force = new CubismVector2(0, 0);\r\n    this.velocity = new CubismVector2(0, 0);\r\n  }\r\n}\r\nclass CubismPhysicsSubRig {\r\n  constructor() {\r\n    this.normalizationPosition = {};\r\n    this.normalizationAngle = {};\r\n  }\r\n}\r\nclass CubismPhysicsInput {\r\n  constructor() {\r\n    this.source = {};\r\n  }\r\n}\r\nclass CubismPhysicsOutput {\r\n  constructor() {\r\n    this.destination = {};\r\n    this.translationScale = new CubismVector2(0, 0);\r\n  }\r\n}\r\nclass CubismPhysicsRig {\r\n  constructor() {\r\n    this.settings = [];\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.particles = [];\r\n    this.gravity = new CubismVector2(0, 0);\r\n    this.wind = new CubismVector2(0, 0);\r\n  }\r\n}\r\nclass CubismPhysicsJson {\r\n  constructor(json) {\r\n    this._json = json;\r\n  }\r\n  release() {\r\n    this._json = void 0;\r\n  }\r\n  getGravity() {\r\n    const ret = new CubismVector2(0, 0);\r\n    ret.x = this._json.Meta.EffectiveForces.Gravity.X;\r\n    ret.y = this._json.Meta.EffectiveForces.Gravity.Y;\r\n    return ret;\r\n  }\r\n  getWind() {\r\n    const ret = new CubismVector2(0, 0);\r\n    ret.x = this._json.Meta.EffectiveForces.Wind.X;\r\n    ret.y = this._json.Meta.EffectiveForces.Wind.Y;\r\n    return ret;\r\n  }\r\n  getSubRigCount() {\r\n    return this._json.Meta.PhysicsSettingCount;\r\n  }\r\n  getTotalInputCount() {\r\n    return this._json.Meta.TotalInputCount;\r\n  }\r\n  getTotalOutputCount() {\r\n    return this._json.Meta.TotalOutputCount;\r\n  }\r\n  getVertexCount() {\r\n    return this._json.Meta.VertexCount;\r\n  }\r\n  getNormalizationPositionMinimumValue(physicsSettingIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Position.Minimum;\r\n  }\r\n  getNormalizationPositionMaximumValue(physicsSettingIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Position.Maximum;\r\n  }\r\n  getNormalizationPositionDefaultValue(physicsSettingIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Position.Default;\r\n  }\r\n  getNormalizationAngleMinimumValue(physicsSettingIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Angle.Minimum;\r\n  }\r\n  getNormalizationAngleMaximumValue(physicsSettingIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Angle.Maximum;\r\n  }\r\n  getNormalizationAngleDefaultValue(physicsSettingIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Angle.Default;\r\n  }\r\n  getInputCount(physicsSettingIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Input.length;\r\n  }\r\n  getInputWeight(physicsSettingIndex, inputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Weight;\r\n  }\r\n  getInputReflect(physicsSettingIndex, inputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Reflect;\r\n  }\r\n  getInputType(physicsSettingIndex, inputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Type;\r\n  }\r\n  getInputSourceId(physicsSettingIndex, inputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Source.Id;\r\n  }\r\n  getOutputCount(physicsSettingIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Output.length;\r\n  }\r\n  getOutputVertexIndex(physicsSettingIndex, outputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].VertexIndex;\r\n  }\r\n  getOutputAngleScale(physicsSettingIndex, outputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Scale;\r\n  }\r\n  getOutputWeight(physicsSettingIndex, outputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Weight;\r\n  }\r\n  getOutputDestinationId(physicsSettingIndex, outputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Destination.Id;\r\n  }\r\n  getOutputType(physicsSettingIndex, outputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Type;\r\n  }\r\n  getOutputReflect(physicsSettingIndex, outputIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Reflect;\r\n  }\r\n  getParticleCount(physicsSettingIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices.length;\r\n  }\r\n  getParticleMobility(physicsSettingIndex, vertexIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Mobility;\r\n  }\r\n  getParticleDelay(physicsSettingIndex, vertexIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Delay;\r\n  }\r\n  getParticleAcceleration(physicsSettingIndex, vertexIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Acceleration;\r\n  }\r\n  getParticleRadius(physicsSettingIndex, vertexIndex) {\r\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Radius;\r\n  }\r\n  getParticlePosition(physicsSettingIndex, vertexIndex) {\r\n    const ret = new CubismVector2(0, 0);\r\n    ret.x = this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Position.X;\r\n    ret.y = this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Position.Y;\r\n    return ret;\r\n  }\r\n}\r\nconst PhysicsTypeTagX = \"X\";\r\nconst PhysicsTypeTagY = \"Y\";\r\nconst PhysicsTypeTagAngle = \"Angle\";\r\nconst AirResistance = 5;\r\nconst MaximumWeight = 100;\r\nconst MovementThreshold = 1e-3;\r\nclass CubismPhysics {\r\n  static create(json) {\r\n    const ret = new CubismPhysics();\r\n    ret.parse(json);\r\n    ret._physicsRig.gravity.y = 0;\r\n    return ret;\r\n  }\r\n  evaluate(model, deltaTimeSeconds) {\r\n    let totalAngle;\r\n    let weight;\r\n    let radAngle;\r\n    let outputValue;\r\n    const totalTranslation = new CubismVector2();\r\n    let currentSetting;\r\n    let currentInput;\r\n    let currentOutput;\r\n    let currentParticles;\r\n    let parameterValue;\r\n    let parameterMaximumValue;\r\n    let parameterMinimumValue;\r\n    let parameterDefaultValue;\r\n    parameterValue = model.getModel().parameters.values;\r\n    parameterMaximumValue = model.getModel().parameters.maximumValues;\r\n    parameterMinimumValue = model.getModel().parameters.minimumValues;\r\n    parameterDefaultValue = model.getModel().parameters.defaultValues;\r\n    for (let settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\r\n      totalAngle = { angle: 0 };\r\n      totalTranslation.x = 0;\r\n      totalTranslation.y = 0;\r\n      currentSetting = this._physicsRig.settings[settingIndex];\r\n      currentInput = this._physicsRig.inputs.slice(currentSetting.baseInputIndex);\r\n      currentOutput = this._physicsRig.outputs.slice(currentSetting.baseOutputIndex);\r\n      currentParticles = this._physicsRig.particles.slice(currentSetting.baseParticleIndex);\r\n      for (let i = 0; i < currentSetting.inputCount; ++i) {\r\n        weight = currentInput[i].weight / MaximumWeight;\r\n        if (currentInput[i].sourceParameterIndex == -1) {\r\n          currentInput[i].sourceParameterIndex = model.getParameterIndex(currentInput[i].source.id);\r\n        }\r\n        currentInput[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValue[currentInput[i].sourceParameterIndex], parameterMinimumValue[currentInput[i].sourceParameterIndex], parameterMaximumValue[currentInput[i].sourceParameterIndex], parameterDefaultValue[currentInput[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInput[i].reflect, weight);\r\n      }\r\n      radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\r\n      totalTranslation.x = totalTranslation.x * CubismMath.cos(radAngle) - totalTranslation.y * CubismMath.sin(radAngle);\r\n      totalTranslation.y = totalTranslation.x * CubismMath.sin(radAngle) + totalTranslation.y * CubismMath.cos(radAngle);\r\n      updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, deltaTimeSeconds, AirResistance);\r\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\r\n        const particleIndex = currentOutput[i].vertexIndex;\r\n        if (particleIndex < 1 || particleIndex >= currentSetting.particleCount) {\r\n          break;\r\n        }\r\n        if (currentOutput[i].destinationParameterIndex == -1) {\r\n          currentOutput[i].destinationParameterIndex = model.getParameterIndex(currentOutput[i].destination.id);\r\n        }\r\n        const translation = new CubismVector2();\r\n        translation.x = currentParticles[particleIndex].position.x - currentParticles[particleIndex - 1].position.x;\r\n        translation.y = currentParticles[particleIndex].position.y - currentParticles[particleIndex - 1].position.y;\r\n        outputValue = currentOutput[i].getValue(translation, currentParticles, particleIndex, currentOutput[i].reflect, this._options.gravity);\r\n        const destinationParameterIndex = currentOutput[i].destinationParameterIndex;\r\n        const outParameterValue = !Float32Array.prototype.slice && \"subarray\" in Float32Array.prototype ? JSON.parse(JSON.stringify(parameterValue.subarray(destinationParameterIndex))) : parameterValue.slice(destinationParameterIndex);\r\n        updateOutputParameterValue(outParameterValue, parameterMinimumValue[destinationParameterIndex], parameterMaximumValue[destinationParameterIndex], outputValue, currentOutput[i]);\r\n        for (let offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValue.length; offset++, outParamIndex++) {\r\n          parameterValue[offset] = outParameterValue[outParamIndex];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  setOptions(options) {\r\n    this._options = options;\r\n  }\r\n  getOption() {\r\n    return this._options;\r\n  }\r\n  constructor() {\r\n    this._options = new Options();\r\n    this._options.gravity.y = -1;\r\n    this._options.gravity.x = 0;\r\n    this._options.wind.x = 0;\r\n    this._options.wind.y = 0;\r\n  }\r\n  release() {\r\n    this._physicsRig = void 0;\r\n  }\r\n  parse(physicsJson) {\r\n    this._physicsRig = new CubismPhysicsRig();\r\n    let json = new CubismPhysicsJson(physicsJson);\r\n    this._physicsRig.gravity = json.getGravity();\r\n    this._physicsRig.wind = json.getWind();\r\n    this._physicsRig.subRigCount = json.getSubRigCount();\r\n    let inputIndex = 0, outputIndex = 0, particleIndex = 0;\r\n    for (let i = 0; i < this._physicsRig.subRigCount; ++i) {\r\n      const setting = new CubismPhysicsSubRig();\r\n      setting.normalizationPosition.minimum = json.getNormalizationPositionMinimumValue(i);\r\n      setting.normalizationPosition.maximum = json.getNormalizationPositionMaximumValue(i);\r\n      setting.normalizationPosition.defalut = json.getNormalizationPositionDefaultValue(i);\r\n      setting.normalizationAngle.minimum = json.getNormalizationAngleMinimumValue(i);\r\n      setting.normalizationAngle.maximum = json.getNormalizationAngleMaximumValue(i);\r\n      setting.normalizationAngle.defalut = json.getNormalizationAngleDefaultValue(i);\r\n      setting.inputCount = json.getInputCount(i);\r\n      setting.baseInputIndex = inputIndex;\r\n      inputIndex += setting.inputCount;\r\n      for (let j = 0; j < setting.inputCount; ++j) {\r\n        const input = new CubismPhysicsInput();\r\n        input.sourceParameterIndex = -1;\r\n        input.weight = json.getInputWeight(i, j);\r\n        input.reflect = json.getInputReflect(i, j);\r\n        switch (json.getInputType(i, j)) {\r\n          case PhysicsTypeTagX:\r\n            input.type = CubismPhysicsSource.CubismPhysicsSource_X;\r\n            input.getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;\r\n            break;\r\n          case PhysicsTypeTagY:\r\n            input.type = CubismPhysicsSource.CubismPhysicsSource_Y;\r\n            input.getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;\r\n            break;\r\n          case PhysicsTypeTagAngle:\r\n            input.type = CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n            input.getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;\r\n            break;\r\n        }\r\n        input.source.targetType = CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n        input.source.id = json.getInputSourceId(i, j);\r\n        this._physicsRig.inputs.push(input);\r\n      }\r\n      setting.outputCount = json.getOutputCount(i);\r\n      setting.baseOutputIndex = outputIndex;\r\n      outputIndex += setting.outputCount;\r\n      for (let j = 0; j < setting.outputCount; ++j) {\r\n        const output = new CubismPhysicsOutput();\r\n        output.destinationParameterIndex = -1;\r\n        output.vertexIndex = json.getOutputVertexIndex(i, j);\r\n        output.angleScale = json.getOutputAngleScale(i, j);\r\n        output.weight = json.getOutputWeight(i, j);\r\n        output.destination.targetType = CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\r\n        output.destination.id = json.getOutputDestinationId(i, j);\r\n        switch (json.getOutputType(i, j)) {\r\n          case PhysicsTypeTagX:\r\n            output.type = CubismPhysicsSource.CubismPhysicsSource_X;\r\n            output.getValue = getOutputTranslationX;\r\n            output.getScale = getOutputScaleTranslationX;\r\n            break;\r\n          case PhysicsTypeTagY:\r\n            output.type = CubismPhysicsSource.CubismPhysicsSource_Y;\r\n            output.getValue = getOutputTranslationY;\r\n            output.getScale = getOutputScaleTranslationY;\r\n            break;\r\n          case PhysicsTypeTagAngle:\r\n            output.type = CubismPhysicsSource.CubismPhysicsSource_Angle;\r\n            output.getValue = getOutputAngle;\r\n            output.getScale = getOutputScaleAngle;\r\n            break;\r\n        }\r\n        output.reflect = json.getOutputReflect(i, j);\r\n        this._physicsRig.outputs.push(output);\r\n      }\r\n      setting.particleCount = json.getParticleCount(i);\r\n      setting.baseParticleIndex = particleIndex;\r\n      particleIndex += setting.particleCount;\r\n      for (let j = 0; j < setting.particleCount; ++j) {\r\n        const particle = new CubismPhysicsParticle();\r\n        particle.mobility = json.getParticleMobility(i, j);\r\n        particle.delay = json.getParticleDelay(i, j);\r\n        particle.acceleration = json.getParticleAcceleration(i, j);\r\n        particle.radius = json.getParticleRadius(i, j);\r\n        particle.position = json.getParticlePosition(i, j);\r\n        this._physicsRig.particles.push(particle);\r\n      }\r\n      this._physicsRig.settings.push(setting);\r\n    }\r\n    this.initialize();\r\n    json.release();\r\n  }\r\n  initialize() {\r\n    let strand;\r\n    let currentSetting;\r\n    let radius;\r\n    for (let settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\r\n      currentSetting = this._physicsRig.settings[settingIndex];\r\n      strand = this._physicsRig.particles.slice(currentSetting.baseParticleIndex);\r\n      strand[0].initialPosition = new CubismVector2(0, 0);\r\n      strand[0].lastPosition = new CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);\r\n      strand[0].lastGravity = new CubismVector2(0, -1);\r\n      strand[0].lastGravity.y *= -1;\r\n      strand[0].velocity = new CubismVector2(0, 0);\r\n      strand[0].force = new CubismVector2(0, 0);\r\n      for (let i = 1; i < currentSetting.particleCount; ++i) {\r\n        radius = new CubismVector2(0, 0);\r\n        radius.y = strand[i].radius;\r\n        strand[i].initialPosition = new CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);\r\n        strand[i].position = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\r\n        strand[i].lastPosition = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\r\n        strand[i].lastGravity = new CubismVector2(0, -1);\r\n        strand[i].lastGravity.y *= -1;\r\n        strand[i].velocity = new CubismVector2(0, 0);\r\n        strand[i].force = new CubismVector2(0, 0);\r\n      }\r\n    }\r\n  }\r\n}\r\nclass Options {\r\n  constructor() {\r\n    this.gravity = new CubismVector2(0, 0);\r\n    this.wind = new CubismVector2(0, 0);\r\n  }\r\n}\r\nfunction getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\r\n  targetTranslation.x += normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\r\n}\r\nfunction getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\r\n  targetTranslation.y += normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\r\n}\r\nfunction getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {\r\n  targetAngle.angle += normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;\r\n}\r\nfunction getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {\r\n  let outputValue = translation.x;\r\n  if (isInverted) {\r\n    outputValue *= -1;\r\n  }\r\n  return outputValue;\r\n}\r\nfunction getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {\r\n  let outputValue = translation.y;\r\n  if (isInverted) {\r\n    outputValue *= -1;\r\n  }\r\n  return outputValue;\r\n}\r\nfunction getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {\r\n  let outputValue;\r\n  if (particleIndex >= 2) {\r\n    parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);\r\n  } else {\r\n    parentGravity = parentGravity.multiplyByScaler(-1);\r\n  }\r\n  outputValue = CubismMath.directionToRadian(parentGravity, translation);\r\n  if (isInverted) {\r\n    outputValue *= -1;\r\n  }\r\n  return outputValue;\r\n}\r\nfunction getRangeValue(min, max) {\r\n  return Math.abs(Math.max(min, max) - Math.min(min, max));\r\n}\r\nfunction getDefaultValue(min, max) {\r\n  const minValue = Math.min(min, max);\r\n  return minValue + getRangeValue(min, max) / 2;\r\n}\r\nfunction getOutputScaleTranslationX(translationScale, angleScale) {\r\n  return translationScale.x;\r\n}\r\nfunction getOutputScaleTranslationY(translationScale, angleScale) {\r\n  return translationScale.y;\r\n}\r\nfunction getOutputScaleAngle(translationScale, angleScale) {\r\n  return angleScale;\r\n}\r\nfunction updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {\r\n  let totalRadian;\r\n  let delay;\r\n  let radian;\r\n  let currentGravity;\r\n  let direction = new CubismVector2(0, 0);\r\n  let velocity = new CubismVector2(0, 0);\r\n  let force = new CubismVector2(0, 0);\r\n  let newDirection = new CubismVector2(0, 0);\r\n  strand[0].position = new CubismVector2(totalTranslation.x, totalTranslation.y);\r\n  totalRadian = CubismMath.degreesToRadian(totalAngle);\r\n  currentGravity = CubismMath.radianToDirection(totalRadian);\r\n  currentGravity.normalize();\r\n  for (let i = 1; i < strandCount; ++i) {\r\n    strand[i].force = currentGravity.multiplyByScaler(strand[i].acceleration).add(windDirection);\r\n    strand[i].lastPosition = new CubismVector2(strand[i].position.x, strand[i].position.y);\r\n    delay = strand[i].delay * deltaTimeSeconds * 30;\r\n    direction = strand[i].position.substract(strand[i - 1].position);\r\n    radian = CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) / airResistance;\r\n    direction.x = CubismMath.cos(radian) * direction.x - direction.y * CubismMath.sin(radian);\r\n    direction.y = CubismMath.sin(radian) * direction.x + direction.y * CubismMath.cos(radian);\r\n    strand[i].position = strand[i - 1].position.add(direction);\r\n    velocity = strand[i].velocity.multiplyByScaler(delay);\r\n    force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\r\n    strand[i].position = strand[i].position.add(velocity).add(force);\r\n    newDirection = strand[i].position.substract(strand[i - 1].position);\r\n    newDirection.normalize();\r\n    strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));\r\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\r\n      strand[i].position.x = 0;\r\n    }\r\n    if (delay != 0) {\r\n      strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\r\n      strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\r\n      strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);\r\n    }\r\n    strand[i].force = new CubismVector2(0, 0);\r\n    strand[i].lastGravity = new CubismVector2(currentGravity.x, currentGravity.y);\r\n  }\r\n}\r\nfunction updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {\r\n  let outputScale;\r\n  let value;\r\n  let weight;\r\n  outputScale = output.getScale(output.translationScale, output.angleScale);\r\n  value = translation * outputScale;\r\n  if (value < parameterValueMinimum) {\r\n    if (value < output.valueBelowMinimum) {\r\n      output.valueBelowMinimum = value;\r\n    }\r\n    value = parameterValueMinimum;\r\n  } else if (value > parameterValueMaximum) {\r\n    if (value > output.valueExceededMaximum) {\r\n      output.valueExceededMaximum = value;\r\n    }\r\n    value = parameterValueMaximum;\r\n  }\r\n  weight = output.weight / MaximumWeight;\r\n  if (weight >= 1) {\r\n    parameterValue[0] = value;\r\n  } else {\r\n    value = parameterValue[0] * (1 - weight) + value * weight;\r\n    parameterValue[0] = value;\r\n  }\r\n}\r\nfunction normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {\r\n  let result = 0;\r\n  const maxValue = CubismMath.max(parameterMaximum, parameterMinimum);\r\n  if (maxValue < value) {\r\n    value = maxValue;\r\n  }\r\n  const minValue = CubismMath.min(parameterMaximum, parameterMinimum);\r\n  if (minValue > value) {\r\n    value = minValue;\r\n  }\r\n  const minNormValue = CubismMath.min(normalizedMinimum, normalizedMaximum);\r\n  const maxNormValue = CubismMath.max(normalizedMinimum, normalizedMaximum);\r\n  const middleNormValue = normalizedDefault;\r\n  const middleValue = getDefaultValue(minValue, maxValue);\r\n  const paramValue = value - middleValue;\r\n  switch (Math.sign(paramValue)) {\r\n    case 1: {\r\n      const nLength = maxNormValue - middleNormValue;\r\n      const pLength = maxValue - middleValue;\r\n      if (pLength != 0) {\r\n        result = paramValue * (nLength / pLength);\r\n        result += middleNormValue;\r\n      }\r\n      break;\r\n    }\r\n    case -1: {\r\n      const nLength = minNormValue - middleNormValue;\r\n      const pLength = minValue - middleValue;\r\n      if (pLength != 0) {\r\n        result = paramValue * (nLength / pLength);\r\n        result += middleNormValue;\r\n      }\r\n      break;\r\n    }\r\n    case 0: {\r\n      result = middleNormValue;\r\n      break;\r\n    }\r\n  }\r\n  return isInverted ? result : result * -1;\r\n}\r\nLive2DFactory.registerRuntime({\r\n  version: 4,\r\n  ready: cubism4Ready,\r\n  test(source) {\r\n    return source instanceof Cubism4ModelSettings || Cubism4ModelSettings.isValidJSON(source);\r\n  },\r\n  isValidMoc(modelData) {\r\n    if (modelData.byteLength < 4) {\r\n      return false;\r\n    }\r\n    const view = new Int8Array(modelData, 0, 4);\r\n    return String.fromCharCode(...view) === \"MOC3\";\r\n  },\r\n  createModelSettings(json) {\r\n    return new Cubism4ModelSettings(json);\r\n  },\r\n  createCoreModel(data) {\r\n    const moc = CubismMoc.create(data);\r\n    try {\r\n      const model = moc.createModel();\r\n      model.__moc = moc;\r\n      return model;\r\n    } catch (e) {\r\n      try {\r\n        moc.release();\r\n      } catch (ignored) {\r\n      }\r\n      throw e;\r\n    }\r\n  },\r\n  createInternalModel(coreModel, settings, options) {\r\n    const model = new Cubism4InternalModel(coreModel, settings, options);\r\n    const coreModelWithMoc = coreModel;\r\n    if (coreModelWithMoc.__moc) {\r\n      model.__moc = coreModelWithMoc.__moc;\r\n      delete coreModelWithMoc.__moc;\r\n      model.once(\"destroy\", releaseMoc);\r\n    }\r\n    return model;\r\n  },\r\n  createPhysics(coreModel, data) {\r\n    return CubismPhysics.create(data);\r\n  },\r\n  createPose(coreModel, data) {\r\n    return CubismPose.create(data);\r\n  }\r\n});\r\nfunction releaseMoc() {\r\n  var _a;\r\n  (_a = this.__moc) == null ? void 0 : _a.release();\r\n}\r\nexport { Cubism2ExpressionManager, Cubism2InternalModel, Cubism2ModelSettings, Cubism2MotionManager, Cubism4ExpressionManager, Cubism4InternalModel, Cubism4ModelSettings, Cubism4MotionManager, ExpressionManager, FileLoader, FocusController, InteractionMixin, InternalModel, LOGICAL_HEIGHT, LOGICAL_WIDTH, Live2DExpression, Live2DEyeBlink, Live2DFactory, Live2DLoader, Live2DModel, Live2DPhysics, Live2DPose, Live2DTransform, ModelSettings, MotionManager, MotionPreloadStrategy, MotionPriority, MotionState, SoundManager, VERSION, XHRLoader, ZipLoader, applyMixins, clamp, config, copyArray, copyProperty, cubism4Ready, folderName, logger, rand, remove, startUpCubism4 };\r\n"],
  "mappings": "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",
  "names": []
}
